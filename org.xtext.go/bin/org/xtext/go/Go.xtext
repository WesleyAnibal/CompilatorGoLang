grammar org.xtext.go.Go with org.eclipse.xtext.common.Terminals

generate go "http://www.xtext.org/go/Go"

Go:
	(elements+=Greeting*);

Greeting:
	DecVar | DataType | Entity | DecFunc | EOL | Condition | Operations;

DecVar:
	DecVars |VAR vars+=ID("," vars+=ID)* TYPE ("=" atrb+=ID("," atrb+=ID)*)?;

DecVars:
	vars+=ID("," vars+=ID)* ":=" atrb+=ID("," atrb+=ID)*;


Operations returns INT:
	Sum | Subtraction | Multiplication | Division | INT;
		
Double:
	INT"."INT;
	
Sum returns INT:
	INT Plus INT;

Subtraction returns INT:
	INT Minus INT;

Multiplication returns INT:
	INT Asterics INT;

Division returns INT:
	INT Bar INT;
	
terminal Bar:
	"/";
	
terminal Asterics:
	"*";
	
terminal Minus:
	"-";
	
terminal Plus:
	"+";
	
terminal EOL:
	NEWLINE | COMMENTS;
	
terminal COMMENTS:
	ML_COMMENT | SL_COMMENT;
	
terminal ML_COMMENT:
	"/*"->"*/";
	
terminal SL_COMMENT:
	'//' !('\n'|'\r')* ('\r'? '\n')?;

terminal NEWLINE:
	('\r'? '\n');
	
Condition: 
    (if=IfCondition(elseif=ElseIfCondition)*(else=ElseCondition)?);
    
IfCondition:
	IF cond=Expression "{"then=Greeting*"}";
    
ElseIfCondition:
	(=>ELSE IfCondition);
	
ElseCondition:
	(=>ELSE "{"then=Greeting*"}"); 
  
Expression:
    OrExpression
;   

OrExpression returns Expression:
    AndExpression ({OrExpression.left=current} "||" right=AndExpression)*  
;   

AndExpression returns Expression:
    ComparisonExpression ({AndExpression.left=current} "&&" right=ComparisonExpression)*  
;

ComparisonExpression returns Expression:
    PrimaryExpression ({ComparisonExpression.left=current} operator=("<"|"<="|"=="|">="|">") right=PrimaryExpression)*
;

PrimaryExpression returns Expression:
    "(" Expression ")"
    | Literal
;

Literal returns Expression:
    {Literal} value="true" | "false" | Operations
;
DecFunc:
	FUNC name=ID"("(parameter=ID)?(","parameter=ID)*")""{"args+=Greeting*"}";

Terminals:
	(BREAK|CASE|CHAN|CONST|CONTINUE|ELSE|IF|FOR|FUNC|IMPORT|RETURN|PACKAGE|RANGE);
	
BREAK:
	"break";

CASE:
	"case";

CHAN:
	"chan";

CONST:
	"const";

CONTINUE:
	"continue";

ELSE:
	"else";

FOR:
	"for";
	
FUNC:
	"func";

IF:
	"if";
	
IMPORT:
	"import";	

RETURN:
	"return";
	
PACKAGE:
	"package";
	
TYPE:
	"type";
	
VAR:
	"var";
	
SWITCH:
	"switch";

STRUCT:
	"struct";

RANGE:
	"range";
	
Entity:
	'print' '(' (STRING | INT+) ')';

DataType:
	'datatype' name=ID;