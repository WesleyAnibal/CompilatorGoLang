/*
 * generated by Xtext 2.13.0
 */
grammar InternalGo;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package org.xtext.go.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.xtext.go.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.xtext.go.services.GoGrammarAccess;

}

@parser::members {

 	private GoGrammarAccess grammarAccess;

    public InternalGoParser(TokenStream input, GoGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "Go";
   	}

   	@Override
   	protected GoGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleGo
entryRuleGo returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getGoRule()); }
	iv_ruleGo=ruleGo
	{ $current=$iv_ruleGo.current; }
	EOF;

// Rule Go
ruleGo returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getGoAccess().getElementsGreetingParserRuleCall_0());
			}
			lv_elements_0_0=ruleGreeting
			{
				if ($current==null) {
					$current = createModelElementForParent(grammarAccess.getGoRule());
				}
				add(
					$current,
					"elements",
					lv_elements_0_0,
					"org.xtext.go.Go.Greeting");
				afterParserOrEnumRuleCall();
			}
		)
	)*
;

// Entry rule entryRuleGreeting
entryRuleGreeting returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getGreetingRule()); }
	iv_ruleGreeting=ruleGreeting
	{ $current=$iv_ruleGreeting.current; }
	EOF;

// Rule Greeting
ruleGreeting returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getGreetingAccess().getDataTypeParserRuleCall_0());
		}
		this_DataType_0=ruleDataType
		{
			$current = $this_DataType_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getGreetingAccess().getEntityParserRuleCall_1());
		}
		this_Entity_1=ruleEntity
		{
			$current = $this_Entity_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getGreetingAccess().getTerminalsParserRuleCall_2());
		}
		ruleTerminals
		{
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleTerminals
entryRuleTerminals returns [String current=null]:
	{ newCompositeNode(grammarAccess.getTerminalsRule()); }
	iv_ruleTerminals=ruleTerminals
	{ $current=$iv_ruleTerminals.current.getText(); }
	EOF;

// Rule Terminals
ruleTerminals returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getTerminalsAccess().getBREAKParserRuleCall_0());
		}
		this_BREAK_0=ruleBREAK
		{
			$current.merge(this_BREAK_0);
		}
		{
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getTerminalsAccess().getCASEParserRuleCall_1());
		}
		this_CASE_1=ruleCASE
		{
			$current.merge(this_CASE_1);
		}
		{
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getTerminalsAccess().getCHANParserRuleCall_2());
		}
		this_CHAN_2=ruleCHAN
		{
			$current.merge(this_CHAN_2);
		}
		{
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getTerminalsAccess().getCONSTParserRuleCall_3());
		}
		this_CONST_3=ruleCONST
		{
			$current.merge(this_CONST_3);
		}
		{
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getTerminalsAccess().getCONTINUEParserRuleCall_4());
		}
		this_CONTINUE_4=ruleCONTINUE
		{
			$current.merge(this_CONTINUE_4);
		}
		{
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getTerminalsAccess().getELSEParserRuleCall_5());
		}
		this_ELSE_5=ruleELSE
		{
			$current.merge(this_ELSE_5);
		}
		{
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getTerminalsAccess().getIFParserRuleCall_6());
		}
		this_IF_6=ruleIF
		{
			$current.merge(this_IF_6);
		}
		{
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getTerminalsAccess().getFORParserRuleCall_7());
		}
		this_FOR_7=ruleFOR
		{
			$current.merge(this_FOR_7);
		}
		{
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getTerminalsAccess().getFUNCParserRuleCall_8());
		}
		this_FUNC_8=ruleFUNC
		{
			$current.merge(this_FUNC_8);
		}
		{
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getTerminalsAccess().getIMPORTParserRuleCall_9());
		}
		this_IMPORT_9=ruleIMPORT
		{
			$current.merge(this_IMPORT_9);
		}
		{
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getTerminalsAccess().getRETURNParserRuleCall_10());
		}
		this_RETURN_10=ruleRETURN
		{
			$current.merge(this_RETURN_10);
		}
		{
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getTerminalsAccess().getPACKAGEParserRuleCall_11());
		}
		this_PACKAGE_11=rulePACKAGE
		{
			$current.merge(this_PACKAGE_11);
		}
		{
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getTerminalsAccess().getRANGEParserRuleCall_12());
		}
		this_RANGE_12=ruleRANGE
		{
			$current.merge(this_RANGE_12);
		}
		{
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleBREAK
entryRuleBREAK returns [String current=null]:
	{ newCompositeNode(grammarAccess.getBREAKRule()); }
	iv_ruleBREAK=ruleBREAK
	{ $current=$iv_ruleBREAK.current.getText(); }
	EOF;

// Rule BREAK
ruleBREAK returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	kw='break'
	{
		$current.merge(kw);
		newLeafNode(kw, grammarAccess.getBREAKAccess().getBreakKeyword());
	}
;

// Entry rule entryRuleCASE
entryRuleCASE returns [String current=null]:
	{ newCompositeNode(grammarAccess.getCASERule()); }
	iv_ruleCASE=ruleCASE
	{ $current=$iv_ruleCASE.current.getText(); }
	EOF;

// Rule CASE
ruleCASE returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	kw='case'
	{
		$current.merge(kw);
		newLeafNode(kw, grammarAccess.getCASEAccess().getCaseKeyword());
	}
;

// Entry rule entryRuleCHAN
entryRuleCHAN returns [String current=null]:
	{ newCompositeNode(grammarAccess.getCHANRule()); }
	iv_ruleCHAN=ruleCHAN
	{ $current=$iv_ruleCHAN.current.getText(); }
	EOF;

// Rule CHAN
ruleCHAN returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	kw='chan'
	{
		$current.merge(kw);
		newLeafNode(kw, grammarAccess.getCHANAccess().getChanKeyword());
	}
;

// Entry rule entryRuleCONST
entryRuleCONST returns [String current=null]:
	{ newCompositeNode(grammarAccess.getCONSTRule()); }
	iv_ruleCONST=ruleCONST
	{ $current=$iv_ruleCONST.current.getText(); }
	EOF;

// Rule CONST
ruleCONST returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	kw='const'
	{
		$current.merge(kw);
		newLeafNode(kw, grammarAccess.getCONSTAccess().getConstKeyword());
	}
;

// Entry rule entryRuleCONTINUE
entryRuleCONTINUE returns [String current=null]:
	{ newCompositeNode(grammarAccess.getCONTINUERule()); }
	iv_ruleCONTINUE=ruleCONTINUE
	{ $current=$iv_ruleCONTINUE.current.getText(); }
	EOF;

// Rule CONTINUE
ruleCONTINUE returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	kw='continue'
	{
		$current.merge(kw);
		newLeafNode(kw, grammarAccess.getCONTINUEAccess().getContinueKeyword());
	}
;

// Entry rule entryRuleELSE
entryRuleELSE returns [String current=null]:
	{ newCompositeNode(grammarAccess.getELSERule()); }
	iv_ruleELSE=ruleELSE
	{ $current=$iv_ruleELSE.current.getText(); }
	EOF;

// Rule ELSE
ruleELSE returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	kw='else'
	{
		$current.merge(kw);
		newLeafNode(kw, grammarAccess.getELSEAccess().getElseKeyword());
	}
;

// Entry rule entryRuleFOR
entryRuleFOR returns [String current=null]:
	{ newCompositeNode(grammarAccess.getFORRule()); }
	iv_ruleFOR=ruleFOR
	{ $current=$iv_ruleFOR.current.getText(); }
	EOF;

// Rule FOR
ruleFOR returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	kw='for'
	{
		$current.merge(kw);
		newLeafNode(kw, grammarAccess.getFORAccess().getForKeyword());
	}
;

// Entry rule entryRuleFUNC
entryRuleFUNC returns [String current=null]:
	{ newCompositeNode(grammarAccess.getFUNCRule()); }
	iv_ruleFUNC=ruleFUNC
	{ $current=$iv_ruleFUNC.current.getText(); }
	EOF;

// Rule FUNC
ruleFUNC returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	kw='func'
	{
		$current.merge(kw);
		newLeafNode(kw, grammarAccess.getFUNCAccess().getFuncKeyword());
	}
;

// Entry rule entryRuleIF
entryRuleIF returns [String current=null]:
	{ newCompositeNode(grammarAccess.getIFRule()); }
	iv_ruleIF=ruleIF
	{ $current=$iv_ruleIF.current.getText(); }
	EOF;

// Rule IF
ruleIF returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	kw='if'
	{
		$current.merge(kw);
		newLeafNode(kw, grammarAccess.getIFAccess().getIfKeyword());
	}
;

// Entry rule entryRuleIMPORT
entryRuleIMPORT returns [String current=null]:
	{ newCompositeNode(grammarAccess.getIMPORTRule()); }
	iv_ruleIMPORT=ruleIMPORT
	{ $current=$iv_ruleIMPORT.current.getText(); }
	EOF;

// Rule IMPORT
ruleIMPORT returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	kw='import'
	{
		$current.merge(kw);
		newLeafNode(kw, grammarAccess.getIMPORTAccess().getImportKeyword());
	}
;

// Entry rule entryRuleRETURN
entryRuleRETURN returns [String current=null]:
	{ newCompositeNode(grammarAccess.getRETURNRule()); }
	iv_ruleRETURN=ruleRETURN
	{ $current=$iv_ruleRETURN.current.getText(); }
	EOF;

// Rule RETURN
ruleRETURN returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	kw='return'
	{
		$current.merge(kw);
		newLeafNode(kw, grammarAccess.getRETURNAccess().getReturnKeyword());
	}
;

// Entry rule entryRulePACKAGE
entryRulePACKAGE returns [String current=null]:
	{ newCompositeNode(grammarAccess.getPACKAGERule()); }
	iv_rulePACKAGE=rulePACKAGE
	{ $current=$iv_rulePACKAGE.current.getText(); }
	EOF;

// Rule PACKAGE
rulePACKAGE returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	kw='package'
	{
		$current.merge(kw);
		newLeafNode(kw, grammarAccess.getPACKAGEAccess().getPackageKeyword());
	}
;

// Entry rule entryRuleRANGE
entryRuleRANGE returns [String current=null]:
	{ newCompositeNode(grammarAccess.getRANGERule()); }
	iv_ruleRANGE=ruleRANGE
	{ $current=$iv_ruleRANGE.current.getText(); }
	EOF;

// Rule RANGE
ruleRANGE returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	kw='range'
	{
		$current.merge(kw);
		newLeafNode(kw, grammarAccess.getRANGEAccess().getRangeKeyword());
	}
;

// Entry rule entryRuleEntity
entryRuleEntity returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getEntityRule()); }
	iv_ruleEntity=ruleEntity
	{ $current=$iv_ruleEntity.current; }
	EOF;

// Rule Entity
ruleEntity returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='print'
		{
			newLeafNode(otherlv_0, grammarAccess.getEntityAccess().getPrintKeyword_0());
		}
		otherlv_1='('
		{
			newLeafNode(otherlv_1, grammarAccess.getEntityAccess().getLeftParenthesisKeyword_1());
		}
		(
			(
				lv_name_2_0=RULE_ID
				{
					newLeafNode(lv_name_2_0, grammarAccess.getEntityAccess().getNameIDTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getEntityRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_2_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_3=')'
		{
			newLeafNode(otherlv_3, grammarAccess.getEntityAccess().getRightParenthesisKeyword_3());
		}
	)
;

// Entry rule entryRuleDataType
entryRuleDataType returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getDataTypeRule()); }
	iv_ruleDataType=ruleDataType
	{ $current=$iv_ruleDataType.current; }
	EOF;

// Rule DataType
ruleDataType returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='datatype'
		{
			newLeafNode(otherlv_0, grammarAccess.getDataTypeAccess().getDatatypeKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getDataTypeAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getDataTypeRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
	)
;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
