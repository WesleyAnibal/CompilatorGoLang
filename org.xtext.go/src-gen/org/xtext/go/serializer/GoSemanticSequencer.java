/*
 * generated by Xtext 2.13.0
 */
package org.xtext.go.serializer;

import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;
import org.xtext.go.go.Addition;
import org.xtext.go.go.AndExpression;
import org.xtext.go.go.Atrib;
import org.xtext.go.go.AtribVar;
import org.xtext.go.go.Bool;
import org.xtext.go.go.CallFor;
import org.xtext.go.go.CallFunc;
import org.xtext.go.go.Cases;
import org.xtext.go.go.ComparisonExpression;
import org.xtext.go.go.Condition;
import org.xtext.go.go.DataType;
import org.xtext.go.go.DecFunc;
import org.xtext.go.go.DecVar;
import org.xtext.go.go.DecVars;
import org.xtext.go.go.Decl;
import org.xtext.go.go.Division;
import org.xtext.go.go.ElseCondition;
import org.xtext.go.go.Expression;
import org.xtext.go.go.F;
import org.xtext.go.go.Go;
import org.xtext.go.go.GoPackage;
import org.xtext.go.go.IfCondition;
import org.xtext.go.go.Intg;
import org.xtext.go.go.Literal;
import org.xtext.go.go.MultDecVars;
import org.xtext.go.go.Multiplication;
import org.xtext.go.go.Numbers;
import org.xtext.go.go.OrExpression;
import org.xtext.go.go.Params;
import org.xtext.go.go.ReAtrib;
import org.xtext.go.go.Str;
import org.xtext.go.go.Subtration;
import org.xtext.go.go.Variable;
import org.xtext.go.go.Y;
import org.xtext.go.services.GoGrammarAccess;

@SuppressWarnings("all")
public class GoSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private GoGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == GoPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case GoPackage.ADDITION:
				sequence_Addition(context, (Addition) semanticObject); 
				return; 
			case GoPackage.AND_EXPRESSION:
				sequence_AndExpression(context, (AndExpression) semanticObject); 
				return; 
			case GoPackage.ATRIB:
				if (rule == grammarAccess.getAtribRule()) {
					sequence_Atrib(context, (Atrib) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getGreetingRule()
						|| rule == grammarAccess.getCallForRule()) {
					sequence_Atrib_CallFor_varFor(context, (Atrib) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getVarForRule()) {
					sequence_Atrib_varFor(context, (Atrib) semanticObject); 
					return; 
				}
				else break;
			case GoPackage.ATRIB_VAR:
				sequence_AtribVar(context, (AtribVar) semanticObject); 
				return; 
			case GoPackage.BOOL:
				sequence_Bool(context, (Bool) semanticObject); 
				return; 
			case GoPackage.CALL_FOR:
				sequence_CallFor(context, (CallFor) semanticObject); 
				return; 
			case GoPackage.CALL_FUNC:
				sequence_CallFunc(context, (CallFunc) semanticObject); 
				return; 
			case GoPackage.CASES:
				sequence_Cases(context, (Cases) semanticObject); 
				return; 
			case GoPackage.COMPARISON_EXPRESSION:
				if (rule == grammarAccess.getGreetingRule()
						|| rule == grammarAccess.getCallForRule()) {
					sequence_CallFor_ComparisonExpression(context, (ComparisonExpression) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getOrExpressionRule()
						|| action == grammarAccess.getOrExpressionAccess().getOrExpressionLeftAction_1_0()
						|| rule == grammarAccess.getAndExpressionRule()
						|| action == grammarAccess.getAndExpressionAccess().getAndExpressionLeftAction_1_0()
						|| rule == grammarAccess.getComparisonExpressionRule()
						|| action == grammarAccess.getComparisonExpressionAccess().getComparisonExpressionLeftAction_1_0()
						|| rule == grammarAccess.getVarForRule()) {
					sequence_ComparisonExpression(context, (ComparisonExpression) semanticObject); 
					return; 
				}
				else break;
			case GoPackage.CONDITION:
				sequence_Condition(context, (Condition) semanticObject); 
				return; 
			case GoPackage.DATA_TYPE:
				sequence_DataType(context, (DataType) semanticObject); 
				return; 
			case GoPackage.DEC_FUNC:
				sequence_DecFunc(context, (DecFunc) semanticObject); 
				return; 
			case GoPackage.DEC_VAR:
				sequence_DecVar(context, (DecVar) semanticObject); 
				return; 
			case GoPackage.DEC_VARS:
				sequence_DecVars(context, (DecVars) semanticObject); 
				return; 
			case GoPackage.DECL:
				sequence_Decl(context, (Decl) semanticObject); 
				return; 
			case GoPackage.DIVISION:
				sequence_Division(context, (Division) semanticObject); 
				return; 
			case GoPackage.DOUBLE:
				sequence_Double(context, (org.xtext.go.go.Double) semanticObject); 
				return; 
			case GoPackage.ELSE_CONDITION:
				sequence_ElseCondition(context, (ElseCondition) semanticObject); 
				return; 
			case GoPackage.EXPRESSION:
				if (rule == grammarAccess.getGreetingRule()
						|| rule == grammarAccess.getCallForRule()) {
					sequence_CallFor_Expression(context, (Expression) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getExpressionRule()
						|| rule == grammarAccess.getAdditionRule()
						|| action == grammarAccess.getAdditionAccess().getAdditionLeftAction_1_0()
						|| rule == grammarAccess.getSubtrationRule()
						|| action == grammarAccess.getSubtrationAccess().getSubtrationLeftAction_1_0()
						|| rule == grammarAccess.getMultiplicationRule()
						|| action == grammarAccess.getMultiplicationAccess().getMultiplicationLeftAction_1_0()
						|| rule == grammarAccess.getDivisionRule()
						|| action == grammarAccess.getDivisionAccess().getDivisionLeftAction_1_0()
						|| rule == grammarAccess.getSubMultRule()
						|| rule == grammarAccess.getOrExpressionRule()
						|| action == grammarAccess.getOrExpressionAccess().getOrExpressionLeftAction_1_0()
						|| rule == grammarAccess.getAndExpressionRule()
						|| action == grammarAccess.getAndExpressionAccess().getAndExpressionLeftAction_1_0()
						|| rule == grammarAccess.getComparisonExpressionRule()
						|| action == grammarAccess.getComparisonExpressionAccess().getComparisonExpressionLeftAction_1_0()
						|| rule == grammarAccess.getPrimaryExpressionRule()
						|| rule == grammarAccess.getVarForRule()) {
					sequence_Expression(context, (Expression) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getOpersRule()) {
					sequence_Opers(context, (Expression) semanticObject); 
					return; 
				}
				else break;
			case GoPackage.F:
				if (rule == grammarAccess.getFRule()) {
					sequence_F(context, (F) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getIRule()) {
					sequence_F_I_T(context, (F) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getAtrib_AuxRule()
						|| rule == grammarAccess.getOperationsRule()) {
					sequence_F_Operations_T(context, (F) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getTRule()) {
					sequence_F_T(context, (F) semanticObject); 
					return; 
				}
				else break;
			case GoPackage.GO:
				sequence_Go(context, (Go) semanticObject); 
				return; 
			case GoPackage.IF_CONDITION:
				sequence_IfCondition(context, (IfCondition) semanticObject); 
				return; 
			case GoPackage.INTG:
				sequence_Intg(context, (Intg) semanticObject); 
				return; 
			case GoPackage.LITERAL:
				if (rule == grammarAccess.getGreetingRule()
						|| rule == grammarAccess.getCallForRule()) {
					sequence_CallFor_Literal(context, (Literal) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getAdditionRule()
						|| action == grammarAccess.getAdditionAccess().getAdditionLeftAction_1_0()
						|| rule == grammarAccess.getSubtrationRule()
						|| action == grammarAccess.getSubtrationAccess().getSubtrationLeftAction_1_0()
						|| rule == grammarAccess.getMultiplicationRule()
						|| action == grammarAccess.getMultiplicationAccess().getMultiplicationLeftAction_1_0()
						|| rule == grammarAccess.getDivisionRule()
						|| action == grammarAccess.getDivisionAccess().getDivisionLeftAction_1_0()
						|| rule == grammarAccess.getSubMultRule()
						|| rule == grammarAccess.getOrExpressionRule()
						|| action == grammarAccess.getOrExpressionAccess().getOrExpressionLeftAction_1_0()
						|| rule == grammarAccess.getAndExpressionRule()
						|| action == grammarAccess.getAndExpressionAccess().getAndExpressionLeftAction_1_0()
						|| rule == grammarAccess.getComparisonExpressionRule()
						|| action == grammarAccess.getComparisonExpressionAccess().getComparisonExpressionLeftAction_1_0()
						|| rule == grammarAccess.getPrimaryExpressionRule()
						|| rule == grammarAccess.getVarForRule()
						|| rule == grammarAccess.getLiteralRule()) {
					sequence_Literal(context, (Literal) semanticObject); 
					return; 
				}
				else break;
			case GoPackage.MULT_DEC_VARS:
				sequence_MultDecVars(context, (MultDecVars) semanticObject); 
				return; 
			case GoPackage.MULTIPLICATION:
				sequence_Multiplication(context, (Multiplication) semanticObject); 
				return; 
			case GoPackage.NUMBERS:
				if (rule == grammarAccess.getGreetingRule()
						|| rule == grammarAccess.getCallForRule()) {
					sequence_CallFor_Numbers(context, (Numbers) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getIRule()) {
					sequence_I_Numbers_T(context, (Numbers) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getAtriRule()
						|| rule == grammarAccess.getTypeValueRule()
						|| rule == grammarAccess.getNumbersRule()
						|| rule == grammarAccess.getFRule()
						|| rule == grammarAccess.getAdditionRule()
						|| action == grammarAccess.getAdditionAccess().getAdditionLeftAction_1_0()
						|| rule == grammarAccess.getSubtrationRule()
						|| action == grammarAccess.getSubtrationAccess().getSubtrationLeftAction_1_0()
						|| rule == grammarAccess.getMultiplicationRule()
						|| action == grammarAccess.getMultiplicationAccess().getMultiplicationLeftAction_1_0()
						|| rule == grammarAccess.getDivisionRule()
						|| action == grammarAccess.getDivisionAccess().getDivisionLeftAction_1_0()
						|| rule == grammarAccess.getSubMultRule()
						|| rule == grammarAccess.getOrExpressionRule()
						|| action == grammarAccess.getOrExpressionAccess().getOrExpressionLeftAction_1_0()
						|| rule == grammarAccess.getAndExpressionRule()
						|| action == grammarAccess.getAndExpressionAccess().getAndExpressionLeftAction_1_0()
						|| rule == grammarAccess.getComparisonExpressionRule()
						|| action == grammarAccess.getComparisonExpressionAccess().getComparisonExpressionLeftAction_1_0()
						|| rule == grammarAccess.getPrimaryExpressionRule()
						|| rule == grammarAccess.getVarForRule()
						|| rule == grammarAccess.getLiteralRule()) {
					sequence_Numbers(context, (Numbers) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getAtrib_AuxRule()) {
					sequence_Numbers_Operations_T(context, (Numbers) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getOperationsRule()) {
					sequence_Numbers_Operations_T(context, (Numbers) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getTRule()) {
					sequence_Numbers_T(context, (Numbers) semanticObject); 
					return; 
				}
				else break;
			case GoPackage.OR_EXPRESSION:
				sequence_OrExpression(context, (OrExpression) semanticObject); 
				return; 
			case GoPackage.PARAMS:
				sequence_Params(context, (Params) semanticObject); 
				return; 
			case GoPackage.RE_ATRIB:
				if (rule == grammarAccess.getGreetingRule()
						|| rule == grammarAccess.getCallForRule()) {
					sequence_CallFor_ReAtrib_varFor(context, (ReAtrib) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getReAtribRule()) {
					sequence_ReAtrib(context, (ReAtrib) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getVarForRule()) {
					sequence_ReAtrib_varFor(context, (ReAtrib) semanticObject); 
					return; 
				}
				else break;
			case GoPackage.STR:
				sequence_Str(context, (Str) semanticObject); 
				return; 
			case GoPackage.SUBTRATION:
				sequence_Subtration(context, (Subtration) semanticObject); 
				return; 
			case GoPackage.VARIABLE:
				if (rule == grammarAccess.getGreetingRule()) {
					sequence_CallFor_SwitchCase_Variable(context, (Variable) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getCallForRule()) {
					sequence_CallFor_Variable(context, (Variable) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getOperationsOneEqualsRule()) {
					sequence_OperationsOneEquals_Variable(context, (Variable) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getSwitchCaseRule()) {
					sequence_SwitchCase_Variable(context, (Variable) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getAtrib_AuxRule()
						|| rule == grammarAccess.getVariableRule()
						|| rule == grammarAccess.getAdditionRule()
						|| action == grammarAccess.getAdditionAccess().getAdditionLeftAction_1_0()
						|| rule == grammarAccess.getSubtrationRule()
						|| action == grammarAccess.getSubtrationAccess().getSubtrationLeftAction_1_0()
						|| rule == grammarAccess.getMultiplicationRule()
						|| action == grammarAccess.getMultiplicationAccess().getMultiplicationLeftAction_1_0()
						|| rule == grammarAccess.getDivisionRule()
						|| action == grammarAccess.getDivisionAccess().getDivisionLeftAction_1_0()
						|| rule == grammarAccess.getSubMultRule()
						|| rule == grammarAccess.getOrExpressionRule()
						|| action == grammarAccess.getOrExpressionAccess().getOrExpressionLeftAction_1_0()
						|| rule == grammarAccess.getAndExpressionRule()
						|| action == grammarAccess.getAndExpressionAccess().getAndExpressionLeftAction_1_0()
						|| rule == grammarAccess.getComparisonExpressionRule()
						|| action == grammarAccess.getComparisonExpressionAccess().getComparisonExpressionLeftAction_1_0()
						|| rule == grammarAccess.getPrimaryExpressionRule()
						|| rule == grammarAccess.getOperationsOneRule()
						|| rule == grammarAccess.getVarForRule()
						|| rule == grammarAccess.getLiteralRule()) {
					sequence_Variable(context, (Variable) semanticObject); 
					return; 
				}
				else break;
			case GoPackage.Y:
				sequence_Y(context, (Y) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     Addition returns Addition
	 *     Addition.Addition_1_0 returns Addition
	 *
	 * Constraint:
	 *     (left=Addition_Addition_1_0 right=SubMult)
	 */
	protected void sequence_Addition(ISerializationContext context, Addition semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GoPackage.Literals.ADDITION__LEFT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GoPackage.Literals.ADDITION__LEFT));
			if (transientValues.isValueTransient(semanticObject, GoPackage.Literals.ADDITION__RIGHT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GoPackage.Literals.ADDITION__RIGHT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getAdditionAccess().getAdditionLeftAction_1_0(), semanticObject.getLeft());
		feeder.accept(grammarAccess.getAdditionAccess().getRightSubMultParserRuleCall_1_2_0(), semanticObject.getRight());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     OrExpression returns AndExpression
	 *     OrExpression.OrExpression_1_0 returns AndExpression
	 *     AndExpression returns AndExpression
	 *     AndExpression.AndExpression_1_0 returns AndExpression
	 *
	 * Constraint:
	 *     (left=AndExpression_AndExpression_1_0 right=ComparisonExpression)
	 */
	protected void sequence_AndExpression(ISerializationContext context, AndExpression semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GoPackage.Literals.AND_EXPRESSION__LEFT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GoPackage.Literals.AND_EXPRESSION__LEFT));
			if (transientValues.isValueTransient(semanticObject, GoPackage.Literals.AND_EXPRESSION__RIGHT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GoPackage.Literals.AND_EXPRESSION__RIGHT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getAndExpressionAccess().getAndExpressionLeftAction_1_0(), semanticObject.getLeft());
		feeder.accept(grammarAccess.getAndExpressionAccess().getRightComparisonExpressionParserRuleCall_1_2_0(), semanticObject.getRight());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     AtribVar returns AtribVar
	 *
	 * Constraint:
	 *     (vars+=ID vars+=ID* type=Types (atrb+=Atrib_Aux atrb+=Atrib_Aux*)?)
	 */
	protected void sequence_AtribVar(ISerializationContext context, AtribVar semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Atrib returns Atrib
	 *
	 * Constraint:
	 *     (modifier=Modif name=ID type=Types atrib=Atrib_Aux)
	 */
	protected void sequence_Atrib(ISerializationContext context, Atrib semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GoPackage.Literals.ATRIB__MODIFIER) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GoPackage.Literals.ATRIB__MODIFIER));
			if (transientValues.isValueTransient(semanticObject, GoPackage.Literals.ATRIB__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GoPackage.Literals.ATRIB__NAME));
			if (transientValues.isValueTransient(semanticObject, GoPackage.Literals.ATRIB__TYPE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GoPackage.Literals.ATRIB__TYPE));
			if (transientValues.isValueTransient(semanticObject, GoPackage.Literals.ATRIB__ATRIB) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GoPackage.Literals.ATRIB__ATRIB));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getAtribAccess().getModifierModifParserRuleCall_0_0(), semanticObject.getModifier());
		feeder.accept(grammarAccess.getAtribAccess().getNameIDTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getAtribAccess().getTypeTypesParserRuleCall_2_0(), semanticObject.getType());
		feeder.accept(grammarAccess.getAtribAccess().getAtribAtrib_AuxParserRuleCall_4_0(), semanticObject.getAtrib());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Greeting returns Atrib
	 *     CallFor returns Atrib
	 *
	 * Constraint:
	 *     (
	 *         modifier=Modif 
	 *         name=ID 
	 *         type=Types 
	 *         atrib=Atrib_Aux 
	 *         x=OrExpression 
	 *         (k=operationsOne | k=OperationsOneEquals | k=Operations) 
	 *         x=Greeting*
	 *     )
	 */
	protected void sequence_Atrib_CallFor_varFor(ISerializationContext context, Atrib semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     varFor returns Atrib
	 *
	 * Constraint:
	 *     (
	 *         modifier=Modif 
	 *         name=ID 
	 *         type=Types 
	 *         atrib=Atrib_Aux 
	 *         x=OrExpression 
	 *         (k=operationsOne | k=OperationsOneEquals | k=Operations)
	 *     )
	 */
	protected void sequence_Atrib_varFor(ISerializationContext context, Atrib semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Atrib_Aux returns Bool
	 *     Atri returns Bool
	 *     TypeValue returns Bool
	 *     Bool returns Bool
	 *
	 * Constraint:
	 *     (val='true' | val='false')
	 */
	protected void sequence_Bool(ISerializationContext context, Bool semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Greeting returns CallFor
	 *     CallFor returns CallFor
	 *
	 * Constraint:
	 *     x=Greeting+
	 */
	protected void sequence_CallFor(ISerializationContext context, CallFor semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Greeting returns ComparisonExpression
	 *     CallFor returns ComparisonExpression
	 *
	 * Constraint:
	 *     (left=ComparisonExpression_ComparisonExpression_1_0 right=PrimaryExpression x=Greeting*)
	 */
	protected void sequence_CallFor_ComparisonExpression(ISerializationContext context, ComparisonExpression semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Greeting returns Expression
	 *     CallFor returns Expression
	 *
	 * Constraint:
	 *     ((x=Operations | boolean=OrExpression) x=Greeting*)
	 */
	protected void sequence_CallFor_Expression(ISerializationContext context, Expression semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Greeting returns Literal
	 *     CallFor returns Literal
	 *
	 * Constraint:
	 *     (value=Bool x=Greeting*)
	 */
	protected void sequence_CallFor_Literal(ISerializationContext context, Literal semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Greeting returns Numbers
	 *     CallFor returns Numbers
	 *
	 * Constraint:
	 *     ((int=Intg | d=Double) x=Greeting*)
	 */
	protected void sequence_CallFor_Numbers(ISerializationContext context, Numbers semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Greeting returns ReAtrib
	 *     CallFor returns ReAtrib
	 *
	 * Constraint:
	 *     (name=ID atrib=Atrib_Aux x=OrExpression (k=operationsOne | k=OperationsOneEquals | k=Operations) x=Greeting*)
	 */
	protected void sequence_CallFor_ReAtrib_varFor(ISerializationContext context, ReAtrib semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Greeting returns Variable
	 *
	 * Constraint:
	 *     (name=ID ((cas=Cases* k=Greeting*) | x=Greeting+)?)
	 */
	protected void sequence_CallFor_SwitchCase_Variable(ISerializationContext context, Variable semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     CallFor returns Variable
	 *
	 * Constraint:
	 *     (name=ID x=Greeting*)
	 */
	protected void sequence_CallFor_Variable(ISerializationContext context, Variable semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Greeting returns CallFunc
	 *     Atrib_Aux returns CallFunc
	 *     CallFunc returns CallFunc
	 *
	 * Constraint:
	 *     (nameFunc=ID param=Params*)
	 */
	protected void sequence_CallFunc(ISerializationContext context, CallFunc semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Cases returns Cases
	 *
	 * Constraint:
	 *     (x=Expression v=Greeting*)
	 */
	protected void sequence_Cases(ISerializationContext context, Cases semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     OrExpression returns ComparisonExpression
	 *     OrExpression.OrExpression_1_0 returns ComparisonExpression
	 *     AndExpression returns ComparisonExpression
	 *     AndExpression.AndExpression_1_0 returns ComparisonExpression
	 *     ComparisonExpression returns ComparisonExpression
	 *     ComparisonExpression.ComparisonExpression_1_0 returns ComparisonExpression
	 *     varFor returns ComparisonExpression
	 *
	 * Constraint:
	 *     (left=ComparisonExpression_ComparisonExpression_1_0 right=PrimaryExpression)
	 */
	protected void sequence_ComparisonExpression(ISerializationContext context, ComparisonExpression semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GoPackage.Literals.COMPARISON_EXPRESSION__LEFT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GoPackage.Literals.COMPARISON_EXPRESSION__LEFT));
			if (transientValues.isValueTransient(semanticObject, GoPackage.Literals.COMPARISON_EXPRESSION__RIGHT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GoPackage.Literals.COMPARISON_EXPRESSION__RIGHT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getComparisonExpressionAccess().getComparisonExpressionLeftAction_1_0(), semanticObject.getLeft());
		feeder.accept(grammarAccess.getComparisonExpressionAccess().getRightPrimaryExpressionParserRuleCall_1_2_0(), semanticObject.getRight());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Greeting returns Condition
	 *     Condition returns Condition
	 *
	 * Constraint:
	 *     (if=IfCondition elseif=ElseIfCondition* else=ElseCondition?)
	 */
	protected void sequence_Condition(ISerializationContext context, Condition semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Greeting returns DataType
	 *     DataType returns DataType
	 *
	 * Constraint:
	 *     name=ID
	 */
	protected void sequence_DataType(ISerializationContext context, DataType semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GoPackage.Literals.DATA_TYPE__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GoPackage.Literals.DATA_TYPE__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getDataTypeAccess().getNameIDTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Greeting returns DecFunc
	 *     DecFunc returns DecFunc
	 *
	 * Constraint:
	 *     (name=ID param=Params* returnType=Types? args+=Greeting*)
	 */
	protected void sequence_DecFunc(ISerializationContext context, DecFunc semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Greeting returns DecVar
	 *     DecVar returns DecVar
	 *
	 * Constraint:
	 *     (declaration=Decl | assignment=AtribVar | atribuicao=Atrib | reassignment=ReAtrib)
	 */
	protected void sequence_DecVar(ISerializationContext context, DecVar semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     DecVars returns DecVars
	 *
	 * Constraint:
	 *     (vars+=ID vars+=ID* atrb+=Atrib_Aux atrb+=Atrib_Aux*)
	 */
	protected void sequence_DecVars(ISerializationContext context, DecVars semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Decl returns Decl
	 *
	 * Constraint:
	 *     (name=ID type=Types)
	 */
	protected void sequence_Decl(ISerializationContext context, Decl semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GoPackage.Literals.DECL__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GoPackage.Literals.DECL__NAME));
			if (transientValues.isValueTransient(semanticObject, GoPackage.Literals.DECL__TYPE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GoPackage.Literals.DECL__TYPE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getDeclAccess().getNameIDTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getDeclAccess().getTypeTypesParserRuleCall_2_0(), semanticObject.getType());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Addition returns Division
	 *     Addition.Addition_1_0 returns Division
	 *     Subtration returns Division
	 *     Subtration.Subtration_1_0 returns Division
	 *     Division returns Division
	 *     Division.Division_1_0 returns Division
	 *     SubMult returns Division
	 *
	 * Constraint:
	 *     (left=Division_Division_1_0 right=PrimaryExpression)
	 */
	protected void sequence_Division(ISerializationContext context, Division semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GoPackage.Literals.DIVISION__LEFT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GoPackage.Literals.DIVISION__LEFT));
			if (transientValues.isValueTransient(semanticObject, GoPackage.Literals.DIVISION__RIGHT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GoPackage.Literals.DIVISION__RIGHT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getDivisionAccess().getDivisionLeftAction_1_0(), semanticObject.getLeft());
		feeder.accept(grammarAccess.getDivisionAccess().getRightPrimaryExpressionParserRuleCall_1_2_0(), semanticObject.getRight());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Double returns Double
	 *
	 * Constraint:
	 *     d=INT
	 */
	protected void sequence_Double(ISerializationContext context, org.xtext.go.go.Double semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GoPackage.Literals.DOUBLE__D) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GoPackage.Literals.DOUBLE__D));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getDoubleAccess().getDINTTerminalRuleCall_0_0(), semanticObject.getD());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     ElseCondition returns ElseCondition
	 *
	 * Constraint:
	 *     then=Greeting+
	 */
	protected void sequence_ElseCondition(ISerializationContext context, ElseCondition semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Expression returns Expression
	 *     Addition returns Expression
	 *     Addition.Addition_1_0 returns Expression
	 *     Subtration returns Expression
	 *     Subtration.Subtration_1_0 returns Expression
	 *     Multiplication returns Expression
	 *     Multiplication.Multiplication_1_0 returns Expression
	 *     Division returns Expression
	 *     Division.Division_1_0 returns Expression
	 *     SubMult returns Expression
	 *     OrExpression returns Expression
	 *     OrExpression.OrExpression_1_0 returns Expression
	 *     AndExpression returns Expression
	 *     AndExpression.AndExpression_1_0 returns Expression
	 *     ComparisonExpression returns Expression
	 *     ComparisonExpression.ComparisonExpression_1_0 returns Expression
	 *     PrimaryExpression returns Expression
	 *     varFor returns Expression
	 *
	 * Constraint:
	 *     (x=Operations | boolean=OrExpression)
	 */
	protected void sequence_Expression(ISerializationContext context, Expression semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     F returns F
	 *
	 * Constraint:
	 *     o=Operations
	 */
	protected void sequence_F(ISerializationContext context, F semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GoPackage.Literals.T__O) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GoPackage.Literals.T__O));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getFAccess().getOOperationsParserRuleCall_0_1_0(), semanticObject.getO());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     I returns F
	 *
	 * Constraint:
	 *     (o=Operations o=Y (o=I | o=I))
	 */
	protected void sequence_F_I_T(ISerializationContext context, F semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Atrib_Aux returns F
	 *     Operations returns F
	 *
	 * Constraint:
	 *     (o=Operations o=Y o=I)
	 */
	protected void sequence_F_Operations_T(ISerializationContext context, F semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     T returns F
	 *
	 * Constraint:
	 *     (o=Operations o=Y)
	 */
	protected void sequence_F_T(ISerializationContext context, F semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Go returns Go
	 *
	 * Constraint:
	 *     elements+=Greeting+
	 */
	protected void sequence_Go(ISerializationContext context, Go semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     I returns Numbers
	 *
	 * Constraint:
	 *     ((int=Intg | d=Double) o=Y (o=I | o=I))
	 */
	protected void sequence_I_Numbers_T(ISerializationContext context, Numbers semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     IfCondition returns IfCondition
	 *     ElseIfCondition returns IfCondition
	 *
	 * Constraint:
	 *     (cond=OrExpression then=Greeting*)
	 */
	protected void sequence_IfCondition(ISerializationContext context, IfCondition semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Intg returns Intg
	 *
	 * Constraint:
	 *     i=INT
	 */
	protected void sequence_Intg(ISerializationContext context, Intg semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GoPackage.Literals.INTG__I) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GoPackage.Literals.INTG__I));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getIntgAccess().getIINTTerminalRuleCall_0(), semanticObject.getI());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Addition returns Literal
	 *     Addition.Addition_1_0 returns Literal
	 *     Subtration returns Literal
	 *     Subtration.Subtration_1_0 returns Literal
	 *     Multiplication returns Literal
	 *     Multiplication.Multiplication_1_0 returns Literal
	 *     Division returns Literal
	 *     Division.Division_1_0 returns Literal
	 *     SubMult returns Literal
	 *     OrExpression returns Literal
	 *     OrExpression.OrExpression_1_0 returns Literal
	 *     AndExpression returns Literal
	 *     AndExpression.AndExpression_1_0 returns Literal
	 *     ComparisonExpression returns Literal
	 *     ComparisonExpression.ComparisonExpression_1_0 returns Literal
	 *     PrimaryExpression returns Literal
	 *     varFor returns Literal
	 *     Literal returns Literal
	 *
	 * Constraint:
	 *     value=Bool
	 */
	protected void sequence_Literal(ISerializationContext context, Literal semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GoPackage.Literals.LITERAL__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GoPackage.Literals.LITERAL__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getLiteralAccess().getValueBoolParserRuleCall_0_1_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Greeting returns MultDecVars
	 *     MultDecVars returns MultDecVars
	 *
	 * Constraint:
	 *     (name=ID (typw=TypeValue | value=ID))+
	 */
	protected void sequence_MultDecVars(ISerializationContext context, MultDecVars semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Addition returns Multiplication
	 *     Addition.Addition_1_0 returns Multiplication
	 *     Subtration returns Multiplication
	 *     Subtration.Subtration_1_0 returns Multiplication
	 *     Multiplication returns Multiplication
	 *     Multiplication.Multiplication_1_0 returns Multiplication
	 *     SubMult returns Multiplication
	 *
	 * Constraint:
	 *     (left=Multiplication_Multiplication_1_0 right=PrimaryExpression)
	 */
	protected void sequence_Multiplication(ISerializationContext context, Multiplication semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GoPackage.Literals.MULTIPLICATION__LEFT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GoPackage.Literals.MULTIPLICATION__LEFT));
			if (transientValues.isValueTransient(semanticObject, GoPackage.Literals.MULTIPLICATION__RIGHT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GoPackage.Literals.MULTIPLICATION__RIGHT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getMultiplicationAccess().getMultiplicationLeftAction_1_0(), semanticObject.getLeft());
		feeder.accept(grammarAccess.getMultiplicationAccess().getRightPrimaryExpressionParserRuleCall_1_2_0(), semanticObject.getRight());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Atri returns Numbers
	 *     TypeValue returns Numbers
	 *     Numbers returns Numbers
	 *     F returns Numbers
	 *     Addition returns Numbers
	 *     Addition.Addition_1_0 returns Numbers
	 *     Subtration returns Numbers
	 *     Subtration.Subtration_1_0 returns Numbers
	 *     Multiplication returns Numbers
	 *     Multiplication.Multiplication_1_0 returns Numbers
	 *     Division returns Numbers
	 *     Division.Division_1_0 returns Numbers
	 *     SubMult returns Numbers
	 *     OrExpression returns Numbers
	 *     OrExpression.OrExpression_1_0 returns Numbers
	 *     AndExpression returns Numbers
	 *     AndExpression.AndExpression_1_0 returns Numbers
	 *     ComparisonExpression returns Numbers
	 *     ComparisonExpression.ComparisonExpression_1_0 returns Numbers
	 *     PrimaryExpression returns Numbers
	 *     varFor returns Numbers
	 *     Literal returns Numbers
	 *
	 * Constraint:
	 *     (int=Intg | d=Double)
	 */
	protected void sequence_Numbers(ISerializationContext context, Numbers semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Atrib_Aux returns Numbers
	 *
	 * Constraint:
	 *     ((int=Intg | d=Double) (o=Y o=I)?)
	 */
	protected void sequence_Numbers_Operations_T(ISerializationContext context, Numbers semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	// This method is commented out because it has the same signature as another method in this class.
	// This is probably a bug in Xtext's serializer, please report it here: 
	// https://bugs.eclipse.org/bugs/enter_bug.cgi?product=TMF
	//
	// Contexts:
	//     Operations returns Numbers
	//
	// Constraint:
	//     ((int=Intg | d=Double) o=Y o=I)
	//
	// protected void sequence_Numbers_Operations_T(ISerializationContext context, Numbers semanticObject) { }
	
	/**
	 * Contexts:
	 *     T returns Numbers
	 *
	 * Constraint:
	 *     ((int=Intg | d=Double) o=Y)
	 */
	protected void sequence_Numbers_T(ISerializationContext context, Numbers semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     OperationsOneEquals returns Variable
	 *
	 * Constraint:
	 *     (name=ID n=Numbers?)
	 */
	protected void sequence_OperationsOneEquals_Variable(ISerializationContext context, Variable semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Opers returns Expression
	 *
	 * Constraint:
	 *     (sum=Addition | sub=Subtration)
	 */
	protected void sequence_Opers(ISerializationContext context, Expression semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     OrExpression returns OrExpression
	 *     OrExpression.OrExpression_1_0 returns OrExpression
	 *
	 * Constraint:
	 *     (left=OrExpression_OrExpression_1_0 right=AndExpression)
	 */
	protected void sequence_OrExpression(ISerializationContext context, OrExpression semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GoPackage.Literals.OR_EXPRESSION__LEFT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GoPackage.Literals.OR_EXPRESSION__LEFT));
			if (transientValues.isValueTransient(semanticObject, GoPackage.Literals.OR_EXPRESSION__RIGHT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GoPackage.Literals.OR_EXPRESSION__RIGHT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getOrExpressionAccess().getOrExpressionLeftAction_1_0(), semanticObject.getLeft());
		feeder.accept(grammarAccess.getOrExpressionAccess().getRightAndExpressionParserRuleCall_1_2_0(), semanticObject.getRight());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Params returns Params
	 *
	 * Constraint:
	 *     (params+=ID type+=Types? (params+=ID type+=Types?)*)
	 */
	protected void sequence_Params(ISerializationContext context, Params semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ReAtrib returns ReAtrib
	 *
	 * Constraint:
	 *     (name=ID atrib=Atrib_Aux)
	 */
	protected void sequence_ReAtrib(ISerializationContext context, ReAtrib semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GoPackage.Literals.RE_ATRIB__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GoPackage.Literals.RE_ATRIB__NAME));
			if (transientValues.isValueTransient(semanticObject, GoPackage.Literals.RE_ATRIB__ATRIB) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GoPackage.Literals.RE_ATRIB__ATRIB));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getReAtribAccess().getNameIDTerminalRuleCall_0_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getReAtribAccess().getAtribAtrib_AuxParserRuleCall_2_0(), semanticObject.getAtrib());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     varFor returns ReAtrib
	 *
	 * Constraint:
	 *     (name=ID atrib=Atrib_Aux x=OrExpression (k=operationsOne | k=OperationsOneEquals | k=Operations))
	 */
	protected void sequence_ReAtrib_varFor(ISerializationContext context, ReAtrib semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Atrib_Aux returns Str
	 *     Atri returns Str
	 *     TypeValue returns Str
	 *     Str returns Str
	 *
	 * Constraint:
	 *     s=STRING
	 */
	protected void sequence_Str(ISerializationContext context, Str semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GoPackage.Literals.STR__S) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GoPackage.Literals.STR__S));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getStrAccess().getSSTRINGTerminalRuleCall_0(), semanticObject.getS());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Subtration returns Subtration
	 *     Subtration.Subtration_1_0 returns Subtration
	 *
	 * Constraint:
	 *     (left=Subtration_Subtration_1_0 right=SubMult)
	 */
	protected void sequence_Subtration(ISerializationContext context, Subtration semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GoPackage.Literals.SUBTRATION__LEFT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GoPackage.Literals.SUBTRATION__LEFT));
			if (transientValues.isValueTransient(semanticObject, GoPackage.Literals.SUBTRATION__RIGHT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GoPackage.Literals.SUBTRATION__RIGHT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getSubtrationAccess().getSubtrationLeftAction_1_0(), semanticObject.getLeft());
		feeder.accept(grammarAccess.getSubtrationAccess().getRightSubMultParserRuleCall_1_2_0(), semanticObject.getRight());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     SwitchCase returns Variable
	 *
	 * Constraint:
	 *     (name=ID cas=Cases* k=Greeting*)
	 */
	protected void sequence_SwitchCase_Variable(ISerializationContext context, Variable semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Atrib_Aux returns Variable
	 *     Variable returns Variable
	 *     Addition returns Variable
	 *     Addition.Addition_1_0 returns Variable
	 *     Subtration returns Variable
	 *     Subtration.Subtration_1_0 returns Variable
	 *     Multiplication returns Variable
	 *     Multiplication.Multiplication_1_0 returns Variable
	 *     Division returns Variable
	 *     Division.Division_1_0 returns Variable
	 *     SubMult returns Variable
	 *     OrExpression returns Variable
	 *     OrExpression.OrExpression_1_0 returns Variable
	 *     AndExpression returns Variable
	 *     AndExpression.AndExpression_1_0 returns Variable
	 *     ComparisonExpression returns Variable
	 *     ComparisonExpression.ComparisonExpression_1_0 returns Variable
	 *     PrimaryExpression returns Variable
	 *     operationsOne returns Variable
	 *     varFor returns Variable
	 *     Literal returns Variable
	 *
	 * Constraint:
	 *     name=ID
	 */
	protected void sequence_Variable(ISerializationContext context, Variable semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GoPackage.Literals.VARIABLE__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GoPackage.Literals.VARIABLE__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getVariableAccess().getNameIDTerminalRuleCall_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Y returns Y
	 *
	 * Constraint:
	 *     ((o=F o=Y) | (o=F o=Y))
	 */
	protected void sequence_Y(ISerializationContext context, Y semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
