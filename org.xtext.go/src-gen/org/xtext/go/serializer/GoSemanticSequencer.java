/*
 * generated by Xtext 2.13.0
 */
package org.xtext.go.serializer;

import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;
import org.xtext.go.go.Addition;
import org.xtext.go.go.AndExpression;
import org.xtext.go.go.CallFor;
import org.xtext.go.go.CallFunc;
import org.xtext.go.go.Cases;
import org.xtext.go.go.ComparisonExpression;
import org.xtext.go.go.Condition;
import org.xtext.go.go.DataType;
import org.xtext.go.go.DecFunc;
import org.xtext.go.go.DecVar;
import org.xtext.go.go.DecVars;
import org.xtext.go.go.Decl;
import org.xtext.go.go.Division;
import org.xtext.go.go.ElseCondition;
import org.xtext.go.go.Go;
import org.xtext.go.go.GoPackage;
import org.xtext.go.go.IfCondition;
import org.xtext.go.go.Literal;
import org.xtext.go.go.MultDecVars;
import org.xtext.go.go.Multiplication;
import org.xtext.go.go.OperationsOneEquals;
import org.xtext.go.go.OrExpression;
import org.xtext.go.go.Params;
import org.xtext.go.go.Subtration;
import org.xtext.go.go.SwitchCase;
import org.xtext.go.go.operationsOne;
import org.xtext.go.go.varFor;
import org.xtext.go.services.GoGrammarAccess;

@SuppressWarnings("all")
public class GoSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private GoGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == GoPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case GoPackage.ADDITION:
				if (rule == grammarAccess.getExpressionRule()
						|| rule == grammarAccess.getOpersRule()
						|| rule == grammarAccess.getAdditionRule()
						|| action == grammarAccess.getAdditionAccess().getAdditionLeftAction_1_0()
						|| rule == grammarAccess.getSubtrationRule()
						|| action == grammarAccess.getSubtrationAccess().getSubtrationLeftAction_1_0()
						|| rule == grammarAccess.getMultiplicationRule()
						|| action == grammarAccess.getMultiplicationAccess().getMultiplicationLeftAction_1_0()
						|| rule == grammarAccess.getDivisionRule()
						|| action == grammarAccess.getDivisionAccess().getDivisionLeftAction_1_0()
						|| rule == grammarAccess.getSubMultRule()
						|| rule == grammarAccess.getOrExpressionRule()
						|| action == grammarAccess.getOrExpressionAccess().getOrExpressionLeftAction_1_0()
						|| rule == grammarAccess.getAndExpressionRule()
						|| action == grammarAccess.getAndExpressionAccess().getAndExpressionLeftAction_1_0()
						|| rule == grammarAccess.getComparisonExpressionRule()
						|| action == grammarAccess.getComparisonExpressionAccess().getComparisonExpressionLeftAction_1_0()
						|| rule == grammarAccess.getPrimaryExpressionRule()
						|| rule == grammarAccess.getVarForRule()) {
					sequence_Addition(context, (Addition) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getGreetingRule()
						|| rule == grammarAccess.getCallForRule()) {
					sequence_Addition_CallFor(context, (Addition) semanticObject); 
					return; 
				}
				else break;
			case GoPackage.AND_EXPRESSION:
				if (rule == grammarAccess.getExpressionRule()
						|| rule == grammarAccess.getOpersRule()
						|| rule == grammarAccess.getAdditionRule()
						|| action == grammarAccess.getAdditionAccess().getAdditionLeftAction_1_0()
						|| rule == grammarAccess.getSubtrationRule()
						|| action == grammarAccess.getSubtrationAccess().getSubtrationLeftAction_1_0()
						|| rule == grammarAccess.getMultiplicationRule()
						|| action == grammarAccess.getMultiplicationAccess().getMultiplicationLeftAction_1_0()
						|| rule == grammarAccess.getDivisionRule()
						|| action == grammarAccess.getDivisionAccess().getDivisionLeftAction_1_0()
						|| rule == grammarAccess.getSubMultRule()
						|| rule == grammarAccess.getOrExpressionRule()
						|| action == grammarAccess.getOrExpressionAccess().getOrExpressionLeftAction_1_0()
						|| rule == grammarAccess.getAndExpressionRule()
						|| action == grammarAccess.getAndExpressionAccess().getAndExpressionLeftAction_1_0()
						|| rule == grammarAccess.getComparisonExpressionRule()
						|| action == grammarAccess.getComparisonExpressionAccess().getComparisonExpressionLeftAction_1_0()
						|| rule == grammarAccess.getPrimaryExpressionRule()
						|| rule == grammarAccess.getVarForRule()) {
					sequence_AndExpression(context, (AndExpression) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getGreetingRule()
						|| rule == grammarAccess.getCallForRule()) {
					sequence_AndExpression_CallFor(context, (AndExpression) semanticObject); 
					return; 
				}
				else break;
			case GoPackage.CALL_FOR:
				sequence_CallFor(context, (CallFor) semanticObject); 
				return; 
			case GoPackage.CALL_FUNC:
				sequence_CallFunc(context, (CallFunc) semanticObject); 
				return; 
			case GoPackage.CASES:
				sequence_Cases(context, (Cases) semanticObject); 
				return; 
			case GoPackage.COMPARISON_EXPRESSION:
				if (rule == grammarAccess.getGreetingRule()
						|| rule == grammarAccess.getCallForRule()) {
					sequence_CallFor_ComparisonExpression(context, (ComparisonExpression) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getExpressionRule()
						|| rule == grammarAccess.getOpersRule()
						|| rule == grammarAccess.getAdditionRule()
						|| action == grammarAccess.getAdditionAccess().getAdditionLeftAction_1_0()
						|| rule == grammarAccess.getSubtrationRule()
						|| action == grammarAccess.getSubtrationAccess().getSubtrationLeftAction_1_0()
						|| rule == grammarAccess.getMultiplicationRule()
						|| action == grammarAccess.getMultiplicationAccess().getMultiplicationLeftAction_1_0()
						|| rule == grammarAccess.getDivisionRule()
						|| action == grammarAccess.getDivisionAccess().getDivisionLeftAction_1_0()
						|| rule == grammarAccess.getSubMultRule()
						|| rule == grammarAccess.getOrExpressionRule()
						|| action == grammarAccess.getOrExpressionAccess().getOrExpressionLeftAction_1_0()
						|| rule == grammarAccess.getAndExpressionRule()
						|| action == grammarAccess.getAndExpressionAccess().getAndExpressionLeftAction_1_0()
						|| rule == grammarAccess.getComparisonExpressionRule()
						|| action == grammarAccess.getComparisonExpressionAccess().getComparisonExpressionLeftAction_1_0()
						|| rule == grammarAccess.getPrimaryExpressionRule()
						|| rule == grammarAccess.getVarForRule()) {
					sequence_ComparisonExpression(context, (ComparisonExpression) semanticObject); 
					return; 
				}
				else break;
			case GoPackage.CONDITION:
				sequence_Condition(context, (Condition) semanticObject); 
				return; 
			case GoPackage.DATA_TYPE:
				sequence_DataType(context, (DataType) semanticObject); 
				return; 
			case GoPackage.DEC_FUNC:
				sequence_DecFunc(context, (DecFunc) semanticObject); 
				return; 
			case GoPackage.DEC_VAR:
				sequence_DecVar(context, (DecVar) semanticObject); 
				return; 
			case GoPackage.DEC_VARS:
				sequence_DecVars(context, (DecVars) semanticObject); 
				return; 
			case GoPackage.DECL:
				sequence_Decl(context, (Decl) semanticObject); 
				return; 
			case GoPackage.DIVISION:
				if (rule == grammarAccess.getGreetingRule()
						|| rule == grammarAccess.getCallForRule()) {
					sequence_CallFor_Division(context, (Division) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getExpressionRule()
						|| rule == grammarAccess.getOpersRule()
						|| rule == grammarAccess.getAdditionRule()
						|| action == grammarAccess.getAdditionAccess().getAdditionLeftAction_1_0()
						|| rule == grammarAccess.getSubtrationRule()
						|| action == grammarAccess.getSubtrationAccess().getSubtrationLeftAction_1_0()
						|| rule == grammarAccess.getMultiplicationRule()
						|| action == grammarAccess.getMultiplicationAccess().getMultiplicationLeftAction_1_0()
						|| rule == grammarAccess.getDivisionRule()
						|| action == grammarAccess.getDivisionAccess().getDivisionLeftAction_1_0()
						|| rule == grammarAccess.getSubMultRule()
						|| rule == grammarAccess.getOrExpressionRule()
						|| action == grammarAccess.getOrExpressionAccess().getOrExpressionLeftAction_1_0()
						|| rule == grammarAccess.getAndExpressionRule()
						|| action == grammarAccess.getAndExpressionAccess().getAndExpressionLeftAction_1_0()
						|| rule == grammarAccess.getComparisonExpressionRule()
						|| action == grammarAccess.getComparisonExpressionAccess().getComparisonExpressionLeftAction_1_0()
						|| rule == grammarAccess.getPrimaryExpressionRule()
						|| rule == grammarAccess.getVarForRule()) {
					sequence_Division(context, (Division) semanticObject); 
					return; 
				}
				else break;
			case GoPackage.ELSE_CONDITION:
				sequence_ElseCondition(context, (ElseCondition) semanticObject); 
				return; 
			case GoPackage.GO:
				sequence_Go(context, (Go) semanticObject); 
				return; 
			case GoPackage.IF_CONDITION:
				sequence_IfCondition(context, (IfCondition) semanticObject); 
				return; 
			case GoPackage.LITERAL:
				if (rule == grammarAccess.getGreetingRule()
						|| rule == grammarAccess.getCallForRule()) {
					sequence_CallFor_Literal(context, (Literal) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getExpressionRule()
						|| rule == grammarAccess.getOpersRule()
						|| rule == grammarAccess.getAdditionRule()
						|| action == grammarAccess.getAdditionAccess().getAdditionLeftAction_1_0()
						|| rule == grammarAccess.getSubtrationRule()
						|| action == grammarAccess.getSubtrationAccess().getSubtrationLeftAction_1_0()
						|| rule == grammarAccess.getMultiplicationRule()
						|| action == grammarAccess.getMultiplicationAccess().getMultiplicationLeftAction_1_0()
						|| rule == grammarAccess.getDivisionRule()
						|| action == grammarAccess.getDivisionAccess().getDivisionLeftAction_1_0()
						|| rule == grammarAccess.getSubMultRule()
						|| rule == grammarAccess.getOrExpressionRule()
						|| action == grammarAccess.getOrExpressionAccess().getOrExpressionLeftAction_1_0()
						|| rule == grammarAccess.getAndExpressionRule()
						|| action == grammarAccess.getAndExpressionAccess().getAndExpressionLeftAction_1_0()
						|| rule == grammarAccess.getComparisonExpressionRule()
						|| action == grammarAccess.getComparisonExpressionAccess().getComparisonExpressionLeftAction_1_0()
						|| rule == grammarAccess.getPrimaryExpressionRule()
						|| rule == grammarAccess.getVarForRule()
						|| rule == grammarAccess.getLiteralRule()) {
					sequence_Literal(context, (Literal) semanticObject); 
					return; 
				}
				else break;
			case GoPackage.MULT_DEC_VARS:
				sequence_MultDecVars(context, (MultDecVars) semanticObject); 
				return; 
			case GoPackage.MULTIPLICATION:
				if (rule == grammarAccess.getGreetingRule()
						|| rule == grammarAccess.getCallForRule()) {
					sequence_CallFor_Multiplication(context, (Multiplication) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getExpressionRule()
						|| rule == grammarAccess.getOpersRule()
						|| rule == grammarAccess.getAdditionRule()
						|| action == grammarAccess.getAdditionAccess().getAdditionLeftAction_1_0()
						|| rule == grammarAccess.getSubtrationRule()
						|| action == grammarAccess.getSubtrationAccess().getSubtrationLeftAction_1_0()
						|| rule == grammarAccess.getMultiplicationRule()
						|| action == grammarAccess.getMultiplicationAccess().getMultiplicationLeftAction_1_0()
						|| rule == grammarAccess.getDivisionRule()
						|| action == grammarAccess.getDivisionAccess().getDivisionLeftAction_1_0()
						|| rule == grammarAccess.getSubMultRule()
						|| rule == grammarAccess.getOrExpressionRule()
						|| action == grammarAccess.getOrExpressionAccess().getOrExpressionLeftAction_1_0()
						|| rule == grammarAccess.getAndExpressionRule()
						|| action == grammarAccess.getAndExpressionAccess().getAndExpressionLeftAction_1_0()
						|| rule == grammarAccess.getComparisonExpressionRule()
						|| action == grammarAccess.getComparisonExpressionAccess().getComparisonExpressionLeftAction_1_0()
						|| rule == grammarAccess.getPrimaryExpressionRule()
						|| rule == grammarAccess.getVarForRule()) {
					sequence_Multiplication(context, (Multiplication) semanticObject); 
					return; 
				}
				else break;
			case GoPackage.OPERATIONS_ONE_EQUALS:
				sequence_OperationsOneEquals(context, (OperationsOneEquals) semanticObject); 
				return; 
			case GoPackage.OR_EXPRESSION:
				if (rule == grammarAccess.getGreetingRule()
						|| rule == grammarAccess.getCallForRule()) {
					sequence_CallFor_OrExpression(context, (OrExpression) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getExpressionRule()
						|| rule == grammarAccess.getOpersRule()
						|| rule == grammarAccess.getAdditionRule()
						|| action == grammarAccess.getAdditionAccess().getAdditionLeftAction_1_0()
						|| rule == grammarAccess.getSubtrationRule()
						|| action == grammarAccess.getSubtrationAccess().getSubtrationLeftAction_1_0()
						|| rule == grammarAccess.getMultiplicationRule()
						|| action == grammarAccess.getMultiplicationAccess().getMultiplicationLeftAction_1_0()
						|| rule == grammarAccess.getDivisionRule()
						|| action == grammarAccess.getDivisionAccess().getDivisionLeftAction_1_0()
						|| rule == grammarAccess.getSubMultRule()
						|| rule == grammarAccess.getOrExpressionRule()
						|| action == grammarAccess.getOrExpressionAccess().getOrExpressionLeftAction_1_0()
						|| rule == grammarAccess.getAndExpressionRule()
						|| action == grammarAccess.getAndExpressionAccess().getAndExpressionLeftAction_1_0()
						|| rule == grammarAccess.getComparisonExpressionRule()
						|| action == grammarAccess.getComparisonExpressionAccess().getComparisonExpressionLeftAction_1_0()
						|| rule == grammarAccess.getPrimaryExpressionRule()
						|| rule == grammarAccess.getVarForRule()) {
					sequence_OrExpression(context, (OrExpression) semanticObject); 
					return; 
				}
				else break;
			case GoPackage.PARAMS:
				sequence_Params(context, (Params) semanticObject); 
				return; 
			case GoPackage.SUBTRATION:
				if (rule == grammarAccess.getGreetingRule()
						|| rule == grammarAccess.getCallForRule()) {
					sequence_CallFor_Subtration(context, (Subtration) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getExpressionRule()
						|| rule == grammarAccess.getOpersRule()
						|| rule == grammarAccess.getAdditionRule()
						|| action == grammarAccess.getAdditionAccess().getAdditionLeftAction_1_0()
						|| rule == grammarAccess.getSubtrationRule()
						|| action == grammarAccess.getSubtrationAccess().getSubtrationLeftAction_1_0()
						|| rule == grammarAccess.getMultiplicationRule()
						|| action == grammarAccess.getMultiplicationAccess().getMultiplicationLeftAction_1_0()
						|| rule == grammarAccess.getDivisionRule()
						|| action == grammarAccess.getDivisionAccess().getDivisionLeftAction_1_0()
						|| rule == grammarAccess.getSubMultRule()
						|| rule == grammarAccess.getOrExpressionRule()
						|| action == grammarAccess.getOrExpressionAccess().getOrExpressionLeftAction_1_0()
						|| rule == grammarAccess.getAndExpressionRule()
						|| action == grammarAccess.getAndExpressionAccess().getAndExpressionLeftAction_1_0()
						|| rule == grammarAccess.getComparisonExpressionRule()
						|| action == grammarAccess.getComparisonExpressionAccess().getComparisonExpressionLeftAction_1_0()
						|| rule == grammarAccess.getPrimaryExpressionRule()
						|| rule == grammarAccess.getVarForRule()) {
					sequence_Subtration(context, (Subtration) semanticObject); 
					return; 
				}
				else break;
			case GoPackage.SWITCH_CASE:
				sequence_SwitchCase(context, (SwitchCase) semanticObject); 
				return; 
			case GoPackage.OPERATIONS_ONE:
				sequence_operationsOne(context, (operationsOne) semanticObject); 
				return; 
			case GoPackage.VAR_FOR:
				if (rule == grammarAccess.getGreetingRule()
						|| rule == grammarAccess.getCallForRule()) {
					sequence_CallFor_OperationsOneEquals_operationsOne_varFor(context, (varFor) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getVarForRule()) {
					sequence_OperationsOneEquals_operationsOne_varFor(context, (varFor) semanticObject); 
					return; 
				}
				else break;
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     Expression returns Addition
	 *     Opers returns Addition
	 *     Addition returns Addition
	 *     Addition.Addition_1_0 returns Addition
	 *     Subtration returns Addition
	 *     Subtration.Subtration_1_0 returns Addition
	 *     Multiplication returns Addition
	 *     Multiplication.Multiplication_1_0 returns Addition
	 *     Division returns Addition
	 *     Division.Division_1_0 returns Addition
	 *     SubMult returns Addition
	 *     OrExpression returns Addition
	 *     OrExpression.OrExpression_1_0 returns Addition
	 *     AndExpression returns Addition
	 *     AndExpression.AndExpression_1_0 returns Addition
	 *     ComparisonExpression returns Addition
	 *     ComparisonExpression.ComparisonExpression_1_0 returns Addition
	 *     PrimaryExpression returns Addition
	 *     varFor returns Addition
	 *
	 * Constraint:
	 *     (left=Addition_Addition_1_0 right=SubMult)
	 */
	protected void sequence_Addition(ISerializationContext context, Addition semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GoPackage.Literals.VAR_FOR__LEFT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GoPackage.Literals.VAR_FOR__LEFT));
			if (transientValues.isValueTransient(semanticObject, GoPackage.Literals.VAR_FOR__RIGHT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GoPackage.Literals.VAR_FOR__RIGHT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getAdditionAccess().getAdditionLeftAction_1_0(), semanticObject.getLeft());
		feeder.accept(grammarAccess.getAdditionAccess().getRightSubMultParserRuleCall_1_2_0(), semanticObject.getRight());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Greeting returns Addition
	 *     CallFor returns Addition
	 *
	 * Constraint:
	 *     (left=Addition_Addition_1_0 right=SubMult x=Greeting*)
	 */
	protected void sequence_Addition_CallFor(ISerializationContext context, Addition semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Expression returns AndExpression
	 *     Opers returns AndExpression
	 *     Addition returns AndExpression
	 *     Addition.Addition_1_0 returns AndExpression
	 *     Subtration returns AndExpression
	 *     Subtration.Subtration_1_0 returns AndExpression
	 *     Multiplication returns AndExpression
	 *     Multiplication.Multiplication_1_0 returns AndExpression
	 *     Division returns AndExpression
	 *     Division.Division_1_0 returns AndExpression
	 *     SubMult returns AndExpression
	 *     OrExpression returns AndExpression
	 *     OrExpression.OrExpression_1_0 returns AndExpression
	 *     AndExpression returns AndExpression
	 *     AndExpression.AndExpression_1_0 returns AndExpression
	 *     ComparisonExpression returns AndExpression
	 *     ComparisonExpression.ComparisonExpression_1_0 returns AndExpression
	 *     PrimaryExpression returns AndExpression
	 *     varFor returns AndExpression
	 *
	 * Constraint:
	 *     (left=AndExpression_AndExpression_1_0 right=ComparisonExpression)
	 */
	protected void sequence_AndExpression(ISerializationContext context, AndExpression semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GoPackage.Literals.VAR_FOR__LEFT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GoPackage.Literals.VAR_FOR__LEFT));
			if (transientValues.isValueTransient(semanticObject, GoPackage.Literals.VAR_FOR__RIGHT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GoPackage.Literals.VAR_FOR__RIGHT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getAndExpressionAccess().getAndExpressionLeftAction_1_0(), semanticObject.getLeft());
		feeder.accept(grammarAccess.getAndExpressionAccess().getRightComparisonExpressionParserRuleCall_1_2_0(), semanticObject.getRight());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Greeting returns AndExpression
	 *     CallFor returns AndExpression
	 *
	 * Constraint:
	 *     (left=AndExpression_AndExpression_1_0 right=ComparisonExpression x=Greeting*)
	 */
	protected void sequence_AndExpression_CallFor(ISerializationContext context, AndExpression semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Greeting returns CallFor
	 *     CallFor returns CallFor
	 *
	 * Constraint:
	 *     x=Greeting+
	 */
	protected void sequence_CallFor(ISerializationContext context, CallFor semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Greeting returns ComparisonExpression
	 *     CallFor returns ComparisonExpression
	 *
	 * Constraint:
	 *     (left=ComparisonExpression_ComparisonExpression_1_0 right=PrimaryExpression x=Greeting*)
	 */
	protected void sequence_CallFor_ComparisonExpression(ISerializationContext context, ComparisonExpression semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Greeting returns Division
	 *     CallFor returns Division
	 *
	 * Constraint:
	 *     (left=Division_Division_1_0 right=PrimaryExpression x=Greeting*)
	 */
	protected void sequence_CallFor_Division(ISerializationContext context, Division semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Greeting returns Literal
	 *     CallFor returns Literal
	 *
	 * Constraint:
	 *     (value=Boolean x=Greeting*)
	 */
	protected void sequence_CallFor_Literal(ISerializationContext context, Literal semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Greeting returns Multiplication
	 *     CallFor returns Multiplication
	 *
	 * Constraint:
	 *     (left=Multiplication_Multiplication_1_0 right=PrimaryExpression x=Greeting*)
	 */
	protected void sequence_CallFor_Multiplication(ISerializationContext context, Multiplication semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Greeting returns varFor
	 *     CallFor returns varFor
	 *
	 * Constraint:
	 *     (
	 *         var+=ID 
	 *         (atrb+=Atri | atrb+=ID) 
	 *         right=Literal 
	 *         left=Literal 
	 *         (name=ID | name=ID) 
	 *         x=Greeting*
	 *     )
	 */
	protected void sequence_CallFor_OperationsOneEquals_operationsOne_varFor(ISerializationContext context, varFor semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Greeting returns OrExpression
	 *     CallFor returns OrExpression
	 *
	 * Constraint:
	 *     (left=OrExpression_OrExpression_1_0 right=AndExpression x=Greeting*)
	 */
	protected void sequence_CallFor_OrExpression(ISerializationContext context, OrExpression semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Greeting returns Subtration
	 *     CallFor returns Subtration
	 *
	 * Constraint:
	 *     (left=Subtration_Subtration_1_0 right=SubMult x=Greeting*)
	 */
	protected void sequence_CallFor_Subtration(ISerializationContext context, Subtration semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Greeting returns CallFunc
	 *     CallFunc returns CallFunc
	 *
	 * Constraint:
	 *     (nameFunc=ID param=Params*)
	 */
	protected void sequence_CallFunc(ISerializationContext context, CallFunc semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Cases returns Cases
	 *
	 * Constraint:
	 *     (x=Expression v=Greeting*)
	 */
	protected void sequence_Cases(ISerializationContext context, Cases semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Expression returns ComparisonExpression
	 *     Opers returns ComparisonExpression
	 *     Addition returns ComparisonExpression
	 *     Addition.Addition_1_0 returns ComparisonExpression
	 *     Subtration returns ComparisonExpression
	 *     Subtration.Subtration_1_0 returns ComparisonExpression
	 *     Multiplication returns ComparisonExpression
	 *     Multiplication.Multiplication_1_0 returns ComparisonExpression
	 *     Division returns ComparisonExpression
	 *     Division.Division_1_0 returns ComparisonExpression
	 *     SubMult returns ComparisonExpression
	 *     OrExpression returns ComparisonExpression
	 *     OrExpression.OrExpression_1_0 returns ComparisonExpression
	 *     AndExpression returns ComparisonExpression
	 *     AndExpression.AndExpression_1_0 returns ComparisonExpression
	 *     ComparisonExpression returns ComparisonExpression
	 *     ComparisonExpression.ComparisonExpression_1_0 returns ComparisonExpression
	 *     PrimaryExpression returns ComparisonExpression
	 *     varFor returns ComparisonExpression
	 *
	 * Constraint:
	 *     (left=ComparisonExpression_ComparisonExpression_1_0 right=PrimaryExpression)
	 */
	protected void sequence_ComparisonExpression(ISerializationContext context, ComparisonExpression semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GoPackage.Literals.VAR_FOR__LEFT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GoPackage.Literals.VAR_FOR__LEFT));
			if (transientValues.isValueTransient(semanticObject, GoPackage.Literals.VAR_FOR__RIGHT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GoPackage.Literals.VAR_FOR__RIGHT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getComparisonExpressionAccess().getComparisonExpressionLeftAction_1_0(), semanticObject.getLeft());
		feeder.accept(grammarAccess.getComparisonExpressionAccess().getRightPrimaryExpressionParserRuleCall_1_2_0(), semanticObject.getRight());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Greeting returns Condition
	 *     Condition returns Condition
	 *
	 * Constraint:
	 *     (if=IfCondition elseif=ElseIfCondition* else=ElseCondition?)
	 */
	protected void sequence_Condition(ISerializationContext context, Condition semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Greeting returns DataType
	 *     DataType returns DataType
	 *
	 * Constraint:
	 *     name=ID
	 */
	protected void sequence_DataType(ISerializationContext context, DataType semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GoPackage.Literals.DATA_TYPE__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GoPackage.Literals.DATA_TYPE__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getDataTypeAccess().getNameIDTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Greeting returns DecFunc
	 *     DecFunc returns DecFunc
	 *
	 * Constraint:
	 *     (name=ID param=Params* args+=Greeting*)
	 */
	protected void sequence_DecFunc(ISerializationContext context, DecFunc semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Greeting returns DecVar
	 *     DecVar returns DecVar
	 *
	 * Constraint:
	 *     (vars+=ID vars+=ID* type=Types ((atrb+=Atri | atrb+=ID) atrb+=Atri? (atrb+=ID? atrb+=Atri?)*)?)
	 */
	protected void sequence_DecVar(ISerializationContext context, DecVar semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     DecVars returns DecVars
	 *
	 * Constraint:
	 *     (vars+=ID vars+=ID* (atrb+=Atri | atrb+=ID) atrb+=Atri? (atrb+=ID? atrb+=Atri?)*)
	 */
	protected void sequence_DecVars(ISerializationContext context, DecVars semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Greeting returns Decl
	 *     Decl returns Decl
	 *     DecVar returns Decl
	 *
	 * Constraint:
	 *     (name=ID type=Types)
	 */
	protected void sequence_Decl(ISerializationContext context, Decl semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GoPackage.Literals.DECL__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GoPackage.Literals.DECL__NAME));
			if (transientValues.isValueTransient(semanticObject, GoPackage.Literals.DEC_VAR__TYPE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GoPackage.Literals.DEC_VAR__TYPE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getDeclAccess().getNameIDTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getDeclAccess().getTypeTypesParserRuleCall_2_0(), semanticObject.getType());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Expression returns Division
	 *     Opers returns Division
	 *     Addition returns Division
	 *     Addition.Addition_1_0 returns Division
	 *     Subtration returns Division
	 *     Subtration.Subtration_1_0 returns Division
	 *     Multiplication returns Division
	 *     Multiplication.Multiplication_1_0 returns Division
	 *     Division returns Division
	 *     Division.Division_1_0 returns Division
	 *     SubMult returns Division
	 *     OrExpression returns Division
	 *     OrExpression.OrExpression_1_0 returns Division
	 *     AndExpression returns Division
	 *     AndExpression.AndExpression_1_0 returns Division
	 *     ComparisonExpression returns Division
	 *     ComparisonExpression.ComparisonExpression_1_0 returns Division
	 *     PrimaryExpression returns Division
	 *     varFor returns Division
	 *
	 * Constraint:
	 *     (left=Division_Division_1_0 right=PrimaryExpression)
	 */
	protected void sequence_Division(ISerializationContext context, Division semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GoPackage.Literals.VAR_FOR__LEFT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GoPackage.Literals.VAR_FOR__LEFT));
			if (transientValues.isValueTransient(semanticObject, GoPackage.Literals.VAR_FOR__RIGHT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GoPackage.Literals.VAR_FOR__RIGHT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getDivisionAccess().getDivisionLeftAction_1_0(), semanticObject.getLeft());
		feeder.accept(grammarAccess.getDivisionAccess().getRightPrimaryExpressionParserRuleCall_1_2_0(), semanticObject.getRight());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     ElseCondition returns ElseCondition
	 *
	 * Constraint:
	 *     then=Greeting+
	 */
	protected void sequence_ElseCondition(ISerializationContext context, ElseCondition semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Go returns Go
	 *
	 * Constraint:
	 *     elements+=Greeting+
	 */
	protected void sequence_Go(ISerializationContext context, Go semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     IfCondition returns IfCondition
	 *     ElseIfCondition returns IfCondition
	 *
	 * Constraint:
	 *     (cond=OrExpression then=Greeting*)
	 */
	protected void sequence_IfCondition(ISerializationContext context, IfCondition semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Expression returns Literal
	 *     Opers returns Literal
	 *     Addition returns Literal
	 *     Addition.Addition_1_0 returns Literal
	 *     Subtration returns Literal
	 *     Subtration.Subtration_1_0 returns Literal
	 *     Multiplication returns Literal
	 *     Multiplication.Multiplication_1_0 returns Literal
	 *     Division returns Literal
	 *     Division.Division_1_0 returns Literal
	 *     SubMult returns Literal
	 *     OrExpression returns Literal
	 *     OrExpression.OrExpression_1_0 returns Literal
	 *     AndExpression returns Literal
	 *     AndExpression.AndExpression_1_0 returns Literal
	 *     ComparisonExpression returns Literal
	 *     ComparisonExpression.ComparisonExpression_1_0 returns Literal
	 *     PrimaryExpression returns Literal
	 *     varFor returns Literal
	 *     Literal returns Literal
	 *
	 * Constraint:
	 *     value=Boolean
	 */
	protected void sequence_Literal(ISerializationContext context, Literal semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GoPackage.Literals.LITERAL__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GoPackage.Literals.LITERAL__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getLiteralAccess().getValueBooleanParserRuleCall_0_1_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Greeting returns MultDecVars
	 *     MultDecVars returns MultDecVars
	 *
	 * Constraint:
	 *     (name=ID value=ID?)+
	 */
	protected void sequence_MultDecVars(ISerializationContext context, MultDecVars semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Expression returns Multiplication
	 *     Opers returns Multiplication
	 *     Addition returns Multiplication
	 *     Addition.Addition_1_0 returns Multiplication
	 *     Subtration returns Multiplication
	 *     Subtration.Subtration_1_0 returns Multiplication
	 *     Multiplication returns Multiplication
	 *     Multiplication.Multiplication_1_0 returns Multiplication
	 *     Division returns Multiplication
	 *     Division.Division_1_0 returns Multiplication
	 *     SubMult returns Multiplication
	 *     OrExpression returns Multiplication
	 *     OrExpression.OrExpression_1_0 returns Multiplication
	 *     AndExpression returns Multiplication
	 *     AndExpression.AndExpression_1_0 returns Multiplication
	 *     ComparisonExpression returns Multiplication
	 *     ComparisonExpression.ComparisonExpression_1_0 returns Multiplication
	 *     PrimaryExpression returns Multiplication
	 *     varFor returns Multiplication
	 *
	 * Constraint:
	 *     (left=Multiplication_Multiplication_1_0 right=PrimaryExpression)
	 */
	protected void sequence_Multiplication(ISerializationContext context, Multiplication semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GoPackage.Literals.VAR_FOR__LEFT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GoPackage.Literals.VAR_FOR__LEFT));
			if (transientValues.isValueTransient(semanticObject, GoPackage.Literals.VAR_FOR__RIGHT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GoPackage.Literals.VAR_FOR__RIGHT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getMultiplicationAccess().getMultiplicationLeftAction_1_0(), semanticObject.getLeft());
		feeder.accept(grammarAccess.getMultiplicationAccess().getRightPrimaryExpressionParserRuleCall_1_2_0(), semanticObject.getRight());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     OperationsOneEquals returns OperationsOneEquals
	 *
	 * Constraint:
	 *     name=ID
	 */
	protected void sequence_OperationsOneEquals(ISerializationContext context, OperationsOneEquals semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GoPackage.Literals.OPERATIONS_ONE_EQUALS__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GoPackage.Literals.OPERATIONS_ONE_EQUALS__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getOperationsOneEqualsAccess().getNameIDTerminalRuleCall_0_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     varFor returns varFor
	 *
	 * Constraint:
	 *     (var+=ID (atrb+=Atri | atrb+=ID) right=Literal left=Literal (name=ID | name=ID))
	 */
	protected void sequence_OperationsOneEquals_operationsOne_varFor(ISerializationContext context, varFor semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Expression returns OrExpression
	 *     Opers returns OrExpression
	 *     Addition returns OrExpression
	 *     Addition.Addition_1_0 returns OrExpression
	 *     Subtration returns OrExpression
	 *     Subtration.Subtration_1_0 returns OrExpression
	 *     Multiplication returns OrExpression
	 *     Multiplication.Multiplication_1_0 returns OrExpression
	 *     Division returns OrExpression
	 *     Division.Division_1_0 returns OrExpression
	 *     SubMult returns OrExpression
	 *     OrExpression returns OrExpression
	 *     OrExpression.OrExpression_1_0 returns OrExpression
	 *     AndExpression returns OrExpression
	 *     AndExpression.AndExpression_1_0 returns OrExpression
	 *     ComparisonExpression returns OrExpression
	 *     ComparisonExpression.ComparisonExpression_1_0 returns OrExpression
	 *     PrimaryExpression returns OrExpression
	 *     varFor returns OrExpression
	 *
	 * Constraint:
	 *     (left=OrExpression_OrExpression_1_0 right=AndExpression)
	 */
	protected void sequence_OrExpression(ISerializationContext context, OrExpression semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GoPackage.Literals.VAR_FOR__LEFT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GoPackage.Literals.VAR_FOR__LEFT));
			if (transientValues.isValueTransient(semanticObject, GoPackage.Literals.VAR_FOR__RIGHT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GoPackage.Literals.VAR_FOR__RIGHT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getOrExpressionAccess().getOrExpressionLeftAction_1_0(), semanticObject.getLeft());
		feeder.accept(grammarAccess.getOrExpressionAccess().getRightAndExpressionParserRuleCall_1_2_0(), semanticObject.getRight());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Params returns Params
	 *
	 * Constraint:
	 *     (params+=ID params+=ID*)
	 */
	protected void sequence_Params(ISerializationContext context, Params semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Expression returns Subtration
	 *     Opers returns Subtration
	 *     Addition returns Subtration
	 *     Addition.Addition_1_0 returns Subtration
	 *     Subtration returns Subtration
	 *     Subtration.Subtration_1_0 returns Subtration
	 *     Multiplication returns Subtration
	 *     Multiplication.Multiplication_1_0 returns Subtration
	 *     Division returns Subtration
	 *     Division.Division_1_0 returns Subtration
	 *     SubMult returns Subtration
	 *     OrExpression returns Subtration
	 *     OrExpression.OrExpression_1_0 returns Subtration
	 *     AndExpression returns Subtration
	 *     AndExpression.AndExpression_1_0 returns Subtration
	 *     ComparisonExpression returns Subtration
	 *     ComparisonExpression.ComparisonExpression_1_0 returns Subtration
	 *     PrimaryExpression returns Subtration
	 *     varFor returns Subtration
	 *
	 * Constraint:
	 *     (left=Subtration_Subtration_1_0 right=SubMult)
	 */
	protected void sequence_Subtration(ISerializationContext context, Subtration semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GoPackage.Literals.VAR_FOR__LEFT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GoPackage.Literals.VAR_FOR__LEFT));
			if (transientValues.isValueTransient(semanticObject, GoPackage.Literals.VAR_FOR__RIGHT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GoPackage.Literals.VAR_FOR__RIGHT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getSubtrationAccess().getSubtrationLeftAction_1_0(), semanticObject.getLeft());
		feeder.accept(grammarAccess.getSubtrationAccess().getRightSubMultParserRuleCall_1_2_0(), semanticObject.getRight());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Greeting returns SwitchCase
	 *     SwitchCase returns SwitchCase
	 *
	 * Constraint:
	 *     (name=ID cas=Cases* k=Greeting*)
	 */
	protected void sequence_SwitchCase(ISerializationContext context, SwitchCase semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     operationsOne returns operationsOne
	 *
	 * Constraint:
	 *     name=ID
	 */
	protected void sequence_operationsOne(ISerializationContext context, operationsOne semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GoPackage.Literals.OPERATIONS_ONE__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GoPackage.Literals.OPERATIONS_ONE__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getOperationsOneAccess().getNameIDTerminalRuleCall_0_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
}
