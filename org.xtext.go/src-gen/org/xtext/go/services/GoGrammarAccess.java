/*
 * generated by Xtext 2.13.0
 */
package org.xtext.go.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class GoGrammarAccess extends AbstractGrammarElementFinder {
	
	public class GoElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.go.Go.Go");
		private final Assignment cElementsAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cElementsGreetingParserRuleCall_0 = (RuleCall)cElementsAssignment.eContents().get(0);
		
		//Go:
		//	elements+=Greeting*;
		@Override public ParserRule getRule() { return rule; }
		
		//elements+=Greeting*
		public Assignment getElementsAssignment() { return cElementsAssignment; }
		
		//Greeting
		public RuleCall getElementsGreetingParserRuleCall_0() { return cElementsGreetingParserRuleCall_0; }
	}
	public class GreetingElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.go.Go.Greeting");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cDecVarParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cDataTypeParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cEntityParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cDecFuncParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cEOLTerminalRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cConditionParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cOperationsParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		
		//Greeting:
		//	DecVar | DataType | Entity | DecFunc | EOL | Condition | Operations;
		@Override public ParserRule getRule() { return rule; }
		
		//DecVar | DataType | Entity | DecFunc | EOL | Condition | Operations
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//DecVar
		public RuleCall getDecVarParserRuleCall_0() { return cDecVarParserRuleCall_0; }
		
		//DataType
		public RuleCall getDataTypeParserRuleCall_1() { return cDataTypeParserRuleCall_1; }
		
		//Entity
		public RuleCall getEntityParserRuleCall_2() { return cEntityParserRuleCall_2; }
		
		//DecFunc
		public RuleCall getDecFuncParserRuleCall_3() { return cDecFuncParserRuleCall_3; }
		
		//EOL
		public RuleCall getEOLTerminalRuleCall_4() { return cEOLTerminalRuleCall_4; }
		
		//Condition
		public RuleCall getConditionParserRuleCall_5() { return cConditionParserRuleCall_5; }
		
		//Operations
		public RuleCall getOperationsParserRuleCall_6() { return cOperationsParserRuleCall_6; }
	}
	public class DecVarElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.go.Go.DecVar");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cDecVarsParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final RuleCall cVARParserRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final Assignment cVarsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cVarsIDTerminalRuleCall_1_1_0 = (RuleCall)cVarsAssignment_1_1.eContents().get(0);
		private final Group cGroup_1_2 = (Group)cGroup_1.eContents().get(2);
		private final Keyword cCommaKeyword_1_2_0 = (Keyword)cGroup_1_2.eContents().get(0);
		private final Assignment cVarsAssignment_1_2_1 = (Assignment)cGroup_1_2.eContents().get(1);
		private final RuleCall cVarsIDTerminalRuleCall_1_2_1_0 = (RuleCall)cVarsAssignment_1_2_1.eContents().get(0);
		private final RuleCall cTYPEParserRuleCall_1_3 = (RuleCall)cGroup_1.eContents().get(3);
		private final Group cGroup_1_4 = (Group)cGroup_1.eContents().get(4);
		private final Keyword cEqualsSignKeyword_1_4_0 = (Keyword)cGroup_1_4.eContents().get(0);
		private final Assignment cAtrbAssignment_1_4_1 = (Assignment)cGroup_1_4.eContents().get(1);
		private final RuleCall cAtrbIDTerminalRuleCall_1_4_1_0 = (RuleCall)cAtrbAssignment_1_4_1.eContents().get(0);
		private final Group cGroup_1_4_2 = (Group)cGroup_1_4.eContents().get(2);
		private final Keyword cCommaKeyword_1_4_2_0 = (Keyword)cGroup_1_4_2.eContents().get(0);
		private final Assignment cAtrbAssignment_1_4_2_1 = (Assignment)cGroup_1_4_2.eContents().get(1);
		private final RuleCall cAtrbIDTerminalRuleCall_1_4_2_1_0 = (RuleCall)cAtrbAssignment_1_4_2_1.eContents().get(0);
		
		//DecVar:
		//	DecVars | VAR vars+=ID ("," vars+=ID)* TYPE ("=" atrb+=ID ("," atrb+=ID)*)?;
		@Override public ParserRule getRule() { return rule; }
		
		//DecVars | VAR vars+=ID ("," vars+=ID)* TYPE ("=" atrb+=ID ("," atrb+=ID)*)?
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//DecVars
		public RuleCall getDecVarsParserRuleCall_0() { return cDecVarsParserRuleCall_0; }
		
		//VAR vars+=ID ("," vars+=ID)* TYPE ("=" atrb+=ID ("," atrb+=ID)*)?
		public Group getGroup_1() { return cGroup_1; }
		
		//VAR
		public RuleCall getVARParserRuleCall_1_0() { return cVARParserRuleCall_1_0; }
		
		//vars+=ID
		public Assignment getVarsAssignment_1_1() { return cVarsAssignment_1_1; }
		
		//ID
		public RuleCall getVarsIDTerminalRuleCall_1_1_0() { return cVarsIDTerminalRuleCall_1_1_0; }
		
		//("," vars+=ID)*
		public Group getGroup_1_2() { return cGroup_1_2; }
		
		//","
		public Keyword getCommaKeyword_1_2_0() { return cCommaKeyword_1_2_0; }
		
		//vars+=ID
		public Assignment getVarsAssignment_1_2_1() { return cVarsAssignment_1_2_1; }
		
		//ID
		public RuleCall getVarsIDTerminalRuleCall_1_2_1_0() { return cVarsIDTerminalRuleCall_1_2_1_0; }
		
		//TYPE
		public RuleCall getTYPEParserRuleCall_1_3() { return cTYPEParserRuleCall_1_3; }
		
		//("=" atrb+=ID ("," atrb+=ID)*)?
		public Group getGroup_1_4() { return cGroup_1_4; }
		
		//"="
		public Keyword getEqualsSignKeyword_1_4_0() { return cEqualsSignKeyword_1_4_0; }
		
		//atrb+=ID
		public Assignment getAtrbAssignment_1_4_1() { return cAtrbAssignment_1_4_1; }
		
		//ID
		public RuleCall getAtrbIDTerminalRuleCall_1_4_1_0() { return cAtrbIDTerminalRuleCall_1_4_1_0; }
		
		//("," atrb+=ID)*
		public Group getGroup_1_4_2() { return cGroup_1_4_2; }
		
		//","
		public Keyword getCommaKeyword_1_4_2_0() { return cCommaKeyword_1_4_2_0; }
		
		//atrb+=ID
		public Assignment getAtrbAssignment_1_4_2_1() { return cAtrbAssignment_1_4_2_1; }
		
		//ID
		public RuleCall getAtrbIDTerminalRuleCall_1_4_2_1_0() { return cAtrbIDTerminalRuleCall_1_4_2_1_0; }
	}
	public class DecVarsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.go.Go.DecVars");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cVarsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cVarsIDTerminalRuleCall_0_0 = (RuleCall)cVarsAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cVarsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cVarsIDTerminalRuleCall_1_1_0 = (RuleCall)cVarsAssignment_1_1.eContents().get(0);
		private final Keyword cColonEqualsSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cAtrbAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cAtrbIDTerminalRuleCall_3_0 = (RuleCall)cAtrbAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cCommaKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cAtrbAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cAtrbIDTerminalRuleCall_4_1_0 = (RuleCall)cAtrbAssignment_4_1.eContents().get(0);
		
		//DecVars:
		//	vars+=ID ("," vars+=ID)* ":=" atrb+=ID ("," atrb+=ID)*;
		@Override public ParserRule getRule() { return rule; }
		
		//vars+=ID ("," vars+=ID)* ":=" atrb+=ID ("," atrb+=ID)*
		public Group getGroup() { return cGroup; }
		
		//vars+=ID
		public Assignment getVarsAssignment_0() { return cVarsAssignment_0; }
		
		//ID
		public RuleCall getVarsIDTerminalRuleCall_0_0() { return cVarsIDTerminalRuleCall_0_0; }
		
		//("," vars+=ID)*
		public Group getGroup_1() { return cGroup_1; }
		
		//","
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }
		
		//vars+=ID
		public Assignment getVarsAssignment_1_1() { return cVarsAssignment_1_1; }
		
		//ID
		public RuleCall getVarsIDTerminalRuleCall_1_1_0() { return cVarsIDTerminalRuleCall_1_1_0; }
		
		//":="
		public Keyword getColonEqualsSignKeyword_2() { return cColonEqualsSignKeyword_2; }
		
		//atrb+=ID
		public Assignment getAtrbAssignment_3() { return cAtrbAssignment_3; }
		
		//ID
		public RuleCall getAtrbIDTerminalRuleCall_3_0() { return cAtrbIDTerminalRuleCall_3_0; }
		
		//("," atrb+=ID)*
		public Group getGroup_4() { return cGroup_4; }
		
		//","
		public Keyword getCommaKeyword_4_0() { return cCommaKeyword_4_0; }
		
		//atrb+=ID
		public Assignment getAtrbAssignment_4_1() { return cAtrbAssignment_4_1; }
		
		//ID
		public RuleCall getAtrbIDTerminalRuleCall_4_1_0() { return cAtrbIDTerminalRuleCall_4_1_0; }
	}
	public class OperationsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.go.Go.Operations");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSumParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cSubtractionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cMultiplicationParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cDivisionParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cINTTerminalRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		
		//Operations INT:
		//	Sum | Subtraction | Multiplication | Division | INT;
		@Override public ParserRule getRule() { return rule; }
		
		//Sum | Subtraction | Multiplication | Division | INT
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Sum
		public RuleCall getSumParserRuleCall_0() { return cSumParserRuleCall_0; }
		
		//Subtraction
		public RuleCall getSubtractionParserRuleCall_1() { return cSubtractionParserRuleCall_1; }
		
		//Multiplication
		public RuleCall getMultiplicationParserRuleCall_2() { return cMultiplicationParserRuleCall_2; }
		
		//Division
		public RuleCall getDivisionParserRuleCall_3() { return cDivisionParserRuleCall_3; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_4() { return cINTTerminalRuleCall_4; }
	}
	public class DoubleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.go.Go.Double");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cFullStopKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//Double:
		//	INT "." INT;
		@Override public ParserRule getRule() { return rule; }
		
		//INT "." INT
		public Group getGroup() { return cGroup; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_0() { return cINTTerminalRuleCall_0; }
		
		//"."
		public Keyword getFullStopKeyword_1() { return cFullStopKeyword_1; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_2() { return cINTTerminalRuleCall_2; }
	}
	public class SumElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.go.Go.Sum");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final RuleCall cPlusTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//Sum INT:
		//	INT Plus INT;
		@Override public ParserRule getRule() { return rule; }
		
		//INT Plus INT
		public Group getGroup() { return cGroup; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_0() { return cINTTerminalRuleCall_0; }
		
		//Plus
		public RuleCall getPlusTerminalRuleCall_1() { return cPlusTerminalRuleCall_1; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_2() { return cINTTerminalRuleCall_2; }
	}
	public class SubtractionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.go.Go.Subtraction");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final RuleCall cMinusTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//Subtraction INT:
		//	INT Minus INT;
		@Override public ParserRule getRule() { return rule; }
		
		//INT Minus INT
		public Group getGroup() { return cGroup; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_0() { return cINTTerminalRuleCall_0; }
		
		//Minus
		public RuleCall getMinusTerminalRuleCall_1() { return cMinusTerminalRuleCall_1; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_2() { return cINTTerminalRuleCall_2; }
	}
	public class MultiplicationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.go.Go.Multiplication");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final RuleCall cAstericsTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//Multiplication INT:
		//	INT Asterics INT;
		@Override public ParserRule getRule() { return rule; }
		
		//INT Asterics INT
		public Group getGroup() { return cGroup; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_0() { return cINTTerminalRuleCall_0; }
		
		//Asterics
		public RuleCall getAstericsTerminalRuleCall_1() { return cAstericsTerminalRuleCall_1; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_2() { return cINTTerminalRuleCall_2; }
	}
	public class DivisionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.go.Go.Division");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final RuleCall cBarTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//Division INT:
		//	INT Bar INT;
		@Override public ParserRule getRule() { return rule; }
		
		//INT Bar INT
		public Group getGroup() { return cGroup; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_0() { return cINTTerminalRuleCall_0; }
		
		//Bar
		public RuleCall getBarTerminalRuleCall_1() { return cBarTerminalRuleCall_1; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_2() { return cINTTerminalRuleCall_2; }
	}
	public class ConditionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.go.Go.Condition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cIfAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cIfIfConditionParserRuleCall_0_0 = (RuleCall)cIfAssignment_0.eContents().get(0);
		private final Assignment cElseifAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cElseifElseIfConditionParserRuleCall_1_0 = (RuleCall)cElseifAssignment_1.eContents().get(0);
		private final Assignment cElseAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cElseElseConditionParserRuleCall_2_0 = (RuleCall)cElseAssignment_2.eContents().get(0);
		
		//Condition:
		//	if=IfCondition elseif=ElseIfCondition* else=ElseCondition?;
		@Override public ParserRule getRule() { return rule; }
		
		//if=IfCondition elseif=ElseIfCondition* else=ElseCondition?
		public Group getGroup() { return cGroup; }
		
		//if=IfCondition
		public Assignment getIfAssignment_0() { return cIfAssignment_0; }
		
		//IfCondition
		public RuleCall getIfIfConditionParserRuleCall_0_0() { return cIfIfConditionParserRuleCall_0_0; }
		
		//elseif=ElseIfCondition*
		public Assignment getElseifAssignment_1() { return cElseifAssignment_1; }
		
		//ElseIfCondition
		public RuleCall getElseifElseIfConditionParserRuleCall_1_0() { return cElseifElseIfConditionParserRuleCall_1_0; }
		
		//else=ElseCondition?
		public Assignment getElseAssignment_2() { return cElseAssignment_2; }
		
		//ElseCondition
		public RuleCall getElseElseConditionParserRuleCall_2_0() { return cElseElseConditionParserRuleCall_2_0; }
	}
	public class IfConditionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.go.Go.IfCondition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIFParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Assignment cCondAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cCondExpressionParserRuleCall_1_0 = (RuleCall)cCondAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cThenAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cThenGreetingParserRuleCall_3_0 = (RuleCall)cThenAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//IfCondition:
		//	IF cond=Expression "{" then=Greeting* "}";
		@Override public ParserRule getRule() { return rule; }
		
		//IF cond=Expression "{" then=Greeting* "}"
		public Group getGroup() { return cGroup; }
		
		//IF
		public RuleCall getIFParserRuleCall_0() { return cIFParserRuleCall_0; }
		
		//cond=Expression
		public Assignment getCondAssignment_1() { return cCondAssignment_1; }
		
		//Expression
		public RuleCall getCondExpressionParserRuleCall_1_0() { return cCondExpressionParserRuleCall_1_0; }
		
		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//then=Greeting*
		public Assignment getThenAssignment_3() { return cThenAssignment_3; }
		
		//Greeting
		public RuleCall getThenGreetingParserRuleCall_3_0() { return cThenGreetingParserRuleCall_3_0; }
		
		//"}"
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class ElseIfConditionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.go.Go.ElseIfCondition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cELSEParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final RuleCall cIfConditionParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//ElseIfCondition:
		//	=> ELSE IfCondition;
		@Override public ParserRule getRule() { return rule; }
		
		//=> ELSE IfCondition
		public Group getGroup() { return cGroup; }
		
		//=> ELSE
		public RuleCall getELSEParserRuleCall_0() { return cELSEParserRuleCall_0; }
		
		//IfCondition
		public RuleCall getIfConditionParserRuleCall_1() { return cIfConditionParserRuleCall_1; }
	}
	public class ElseConditionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.go.Go.ElseCondition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cELSEParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cThenAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cThenGreetingParserRuleCall_2_0 = (RuleCall)cThenAssignment_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//ElseCondition:
		//	=> ELSE "{" then=Greeting* "}";
		@Override public ParserRule getRule() { return rule; }
		
		//=> ELSE "{" then=Greeting* "}"
		public Group getGroup() { return cGroup; }
		
		//=> ELSE
		public RuleCall getELSEParserRuleCall_0() { return cELSEParserRuleCall_0; }
		
		//"{"
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//then=Greeting*
		public Assignment getThenAssignment_2() { return cThenAssignment_2; }
		
		//Greeting
		public RuleCall getThenGreetingParserRuleCall_2_0() { return cThenGreetingParserRuleCall_2_0; }
		
		//"}"
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}
	public class ExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.go.Go.Expression");
		private final RuleCall cOrExpressionParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//Expression:
		//	OrExpression;
		@Override public ParserRule getRule() { return rule; }
		
		//OrExpression
		public RuleCall getOrExpressionParserRuleCall() { return cOrExpressionParserRuleCall; }
	}
	public class OrExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.go.Go.OrExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cAndExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cOrExpressionLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cVerticalLineVerticalLineKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightAndExpressionParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//OrExpression Expression:
		//	AndExpression ({OrExpression.left=current} "||" right=AndExpression)*;
		@Override public ParserRule getRule() { return rule; }
		
		//AndExpression ({OrExpression.left=current} "||" right=AndExpression)*
		public Group getGroup() { return cGroup; }
		
		//AndExpression
		public RuleCall getAndExpressionParserRuleCall_0() { return cAndExpressionParserRuleCall_0; }
		
		//({OrExpression.left=current} "||" right=AndExpression)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{OrExpression.left=current}
		public Action getOrExpressionLeftAction_1_0() { return cOrExpressionLeftAction_1_0; }
		
		//"||"
		public Keyword getVerticalLineVerticalLineKeyword_1_1() { return cVerticalLineVerticalLineKeyword_1_1; }
		
		//right=AndExpression
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//AndExpression
		public RuleCall getRightAndExpressionParserRuleCall_1_2_0() { return cRightAndExpressionParserRuleCall_1_2_0; }
	}
	public class AndExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.go.Go.AndExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cComparisonExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cAndExpressionLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cAmpersandAmpersandKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightComparisonExpressionParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//AndExpression Expression:
		//	ComparisonExpression ({AndExpression.left=current} "&&" right=ComparisonExpression)*;
		@Override public ParserRule getRule() { return rule; }
		
		//ComparisonExpression ({AndExpression.left=current} "&&" right=ComparisonExpression)*
		public Group getGroup() { return cGroup; }
		
		//ComparisonExpression
		public RuleCall getComparisonExpressionParserRuleCall_0() { return cComparisonExpressionParserRuleCall_0; }
		
		//({AndExpression.left=current} "&&" right=ComparisonExpression)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{AndExpression.left=current}
		public Action getAndExpressionLeftAction_1_0() { return cAndExpressionLeftAction_1_0; }
		
		//"&&"
		public Keyword getAmpersandAmpersandKeyword_1_1() { return cAmpersandAmpersandKeyword_1_1; }
		
		//right=ComparisonExpression
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//ComparisonExpression
		public RuleCall getRightComparisonExpressionParserRuleCall_1_2_0() { return cRightComparisonExpressionParserRuleCall_1_2_0; }
	}
	public class ComparisonExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.go.Go.ComparisonExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cPrimaryExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cComparisonExpressionLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOperatorAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Alternatives cOperatorAlternatives_1_1_0 = (Alternatives)cOperatorAssignment_1_1.eContents().get(0);
		private final Keyword cOperatorLessThanSignKeyword_1_1_0_0 = (Keyword)cOperatorAlternatives_1_1_0.eContents().get(0);
		private final Keyword cOperatorLessThanSignEqualsSignKeyword_1_1_0_1 = (Keyword)cOperatorAlternatives_1_1_0.eContents().get(1);
		private final Keyword cOperatorEqualsSignEqualsSignKeyword_1_1_0_2 = (Keyword)cOperatorAlternatives_1_1_0.eContents().get(2);
		private final Keyword cOperatorGreaterThanSignEqualsSignKeyword_1_1_0_3 = (Keyword)cOperatorAlternatives_1_1_0.eContents().get(3);
		private final Keyword cOperatorGreaterThanSignKeyword_1_1_0_4 = (Keyword)cOperatorAlternatives_1_1_0.eContents().get(4);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightPrimaryExpressionParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//ComparisonExpression Expression:
		//	PrimaryExpression ({ComparisonExpression.left=current} operator=("<" | "<=" | "==" | ">=" | ">")
		//	right=PrimaryExpression)*;
		@Override public ParserRule getRule() { return rule; }
		
		//PrimaryExpression ({ComparisonExpression.left=current} operator=("<" | "<=" | "==" | ">=" | ">")
		//right=PrimaryExpression)*
		public Group getGroup() { return cGroup; }
		
		//PrimaryExpression
		public RuleCall getPrimaryExpressionParserRuleCall_0() { return cPrimaryExpressionParserRuleCall_0; }
		
		//({ComparisonExpression.left=current} operator=("<" | "<=" | "==" | ">=" | ">") right=PrimaryExpression)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{ComparisonExpression.left=current}
		public Action getComparisonExpressionLeftAction_1_0() { return cComparisonExpressionLeftAction_1_0; }
		
		//operator=("<" | "<=" | "==" | ">=" | ">")
		public Assignment getOperatorAssignment_1_1() { return cOperatorAssignment_1_1; }
		
		//("<" | "<=" | "==" | ">=" | ">")
		public Alternatives getOperatorAlternatives_1_1_0() { return cOperatorAlternatives_1_1_0; }
		
		//"<"
		public Keyword getOperatorLessThanSignKeyword_1_1_0_0() { return cOperatorLessThanSignKeyword_1_1_0_0; }
		
		//"<="
		public Keyword getOperatorLessThanSignEqualsSignKeyword_1_1_0_1() { return cOperatorLessThanSignEqualsSignKeyword_1_1_0_1; }
		
		//"=="
		public Keyword getOperatorEqualsSignEqualsSignKeyword_1_1_0_2() { return cOperatorEqualsSignEqualsSignKeyword_1_1_0_2; }
		
		//">="
		public Keyword getOperatorGreaterThanSignEqualsSignKeyword_1_1_0_3() { return cOperatorGreaterThanSignEqualsSignKeyword_1_1_0_3; }
		
		//">"
		public Keyword getOperatorGreaterThanSignKeyword_1_1_0_4() { return cOperatorGreaterThanSignKeyword_1_1_0_4; }
		
		//right=PrimaryExpression
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//PrimaryExpression
		public RuleCall getRightPrimaryExpressionParserRuleCall_1_2_0() { return cRightPrimaryExpressionParserRuleCall_1_2_0; }
	}
	public class PrimaryExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.go.Go.PrimaryExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final RuleCall cExpressionParserRuleCall_0_1 = (RuleCall)cGroup_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_0_2 = (Keyword)cGroup_0.eContents().get(2);
		private final RuleCall cLiteralParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//PrimaryExpression Expression:
		//	"(" Expression ")" | Literal;
		@Override public ParserRule getRule() { return rule; }
		
		//"(" Expression ")" | Literal
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//"(" Expression ")"
		public Group getGroup_0() { return cGroup_0; }
		
		//"("
		public Keyword getLeftParenthesisKeyword_0_0() { return cLeftParenthesisKeyword_0_0; }
		
		//Expression
		public RuleCall getExpressionParserRuleCall_0_1() { return cExpressionParserRuleCall_0_1; }
		
		//")"
		public Keyword getRightParenthesisKeyword_0_2() { return cRightParenthesisKeyword_0_2; }
		
		//Literal
		public RuleCall getLiteralParserRuleCall_1() { return cLiteralParserRuleCall_1; }
	}
	public class LiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.go.Go.Literal");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cLiteralAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Assignment cValueAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final Keyword cValueTrueKeyword_0_1_0 = (Keyword)cValueAssignment_0_1.eContents().get(0);
		private final Keyword cFalseKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final RuleCall cOperationsParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//Literal Expression:
		//	{Literal} value="true" | "false" | Operations;
		@Override public ParserRule getRule() { return rule; }
		
		//{Literal} value="true" | "false" | Operations
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//{Literal} value="true"
		public Group getGroup_0() { return cGroup_0; }
		
		//{Literal}
		public Action getLiteralAction_0_0() { return cLiteralAction_0_0; }
		
		//value="true"
		public Assignment getValueAssignment_0_1() { return cValueAssignment_0_1; }
		
		//"true"
		public Keyword getValueTrueKeyword_0_1_0() { return cValueTrueKeyword_0_1_0; }
		
		//"false"
		public Keyword getFalseKeyword_1() { return cFalseKeyword_1; }
		
		//Operations
		public RuleCall getOperationsParserRuleCall_2() { return cOperationsParserRuleCall_2; }
	}
	public class DecFuncElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.go.Go.DecFunc");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cFUNCParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cParameterAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cParameterIDTerminalRuleCall_3_0 = (RuleCall)cParameterAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cCommaKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cParameterAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cParameterIDTerminalRuleCall_4_1_0 = (RuleCall)cParameterAssignment_4_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Keyword cLeftCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cArgsAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cArgsGreetingParserRuleCall_7_0 = (RuleCall)cArgsAssignment_7.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_8 = (Keyword)cGroup.eContents().get(8);
		
		//DecFunc:
		//	FUNC name=ID "(" parameter=ID? ("," parameter=ID)* ")" "{" args+=Greeting* "}";
		@Override public ParserRule getRule() { return rule; }
		
		//FUNC name=ID "(" parameter=ID? ("," parameter=ID)* ")" "{" args+=Greeting* "}"
		public Group getGroup() { return cGroup; }
		
		//FUNC
		public RuleCall getFUNCParserRuleCall_0() { return cFUNCParserRuleCall_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//"("
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }
		
		//parameter=ID?
		public Assignment getParameterAssignment_3() { return cParameterAssignment_3; }
		
		//ID
		public RuleCall getParameterIDTerminalRuleCall_3_0() { return cParameterIDTerminalRuleCall_3_0; }
		
		//("," parameter=ID)*
		public Group getGroup_4() { return cGroup_4; }
		
		//","
		public Keyword getCommaKeyword_4_0() { return cCommaKeyword_4_0; }
		
		//parameter=ID
		public Assignment getParameterAssignment_4_1() { return cParameterAssignment_4_1; }
		
		//ID
		public RuleCall getParameterIDTerminalRuleCall_4_1_0() { return cParameterIDTerminalRuleCall_4_1_0; }
		
		//")"
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }
		
		//"{"
		public Keyword getLeftCurlyBracketKeyword_6() { return cLeftCurlyBracketKeyword_6; }
		
		//args+=Greeting*
		public Assignment getArgsAssignment_7() { return cArgsAssignment_7; }
		
		//Greeting
		public RuleCall getArgsGreetingParserRuleCall_7_0() { return cArgsGreetingParserRuleCall_7_0; }
		
		//"}"
		public Keyword getRightCurlyBracketKeyword_8() { return cRightCurlyBracketKeyword_8; }
	}
	public class TerminalsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.go.Go.Terminals");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cBREAKParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cCASEParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cCHANParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cCONSTParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cCONTINUEParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cELSEParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cIFParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		private final RuleCall cFORParserRuleCall_7 = (RuleCall)cAlternatives.eContents().get(7);
		private final RuleCall cFUNCParserRuleCall_8 = (RuleCall)cAlternatives.eContents().get(8);
		private final RuleCall cIMPORTParserRuleCall_9 = (RuleCall)cAlternatives.eContents().get(9);
		private final RuleCall cRETURNParserRuleCall_10 = (RuleCall)cAlternatives.eContents().get(10);
		private final RuleCall cPACKAGEParserRuleCall_11 = (RuleCall)cAlternatives.eContents().get(11);
		private final RuleCall cRANGEParserRuleCall_12 = (RuleCall)cAlternatives.eContents().get(12);
		
		//Terminals:
		//	BREAK | CASE | CHAN | CONST | CONTINUE | ELSE | IF | FOR | FUNC | IMPORT | RETURN | PACKAGE | RANGE;
		@Override public ParserRule getRule() { return rule; }
		
		//BREAK | CASE | CHAN | CONST | CONTINUE | ELSE | IF | FOR | FUNC | IMPORT | RETURN | PACKAGE | RANGE
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//BREAK
		public RuleCall getBREAKParserRuleCall_0() { return cBREAKParserRuleCall_0; }
		
		//CASE
		public RuleCall getCASEParserRuleCall_1() { return cCASEParserRuleCall_1; }
		
		//CHAN
		public RuleCall getCHANParserRuleCall_2() { return cCHANParserRuleCall_2; }
		
		//CONST
		public RuleCall getCONSTParserRuleCall_3() { return cCONSTParserRuleCall_3; }
		
		//CONTINUE
		public RuleCall getCONTINUEParserRuleCall_4() { return cCONTINUEParserRuleCall_4; }
		
		//ELSE
		public RuleCall getELSEParserRuleCall_5() { return cELSEParserRuleCall_5; }
		
		//IF
		public RuleCall getIFParserRuleCall_6() { return cIFParserRuleCall_6; }
		
		//FOR
		public RuleCall getFORParserRuleCall_7() { return cFORParserRuleCall_7; }
		
		//FUNC
		public RuleCall getFUNCParserRuleCall_8() { return cFUNCParserRuleCall_8; }
		
		//IMPORT
		public RuleCall getIMPORTParserRuleCall_9() { return cIMPORTParserRuleCall_9; }
		
		//RETURN
		public RuleCall getRETURNParserRuleCall_10() { return cRETURNParserRuleCall_10; }
		
		//PACKAGE
		public RuleCall getPACKAGEParserRuleCall_11() { return cPACKAGEParserRuleCall_11; }
		
		//RANGE
		public RuleCall getRANGEParserRuleCall_12() { return cRANGEParserRuleCall_12; }
	}
	public class BREAKElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.go.Go.BREAK");
		private final Keyword cBreakKeyword = (Keyword)rule.eContents().get(1);
		
		//BREAK:
		//	"break";
		@Override public ParserRule getRule() { return rule; }
		
		//"break"
		public Keyword getBreakKeyword() { return cBreakKeyword; }
	}
	public class CASEElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.go.Go.CASE");
		private final Keyword cCaseKeyword = (Keyword)rule.eContents().get(1);
		
		//CASE:
		//	"case";
		@Override public ParserRule getRule() { return rule; }
		
		//"case"
		public Keyword getCaseKeyword() { return cCaseKeyword; }
	}
	public class CHANElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.go.Go.CHAN");
		private final Keyword cChanKeyword = (Keyword)rule.eContents().get(1);
		
		//CHAN:
		//	"chan";
		@Override public ParserRule getRule() { return rule; }
		
		//"chan"
		public Keyword getChanKeyword() { return cChanKeyword; }
	}
	public class CONSTElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.go.Go.CONST");
		private final Keyword cConstKeyword = (Keyword)rule.eContents().get(1);
		
		//CONST:
		//	"const";
		@Override public ParserRule getRule() { return rule; }
		
		//"const"
		public Keyword getConstKeyword() { return cConstKeyword; }
	}
	public class CONTINUEElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.go.Go.CONTINUE");
		private final Keyword cContinueKeyword = (Keyword)rule.eContents().get(1);
		
		//CONTINUE:
		//	"continue";
		@Override public ParserRule getRule() { return rule; }
		
		//"continue"
		public Keyword getContinueKeyword() { return cContinueKeyword; }
	}
	public class ELSEElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.go.Go.ELSE");
		private final Keyword cElseKeyword = (Keyword)rule.eContents().get(1);
		
		//ELSE:
		//	"else";
		@Override public ParserRule getRule() { return rule; }
		
		//"else"
		public Keyword getElseKeyword() { return cElseKeyword; }
	}
	public class FORElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.go.Go.FOR");
		private final Keyword cForKeyword = (Keyword)rule.eContents().get(1);
		
		//FOR:
		//	"for";
		@Override public ParserRule getRule() { return rule; }
		
		//"for"
		public Keyword getForKeyword() { return cForKeyword; }
	}
	public class FUNCElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.go.Go.FUNC");
		private final Keyword cFuncKeyword = (Keyword)rule.eContents().get(1);
		
		//FUNC:
		//	"func";
		@Override public ParserRule getRule() { return rule; }
		
		//"func"
		public Keyword getFuncKeyword() { return cFuncKeyword; }
	}
	public class IFElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.go.Go.IF");
		private final Keyword cIfKeyword = (Keyword)rule.eContents().get(1);
		
		//IF:
		//	"if";
		@Override public ParserRule getRule() { return rule; }
		
		//"if"
		public Keyword getIfKeyword() { return cIfKeyword; }
	}
	public class IMPORTElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.go.Go.IMPORT");
		private final Keyword cImportKeyword = (Keyword)rule.eContents().get(1);
		
		//IMPORT:
		//	"import";
		@Override public ParserRule getRule() { return rule; }
		
		//"import"
		public Keyword getImportKeyword() { return cImportKeyword; }
	}
	public class RETURNElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.go.Go.RETURN");
		private final Keyword cReturnKeyword = (Keyword)rule.eContents().get(1);
		
		//RETURN:
		//	"return";
		@Override public ParserRule getRule() { return rule; }
		
		//"return"
		public Keyword getReturnKeyword() { return cReturnKeyword; }
	}
	public class PACKAGEElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.go.Go.PACKAGE");
		private final Keyword cPackageKeyword = (Keyword)rule.eContents().get(1);
		
		//PACKAGE:
		//	"package";
		@Override public ParserRule getRule() { return rule; }
		
		//"package"
		public Keyword getPackageKeyword() { return cPackageKeyword; }
	}
	public class TYPEElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.go.Go.TYPE");
		private final Keyword cTypeKeyword = (Keyword)rule.eContents().get(1);
		
		//TYPE:
		//	"type";
		@Override public ParserRule getRule() { return rule; }
		
		//"type"
		public Keyword getTypeKeyword() { return cTypeKeyword; }
	}
	public class VARElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.go.Go.VAR");
		private final Keyword cVarKeyword = (Keyword)rule.eContents().get(1);
		
		//VAR:
		//	"var";
		@Override public ParserRule getRule() { return rule; }
		
		//"var"
		public Keyword getVarKeyword() { return cVarKeyword; }
	}
	public class SWITCHElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.go.Go.SWITCH");
		private final Keyword cSwitchKeyword = (Keyword)rule.eContents().get(1);
		
		//SWITCH:
		//	"switch";
		@Override public ParserRule getRule() { return rule; }
		
		//"switch"
		public Keyword getSwitchKeyword() { return cSwitchKeyword; }
	}
	public class STRUCTElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.go.Go.STRUCT");
		private final Keyword cStructKeyword = (Keyword)rule.eContents().get(1);
		
		//STRUCT:
		//	"struct";
		@Override public ParserRule getRule() { return rule; }
		
		//"struct"
		public Keyword getStructKeyword() { return cStructKeyword; }
	}
	public class RANGEElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.go.Go.RANGE");
		private final Keyword cRangeKeyword = (Keyword)rule.eContents().get(1);
		
		//RANGE:
		//	"range";
		@Override public ParserRule getRule() { return rule; }
		
		//"range"
		public Keyword getRangeKeyword() { return cRangeKeyword; }
	}
	public class EntityElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.go.Go.Entity");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPrintKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final RuleCall cSTRINGTerminalRuleCall_2_0 = (RuleCall)cAlternatives_2.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_2_1 = (RuleCall)cAlternatives_2.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Entity:
		//	'print' '(' (STRING | INT+) ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'print' '(' (STRING | INT+) ')'
		public Group getGroup() { return cGroup; }
		
		//'print'
		public Keyword getPrintKeyword_0() { return cPrintKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//STRING | INT+
		public Alternatives getAlternatives_2() { return cAlternatives_2; }
		
		//STRING
		public RuleCall getSTRINGTerminalRuleCall_2_0() { return cSTRINGTerminalRuleCall_2_0; }
		
		//INT+
		public RuleCall getINTTerminalRuleCall_2_1() { return cINTTerminalRuleCall_2_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}
	public class DataTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.go.Go.DataType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDatatypeKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//DataType:
		//	'datatype' name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//'datatype' name=ID
		public Group getGroup() { return cGroup; }
		
		//'datatype'
		public Keyword getDatatypeKeyword_0() { return cDatatypeKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
	}
	
	
	private final GoElements pGo;
	private final GreetingElements pGreeting;
	private final DecVarElements pDecVar;
	private final DecVarsElements pDecVars;
	private final OperationsElements pOperations;
	private final DoubleElements pDouble;
	private final SumElements pSum;
	private final SubtractionElements pSubtraction;
	private final MultiplicationElements pMultiplication;
	private final DivisionElements pDivision;
	private final TerminalRule tBar;
	private final TerminalRule tAsterics;
	private final TerminalRule tMinus;
	private final TerminalRule tPlus;
	private final TerminalRule tEOL;
	private final TerminalRule tCOMMENTS;
	private final TerminalRule tML_COMMENT;
	private final TerminalRule tSL_COMMENT;
	private final TerminalRule tNEWLINE;
	private final ConditionElements pCondition;
	private final IfConditionElements pIfCondition;
	private final ElseIfConditionElements pElseIfCondition;
	private final ElseConditionElements pElseCondition;
	private final ExpressionElements pExpression;
	private final OrExpressionElements pOrExpression;
	private final AndExpressionElements pAndExpression;
	private final ComparisonExpressionElements pComparisonExpression;
	private final PrimaryExpressionElements pPrimaryExpression;
	private final LiteralElements pLiteral;
	private final DecFuncElements pDecFunc;
	private final TerminalsElements pTerminals;
	private final BREAKElements pBREAK;
	private final CASEElements pCASE;
	private final CHANElements pCHAN;
	private final CONSTElements pCONST;
	private final CONTINUEElements pCONTINUE;
	private final ELSEElements pELSE;
	private final FORElements pFOR;
	private final FUNCElements pFUNC;
	private final IFElements pIF;
	private final IMPORTElements pIMPORT;
	private final RETURNElements pRETURN;
	private final PACKAGEElements pPACKAGE;
	private final TYPEElements pTYPE;
	private final VARElements pVAR;
	private final SWITCHElements pSWITCH;
	private final STRUCTElements pSTRUCT;
	private final RANGEElements pRANGE;
	private final EntityElements pEntity;
	private final DataTypeElements pDataType;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public GoGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pGo = new GoElements();
		this.pGreeting = new GreetingElements();
		this.pDecVar = new DecVarElements();
		this.pDecVars = new DecVarsElements();
		this.pOperations = new OperationsElements();
		this.pDouble = new DoubleElements();
		this.pSum = new SumElements();
		this.pSubtraction = new SubtractionElements();
		this.pMultiplication = new MultiplicationElements();
		this.pDivision = new DivisionElements();
		this.tBar = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.go.Go.Bar");
		this.tAsterics = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.go.Go.Asterics");
		this.tMinus = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.go.Go.Minus");
		this.tPlus = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.go.Go.Plus");
		this.tEOL = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.go.Go.EOL");
		this.tCOMMENTS = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.go.Go.COMMENTS");
		this.tML_COMMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.go.Go.ML_COMMENT");
		this.tSL_COMMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.go.Go.SL_COMMENT");
		this.tNEWLINE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.go.Go.NEWLINE");
		this.pCondition = new ConditionElements();
		this.pIfCondition = new IfConditionElements();
		this.pElseIfCondition = new ElseIfConditionElements();
		this.pElseCondition = new ElseConditionElements();
		this.pExpression = new ExpressionElements();
		this.pOrExpression = new OrExpressionElements();
		this.pAndExpression = new AndExpressionElements();
		this.pComparisonExpression = new ComparisonExpressionElements();
		this.pPrimaryExpression = new PrimaryExpressionElements();
		this.pLiteral = new LiteralElements();
		this.pDecFunc = new DecFuncElements();
		this.pTerminals = new TerminalsElements();
		this.pBREAK = new BREAKElements();
		this.pCASE = new CASEElements();
		this.pCHAN = new CHANElements();
		this.pCONST = new CONSTElements();
		this.pCONTINUE = new CONTINUEElements();
		this.pELSE = new ELSEElements();
		this.pFOR = new FORElements();
		this.pFUNC = new FUNCElements();
		this.pIF = new IFElements();
		this.pIMPORT = new IMPORTElements();
		this.pRETURN = new RETURNElements();
		this.pPACKAGE = new PACKAGEElements();
		this.pTYPE = new TYPEElements();
		this.pVAR = new VARElements();
		this.pSWITCH = new SWITCHElements();
		this.pSTRUCT = new STRUCTElements();
		this.pRANGE = new RANGEElements();
		this.pEntity = new EntityElements();
		this.pDataType = new DataTypeElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.xtext.go.Go".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Go:
	//	elements+=Greeting*;
	public GoElements getGoAccess() {
		return pGo;
	}
	
	public ParserRule getGoRule() {
		return getGoAccess().getRule();
	}
	
	//Greeting:
	//	DecVar | DataType | Entity | DecFunc | EOL | Condition | Operations;
	public GreetingElements getGreetingAccess() {
		return pGreeting;
	}
	
	public ParserRule getGreetingRule() {
		return getGreetingAccess().getRule();
	}
	
	//DecVar:
	//	DecVars | VAR vars+=ID ("," vars+=ID)* TYPE ("=" atrb+=ID ("," atrb+=ID)*)?;
	public DecVarElements getDecVarAccess() {
		return pDecVar;
	}
	
	public ParserRule getDecVarRule() {
		return getDecVarAccess().getRule();
	}
	
	//DecVars:
	//	vars+=ID ("," vars+=ID)* ":=" atrb+=ID ("," atrb+=ID)*;
	public DecVarsElements getDecVarsAccess() {
		return pDecVars;
	}
	
	public ParserRule getDecVarsRule() {
		return getDecVarsAccess().getRule();
	}
	
	//Operations INT:
	//	Sum | Subtraction | Multiplication | Division | INT;
	public OperationsElements getOperationsAccess() {
		return pOperations;
	}
	
	public ParserRule getOperationsRule() {
		return getOperationsAccess().getRule();
	}
	
	//Double:
	//	INT "." INT;
	public DoubleElements getDoubleAccess() {
		return pDouble;
	}
	
	public ParserRule getDoubleRule() {
		return getDoubleAccess().getRule();
	}
	
	//Sum INT:
	//	INT Plus INT;
	public SumElements getSumAccess() {
		return pSum;
	}
	
	public ParserRule getSumRule() {
		return getSumAccess().getRule();
	}
	
	//Subtraction INT:
	//	INT Minus INT;
	public SubtractionElements getSubtractionAccess() {
		return pSubtraction;
	}
	
	public ParserRule getSubtractionRule() {
		return getSubtractionAccess().getRule();
	}
	
	//Multiplication INT:
	//	INT Asterics INT;
	public MultiplicationElements getMultiplicationAccess() {
		return pMultiplication;
	}
	
	public ParserRule getMultiplicationRule() {
		return getMultiplicationAccess().getRule();
	}
	
	//Division INT:
	//	INT Bar INT;
	public DivisionElements getDivisionAccess() {
		return pDivision;
	}
	
	public ParserRule getDivisionRule() {
		return getDivisionAccess().getRule();
	}
	
	//terminal Bar:
	//	"/";
	public TerminalRule getBarRule() {
		return tBar;
	}
	
	//terminal Asterics:
	//	"*";
	public TerminalRule getAstericsRule() {
		return tAsterics;
	}
	
	//terminal Minus:
	//	"-";
	public TerminalRule getMinusRule() {
		return tMinus;
	}
	
	//terminal Plus:
	//	"+";
	public TerminalRule getPlusRule() {
		return tPlus;
	}
	
	//terminal EOL:
	//	NEWLINE | COMMENTS;
	public TerminalRule getEOLRule() {
		return tEOL;
	}
	
	//terminal COMMENTS:
	//	ML_COMMENT | SL_COMMENT;
	public TerminalRule getCOMMENTSRule() {
		return tCOMMENTS;
	}
	
	//terminal ML_COMMENT:
	//	"/*"->"*/";
	public TerminalRule getML_COMMENTRule() {
		return tML_COMMENT;
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return tSL_COMMENT;
	}
	
	//terminal NEWLINE:
	//	'\r'? '\n';
	public TerminalRule getNEWLINERule() {
		return tNEWLINE;
	}
	
	//Condition:
	//	if=IfCondition elseif=ElseIfCondition* else=ElseCondition?;
	public ConditionElements getConditionAccess() {
		return pCondition;
	}
	
	public ParserRule getConditionRule() {
		return getConditionAccess().getRule();
	}
	
	//IfCondition:
	//	IF cond=Expression "{" then=Greeting* "}";
	public IfConditionElements getIfConditionAccess() {
		return pIfCondition;
	}
	
	public ParserRule getIfConditionRule() {
		return getIfConditionAccess().getRule();
	}
	
	//ElseIfCondition:
	//	=> ELSE IfCondition;
	public ElseIfConditionElements getElseIfConditionAccess() {
		return pElseIfCondition;
	}
	
	public ParserRule getElseIfConditionRule() {
		return getElseIfConditionAccess().getRule();
	}
	
	//ElseCondition:
	//	=> ELSE "{" then=Greeting* "}";
	public ElseConditionElements getElseConditionAccess() {
		return pElseCondition;
	}
	
	public ParserRule getElseConditionRule() {
		return getElseConditionAccess().getRule();
	}
	
	//Expression:
	//	OrExpression;
	public ExpressionElements getExpressionAccess() {
		return pExpression;
	}
	
	public ParserRule getExpressionRule() {
		return getExpressionAccess().getRule();
	}
	
	//OrExpression Expression:
	//	AndExpression ({OrExpression.left=current} "||" right=AndExpression)*;
	public OrExpressionElements getOrExpressionAccess() {
		return pOrExpression;
	}
	
	public ParserRule getOrExpressionRule() {
		return getOrExpressionAccess().getRule();
	}
	
	//AndExpression Expression:
	//	ComparisonExpression ({AndExpression.left=current} "&&" right=ComparisonExpression)*;
	public AndExpressionElements getAndExpressionAccess() {
		return pAndExpression;
	}
	
	public ParserRule getAndExpressionRule() {
		return getAndExpressionAccess().getRule();
	}
	
	//ComparisonExpression Expression:
	//	PrimaryExpression ({ComparisonExpression.left=current} operator=("<" | "<=" | "==" | ">=" | ">")
	//	right=PrimaryExpression)*;
	public ComparisonExpressionElements getComparisonExpressionAccess() {
		return pComparisonExpression;
	}
	
	public ParserRule getComparisonExpressionRule() {
		return getComparisonExpressionAccess().getRule();
	}
	
	//PrimaryExpression Expression:
	//	"(" Expression ")" | Literal;
	public PrimaryExpressionElements getPrimaryExpressionAccess() {
		return pPrimaryExpression;
	}
	
	public ParserRule getPrimaryExpressionRule() {
		return getPrimaryExpressionAccess().getRule();
	}
	
	//Literal Expression:
	//	{Literal} value="true" | "false" | Operations;
	public LiteralElements getLiteralAccess() {
		return pLiteral;
	}
	
	public ParserRule getLiteralRule() {
		return getLiteralAccess().getRule();
	}
	
	//DecFunc:
	//	FUNC name=ID "(" parameter=ID? ("," parameter=ID)* ")" "{" args+=Greeting* "}";
	public DecFuncElements getDecFuncAccess() {
		return pDecFunc;
	}
	
	public ParserRule getDecFuncRule() {
		return getDecFuncAccess().getRule();
	}
	
	//Terminals:
	//	BREAK | CASE | CHAN | CONST | CONTINUE | ELSE | IF | FOR | FUNC | IMPORT | RETURN | PACKAGE | RANGE;
	public TerminalsElements getTerminalsAccess() {
		return pTerminals;
	}
	
	public ParserRule getTerminalsRule() {
		return getTerminalsAccess().getRule();
	}
	
	//BREAK:
	//	"break";
	public BREAKElements getBREAKAccess() {
		return pBREAK;
	}
	
	public ParserRule getBREAKRule() {
		return getBREAKAccess().getRule();
	}
	
	//CASE:
	//	"case";
	public CASEElements getCASEAccess() {
		return pCASE;
	}
	
	public ParserRule getCASERule() {
		return getCASEAccess().getRule();
	}
	
	//CHAN:
	//	"chan";
	public CHANElements getCHANAccess() {
		return pCHAN;
	}
	
	public ParserRule getCHANRule() {
		return getCHANAccess().getRule();
	}
	
	//CONST:
	//	"const";
	public CONSTElements getCONSTAccess() {
		return pCONST;
	}
	
	public ParserRule getCONSTRule() {
		return getCONSTAccess().getRule();
	}
	
	//CONTINUE:
	//	"continue";
	public CONTINUEElements getCONTINUEAccess() {
		return pCONTINUE;
	}
	
	public ParserRule getCONTINUERule() {
		return getCONTINUEAccess().getRule();
	}
	
	//ELSE:
	//	"else";
	public ELSEElements getELSEAccess() {
		return pELSE;
	}
	
	public ParserRule getELSERule() {
		return getELSEAccess().getRule();
	}
	
	//FOR:
	//	"for";
	public FORElements getFORAccess() {
		return pFOR;
	}
	
	public ParserRule getFORRule() {
		return getFORAccess().getRule();
	}
	
	//FUNC:
	//	"func";
	public FUNCElements getFUNCAccess() {
		return pFUNC;
	}
	
	public ParserRule getFUNCRule() {
		return getFUNCAccess().getRule();
	}
	
	//IF:
	//	"if";
	public IFElements getIFAccess() {
		return pIF;
	}
	
	public ParserRule getIFRule() {
		return getIFAccess().getRule();
	}
	
	//IMPORT:
	//	"import";
	public IMPORTElements getIMPORTAccess() {
		return pIMPORT;
	}
	
	public ParserRule getIMPORTRule() {
		return getIMPORTAccess().getRule();
	}
	
	//RETURN:
	//	"return";
	public RETURNElements getRETURNAccess() {
		return pRETURN;
	}
	
	public ParserRule getRETURNRule() {
		return getRETURNAccess().getRule();
	}
	
	//PACKAGE:
	//	"package";
	public PACKAGEElements getPACKAGEAccess() {
		return pPACKAGE;
	}
	
	public ParserRule getPACKAGERule() {
		return getPACKAGEAccess().getRule();
	}
	
	//TYPE:
	//	"type";
	public TYPEElements getTYPEAccess() {
		return pTYPE;
	}
	
	public ParserRule getTYPERule() {
		return getTYPEAccess().getRule();
	}
	
	//VAR:
	//	"var";
	public VARElements getVARAccess() {
		return pVAR;
	}
	
	public ParserRule getVARRule() {
		return getVARAccess().getRule();
	}
	
	//SWITCH:
	//	"switch";
	public SWITCHElements getSWITCHAccess() {
		return pSWITCH;
	}
	
	public ParserRule getSWITCHRule() {
		return getSWITCHAccess().getRule();
	}
	
	//STRUCT:
	//	"struct";
	public STRUCTElements getSTRUCTAccess() {
		return pSTRUCT;
	}
	
	public ParserRule getSTRUCTRule() {
		return getSTRUCTAccess().getRule();
	}
	
	//RANGE:
	//	"range";
	public RANGEElements getRANGEAccess() {
		return pRANGE;
	}
	
	public ParserRule getRANGERule() {
		return getRANGEAccess().getRule();
	}
	
	//Entity:
	//	'print' '(' (STRING | INT+) ')';
	public EntityElements getEntityAccess() {
		return pEntity;
	}
	
	public ParserRule getEntityRule() {
		return getEntityAccess().getRule();
	}
	
	//DataType:
	//	'datatype' name=ID;
	public DataTypeElements getDataTypeAccess() {
		return pDataType;
	}
	
	public ParserRule getDataTypeRule() {
		return getDataTypeAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' | "'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
