/**
 * generated by Xtext 2.13.0
 */
package org.xtext.go.go.impl;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import org.eclipse.emf.ecore.util.EDataTypeEList;

import org.xtext.go.go.CallFor;
import org.xtext.go.go.Expression;
import org.xtext.go.go.GoPackage;
import org.xtext.go.go.Greeting;
import org.xtext.go.go.OperationsOneEquals;
import org.xtext.go.go.varFor;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Operations One Equals</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.xtext.go.go.impl.OperationsOneEqualsImpl#getX <em>X</em>}</li>
 *   <li>{@link org.xtext.go.go.impl.OperationsOneEqualsImpl#getVar <em>Var</em>}</li>
 *   <li>{@link org.xtext.go.go.impl.OperationsOneEqualsImpl#getAtrb <em>Atrb</em>}</li>
 *   <li>{@link org.xtext.go.go.impl.OperationsOneEqualsImpl#getRight <em>Right</em>}</li>
 *   <li>{@link org.xtext.go.go.impl.OperationsOneEqualsImpl#getLeft <em>Left</em>}</li>
 *   <li>{@link org.xtext.go.go.impl.OperationsOneEqualsImpl#getName <em>Name</em>}</li>
 * </ul>
 *
 * @generated
 */
public class OperationsOneEqualsImpl extends INTImpl implements OperationsOneEquals
{
  /**
   * The cached value of the '{@link #getX() <em>X</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getX()
   * @generated
   * @ordered
   */
  protected Greeting x;

  /**
   * The cached value of the '{@link #getVar() <em>Var</em>}' attribute list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getVar()
   * @generated
   * @ordered
   */
  protected EList<String> var;

  /**
   * The cached value of the '{@link #getAtrb() <em>Atrb</em>}' attribute list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getAtrb()
   * @generated
   * @ordered
   */
  protected EList<String> atrb;

  /**
   * The cached value of the '{@link #getRight() <em>Right</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getRight()
   * @generated
   * @ordered
   */
  protected Expression right;

  /**
   * The cached value of the '{@link #getLeft() <em>Left</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getLeft()
   * @generated
   * @ordered
   */
  protected Expression left;

  /**
   * The default value of the '{@link #getName() <em>Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getName()
   * @generated
   * @ordered
   */
  protected static final String NAME_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getName() <em>Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getName()
   * @generated
   * @ordered
   */
  protected String name = NAME_EDEFAULT;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected OperationsOneEqualsImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return GoPackage.Literals.OPERATIONS_ONE_EQUALS;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Greeting getX()
  {
    return x;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetX(Greeting newX, NotificationChain msgs)
  {
    Greeting oldX = x;
    x = newX;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, GoPackage.OPERATIONS_ONE_EQUALS__X, oldX, newX);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setX(Greeting newX)
  {
    if (newX != x)
    {
      NotificationChain msgs = null;
      if (x != null)
        msgs = ((InternalEObject)x).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - GoPackage.OPERATIONS_ONE_EQUALS__X, null, msgs);
      if (newX != null)
        msgs = ((InternalEObject)newX).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - GoPackage.OPERATIONS_ONE_EQUALS__X, null, msgs);
      msgs = basicSetX(newX, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, GoPackage.OPERATIONS_ONE_EQUALS__X, newX, newX));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<String> getVar()
  {
    if (var == null)
    {
      var = new EDataTypeEList<String>(String.class, this, GoPackage.OPERATIONS_ONE_EQUALS__VAR);
    }
    return var;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<String> getAtrb()
  {
    if (atrb == null)
    {
      atrb = new EDataTypeEList<String>(String.class, this, GoPackage.OPERATIONS_ONE_EQUALS__ATRB);
    }
    return atrb;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Expression getRight()
  {
    return right;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetRight(Expression newRight, NotificationChain msgs)
  {
    Expression oldRight = right;
    right = newRight;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, GoPackage.OPERATIONS_ONE_EQUALS__RIGHT, oldRight, newRight);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setRight(Expression newRight)
  {
    if (newRight != right)
    {
      NotificationChain msgs = null;
      if (right != null)
        msgs = ((InternalEObject)right).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - GoPackage.OPERATIONS_ONE_EQUALS__RIGHT, null, msgs);
      if (newRight != null)
        msgs = ((InternalEObject)newRight).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - GoPackage.OPERATIONS_ONE_EQUALS__RIGHT, null, msgs);
      msgs = basicSetRight(newRight, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, GoPackage.OPERATIONS_ONE_EQUALS__RIGHT, newRight, newRight));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Expression getLeft()
  {
    return left;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetLeft(Expression newLeft, NotificationChain msgs)
  {
    Expression oldLeft = left;
    left = newLeft;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, GoPackage.OPERATIONS_ONE_EQUALS__LEFT, oldLeft, newLeft);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setLeft(Expression newLeft)
  {
    if (newLeft != left)
    {
      NotificationChain msgs = null;
      if (left != null)
        msgs = ((InternalEObject)left).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - GoPackage.OPERATIONS_ONE_EQUALS__LEFT, null, msgs);
      if (newLeft != null)
        msgs = ((InternalEObject)newLeft).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - GoPackage.OPERATIONS_ONE_EQUALS__LEFT, null, msgs);
      msgs = basicSetLeft(newLeft, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, GoPackage.OPERATIONS_ONE_EQUALS__LEFT, newLeft, newLeft));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String getName()
  {
    return name;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setName(String newName)
  {
    String oldName = name;
    name = newName;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, GoPackage.OPERATIONS_ONE_EQUALS__NAME, oldName, name));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case GoPackage.OPERATIONS_ONE_EQUALS__X:
        return basicSetX(null, msgs);
      case GoPackage.OPERATIONS_ONE_EQUALS__RIGHT:
        return basicSetRight(null, msgs);
      case GoPackage.OPERATIONS_ONE_EQUALS__LEFT:
        return basicSetLeft(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case GoPackage.OPERATIONS_ONE_EQUALS__X:
        return getX();
      case GoPackage.OPERATIONS_ONE_EQUALS__VAR:
        return getVar();
      case GoPackage.OPERATIONS_ONE_EQUALS__ATRB:
        return getAtrb();
      case GoPackage.OPERATIONS_ONE_EQUALS__RIGHT:
        return getRight();
      case GoPackage.OPERATIONS_ONE_EQUALS__LEFT:
        return getLeft();
      case GoPackage.OPERATIONS_ONE_EQUALS__NAME:
        return getName();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case GoPackage.OPERATIONS_ONE_EQUALS__X:
        setX((Greeting)newValue);
        return;
      case GoPackage.OPERATIONS_ONE_EQUALS__VAR:
        getVar().clear();
        getVar().addAll((Collection<? extends String>)newValue);
        return;
      case GoPackage.OPERATIONS_ONE_EQUALS__ATRB:
        getAtrb().clear();
        getAtrb().addAll((Collection<? extends String>)newValue);
        return;
      case GoPackage.OPERATIONS_ONE_EQUALS__RIGHT:
        setRight((Expression)newValue);
        return;
      case GoPackage.OPERATIONS_ONE_EQUALS__LEFT:
        setLeft((Expression)newValue);
        return;
      case GoPackage.OPERATIONS_ONE_EQUALS__NAME:
        setName((String)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case GoPackage.OPERATIONS_ONE_EQUALS__X:
        setX((Greeting)null);
        return;
      case GoPackage.OPERATIONS_ONE_EQUALS__VAR:
        getVar().clear();
        return;
      case GoPackage.OPERATIONS_ONE_EQUALS__ATRB:
        getAtrb().clear();
        return;
      case GoPackage.OPERATIONS_ONE_EQUALS__RIGHT:
        setRight((Expression)null);
        return;
      case GoPackage.OPERATIONS_ONE_EQUALS__LEFT:
        setLeft((Expression)null);
        return;
      case GoPackage.OPERATIONS_ONE_EQUALS__NAME:
        setName(NAME_EDEFAULT);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case GoPackage.OPERATIONS_ONE_EQUALS__X:
        return x != null;
      case GoPackage.OPERATIONS_ONE_EQUALS__VAR:
        return var != null && !var.isEmpty();
      case GoPackage.OPERATIONS_ONE_EQUALS__ATRB:
        return atrb != null && !atrb.isEmpty();
      case GoPackage.OPERATIONS_ONE_EQUALS__RIGHT:
        return right != null;
      case GoPackage.OPERATIONS_ONE_EQUALS__LEFT:
        return left != null;
      case GoPackage.OPERATIONS_ONE_EQUALS__NAME:
        return NAME_EDEFAULT == null ? name != null : !NAME_EDEFAULT.equals(name);
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public int eBaseStructuralFeatureID(int derivedFeatureID, Class<?> baseClass)
  {
    if (baseClass == CallFor.class)
    {
      switch (derivedFeatureID)
      {
        case GoPackage.OPERATIONS_ONE_EQUALS__X: return GoPackage.CALL_FOR__X;
        default: return -1;
      }
    }
    if (baseClass == varFor.class)
    {
      switch (derivedFeatureID)
      {
        case GoPackage.OPERATIONS_ONE_EQUALS__VAR: return GoPackage.VAR_FOR__VAR;
        case GoPackage.OPERATIONS_ONE_EQUALS__ATRB: return GoPackage.VAR_FOR__ATRB;
        case GoPackage.OPERATIONS_ONE_EQUALS__RIGHT: return GoPackage.VAR_FOR__RIGHT;
        case GoPackage.OPERATIONS_ONE_EQUALS__LEFT: return GoPackage.VAR_FOR__LEFT;
        default: return -1;
      }
    }
    return super.eBaseStructuralFeatureID(derivedFeatureID, baseClass);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public int eDerivedStructuralFeatureID(int baseFeatureID, Class<?> baseClass)
  {
    if (baseClass == CallFor.class)
    {
      switch (baseFeatureID)
      {
        case GoPackage.CALL_FOR__X: return GoPackage.OPERATIONS_ONE_EQUALS__X;
        default: return -1;
      }
    }
    if (baseClass == varFor.class)
    {
      switch (baseFeatureID)
      {
        case GoPackage.VAR_FOR__VAR: return GoPackage.OPERATIONS_ONE_EQUALS__VAR;
        case GoPackage.VAR_FOR__ATRB: return GoPackage.OPERATIONS_ONE_EQUALS__ATRB;
        case GoPackage.VAR_FOR__RIGHT: return GoPackage.OPERATIONS_ONE_EQUALS__RIGHT;
        case GoPackage.VAR_FOR__LEFT: return GoPackage.OPERATIONS_ONE_EQUALS__LEFT;
        default: return -1;
      }
    }
    return super.eDerivedStructuralFeatureID(baseFeatureID, baseClass);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuffer result = new StringBuffer(super.toString());
    result.append(" (var: ");
    result.append(var);
    result.append(", atrb: ");
    result.append(atrb);
    result.append(", name: ");
    result.append(name);
    result.append(')');
    return result.toString();
  }

} //OperationsOneEqualsImpl
