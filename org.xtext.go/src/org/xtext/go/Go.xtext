grammar org.xtext.go.Go with org.eclipse.xtext.common.Terminals

generate go "http://www.xtext.org/go/Go"

Go:
	(elements+=Greeting*);

Greeting:
	 MultDecVars |DecVar | DataType | DecFunc | EOL | Condition | Operations | DecImport | CallFunc | CallFor;

DecVar:
	DecVars |Modif vars+=ID(Comma vars+=ID)* (Types) ("=" atrb+=(Atri|ID)(Comma atrb+=(Atri|ID))*)?;

MultDecVars:
	Modif Open_parentheses (name=ID "=" (TypeValue | value=ID))* Closed_parentheses;
	
DecVars:
	vars+=ID(Comma vars+=ID)* ":=" atrb+=(Atri|ID)(Comma atrb+=(Atri|ID))*;
	
Atri:
	Open_brackets INT? Closed_brackets Types(Open_Key TypeValue Closed_Key)? | TypeValue ;
	

Params:
	params+=ID Types (Comma params+=ID Types)*;
	
TypeValue:
	STRING | Numbers | Boolean;


DecImport:
	IMPORT (STRING | Open_parentheses STRING+ Closed_parentheses);


OperationsOneEquals:
	name=ID(PlusEquals| MinusEquals)(ID|Numbers);
//Removi a recursão a esquerda

Operations returns INT:
	T o=I | OperationsOneEquals;
	
I:
	((Plus T o=I)|(Minus T o=I))?;
	
T: 
	F o=Y;
	
Y:
	((Asterics o=F o=Y) |(Bar o=F o=Y))?;
	
F:
	Open_parentheses o=Operations Closed_parentheses| Numbers;

Numbers:
	INT | Double;
	
Double:
	INT Dot INT;
	
Condition: 
    (if=IfCondition(elseif=ElseIfCondition)*(else=ElseCondition)?);
    
IfCondition:
	IF cond=Expression Open_Key then=Greeting*Closed_Key;
    
ElseIfCondition:
	(=>ELSE IfCondition);
	
ElseCondition:
	(=>ELSE Open_Key then=Greeting*Closed_Key); 
  
Expression:
    OrExpression
;   

CallFor :
	FOR varFor? Open_Key x=Greeting Closed_Key
;
OrExpression returns Expression:
    AndExpression ({OrExpression.left=current} "||" right=AndExpression)*  
;   

AndExpression returns Expression:
    ComparisonExpression ({AndExpression.left=current} "&&" right=ComparisonExpression)*  
;

ComparisonExpression returns Expression:
    PrimaryExpression ({ComparisonExpression.left=current} Operator right=PrimaryExpression)*
;

PrimaryExpression returns Expression:
    Open_parentheses Expression Closed_parentheses
    | Literal
;

Operator:
	"<"|"<="|"=="|">="|">";
operationsOne:
	name=ID(PlusOne| MinusOne);
	
varFor:
	ComparisonExpression | (Modif var+=ID Types "=" atrb+=(Atri|ID)  PontoVirgula right=Literal Operator left=Literal PontoVirgula (operationsOne| OperationsOneEquals));

Literal returns Expression:
    {Literal} value=Boolean | Numbers | ID
;

DecFunc:
	FUNC name=ID Open_parentheses param=Params* Closed_parentheses Open_Key args+=Greeting*Closed_Key
;
	
CallFunc:
	nameClass=ID Dot nameFunc=ID Open_parentheses param=Params* Closed_parentheses
;

//Tokens

Terminals:
	(BREAK|CASE|CHAN|CONST|CONTINUE|ELSE|IF|FOR|FUNC|IMPORT|RETURN|PACKAGE|RANGE);

Types:
	TYPE | "string" |"int" | "bool"| "byte" | "rune" |"float32" | "float64";

Modif:
	VAR | CONST;
	
terminal PontoVirgula:
	";";
	
terminal Open_Key:
	"{";

terminal Closed_Key:
	"}";

terminal Open_brackets:
	"[";

terminal Closed_brackets:
	"]";
	
terminal Dot:
	".";

terminal Comma:
	",";
	
terminal Open_parentheses:
	"(";

terminal Closed_parentheses:
	")";
Boolean:
	"true" | "false";
		
BREAK:
	"break";

CASE:
	"case";

CHAN:
	"chan";

CONST:
	"const";

CONTINUE:
	"continue";

ELSE:
	"else";

FOR:
	"for";
	
FUNC:
	"func";

IF:
	"if";
	
IMPORT:
	"import";	

RETURN:
	"return";
	
PACKAGE:
	"package";
	
TYPE:
	"type";
	
VAR:
	"var";
	
SWITCH:
	"switch";

STRUCT:
	"struct";

RANGE:
	"range";
	
terminal Bar:
	"/";
	
terminal Asterics:
	"*";
	
terminal Minus:
	"-";
	
terminal MinusOne:
	"--";
	
terminal Plus:
	"+";

terminal PlusEquals:
	"+=";
	
terminal MinusEquals:
	"-=";
terminal PlusOne:
	"++";
terminal EOL:
	NEWLINE | COMMENTS;
	
terminal COMMENTS:
	ML_COMMENT | SL_COMMENT;
	
terminal ML_COMMENT:
	"/*"->"*/";
	
terminal SL_COMMENT:
	'//' !('\n'|'\r')* ('\r'? '\n')?;

terminal NEWLINE:
	('\r'? '\n');
	
DataType:
	'datatype' name=ID;