/*
 * generated by Xtext 2.13.0
 */
grammar InternalGo;

options {
	superClass=AbstractInternalContentAssistParser;
}

@lexer::header {
package org.xtext.go.ide.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package org.xtext.go.ide.contentassist.antlr.internal;

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.DFA;
import org.xtext.go.services.GoGrammarAccess;

}
@parser::members {
	private GoGrammarAccess grammarAccess;

	public void setGrammarAccess(GoGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}

	@Override
	protected Grammar getGrammar() {
		return grammarAccess.getGrammar();
	}

	@Override
	protected String getValueForTokenName(String tokenName) {
		return tokenName;
	}
}

// Entry rule entryRuleGo
entryRuleGo
:
{ before(grammarAccess.getGoRule()); }
	 ruleGo
{ after(grammarAccess.getGoRule()); } 
	 EOF 
;

// Rule Go
ruleGo 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getGoAccess().getElementsAssignment()); }
		(rule__Go__ElementsAssignment)*
		{ after(grammarAccess.getGoAccess().getElementsAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleGreeting
entryRuleGreeting
:
{ before(grammarAccess.getGreetingRule()); }
	 ruleGreeting
{ after(grammarAccess.getGreetingRule()); } 
	 EOF 
;

// Rule Greeting
ruleGreeting 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getGreetingAccess().getAlternatives()); }
		(rule__Greeting__Alternatives)
		{ after(grammarAccess.getGreetingAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleDecFunc
entryRuleDecFunc
:
{ before(grammarAccess.getDecFuncRule()); }
	 ruleDecFunc
{ after(grammarAccess.getDecFuncRule()); } 
	 EOF 
;

// Rule DecFunc
ruleDecFunc 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getDecFuncAccess().getGroup()); }
		(rule__DecFunc__Group__0)
		{ after(grammarAccess.getDecFuncAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleBREAK
entryRuleBREAK
:
{ before(grammarAccess.getBREAKRule()); }
	 ruleBREAK
{ after(grammarAccess.getBREAKRule()); } 
	 EOF 
;

// Rule BREAK
ruleBREAK 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getBREAKAccess().getBreakKeyword()); }
		'break'
		{ after(grammarAccess.getBREAKAccess().getBreakKeyword()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleCASE
entryRuleCASE
:
{ before(grammarAccess.getCASERule()); }
	 ruleCASE
{ after(grammarAccess.getCASERule()); } 
	 EOF 
;

// Rule CASE
ruleCASE 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getCASEAccess().getCaseKeyword()); }
		'case'
		{ after(grammarAccess.getCASEAccess().getCaseKeyword()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleCHAN
entryRuleCHAN
:
{ before(grammarAccess.getCHANRule()); }
	 ruleCHAN
{ after(grammarAccess.getCHANRule()); } 
	 EOF 
;

// Rule CHAN
ruleCHAN 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getCHANAccess().getChanKeyword()); }
		'chan'
		{ after(grammarAccess.getCHANAccess().getChanKeyword()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleCONST
entryRuleCONST
:
{ before(grammarAccess.getCONSTRule()); }
	 ruleCONST
{ after(grammarAccess.getCONSTRule()); } 
	 EOF 
;

// Rule CONST
ruleCONST 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getCONSTAccess().getConstKeyword()); }
		'const'
		{ after(grammarAccess.getCONSTAccess().getConstKeyword()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleCONTINUE
entryRuleCONTINUE
:
{ before(grammarAccess.getCONTINUERule()); }
	 ruleCONTINUE
{ after(grammarAccess.getCONTINUERule()); } 
	 EOF 
;

// Rule CONTINUE
ruleCONTINUE 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getCONTINUEAccess().getContinueKeyword()); }
		'continue'
		{ after(grammarAccess.getCONTINUEAccess().getContinueKeyword()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleELSE
entryRuleELSE
:
{ before(grammarAccess.getELSERule()); }
	 ruleELSE
{ after(grammarAccess.getELSERule()); } 
	 EOF 
;

// Rule ELSE
ruleELSE 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getELSEAccess().getElseKeyword()); }
		'else'
		{ after(grammarAccess.getELSEAccess().getElseKeyword()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleFOR
entryRuleFOR
:
{ before(grammarAccess.getFORRule()); }
	 ruleFOR
{ after(grammarAccess.getFORRule()); } 
	 EOF 
;

// Rule FOR
ruleFOR 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getFORAccess().getForKeyword()); }
		'for'
		{ after(grammarAccess.getFORAccess().getForKeyword()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleFUNC
entryRuleFUNC
:
{ before(grammarAccess.getFUNCRule()); }
	 ruleFUNC
{ after(grammarAccess.getFUNCRule()); } 
	 EOF 
;

// Rule FUNC
ruleFUNC 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getFUNCAccess().getFuncKeyword()); }
		'func'
		{ after(grammarAccess.getFUNCAccess().getFuncKeyword()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleIF
entryRuleIF
:
{ before(grammarAccess.getIFRule()); }
	 ruleIF
{ after(grammarAccess.getIFRule()); } 
	 EOF 
;

// Rule IF
ruleIF 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getIFAccess().getIfKeyword()); }
		'if'
		{ after(grammarAccess.getIFAccess().getIfKeyword()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleIMPORT
entryRuleIMPORT
:
{ before(grammarAccess.getIMPORTRule()); }
	 ruleIMPORT
{ after(grammarAccess.getIMPORTRule()); } 
	 EOF 
;

// Rule IMPORT
ruleIMPORT 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getIMPORTAccess().getImportKeyword()); }
		'import'
		{ after(grammarAccess.getIMPORTAccess().getImportKeyword()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleRETURN
entryRuleRETURN
:
{ before(grammarAccess.getRETURNRule()); }
	 ruleRETURN
{ after(grammarAccess.getRETURNRule()); } 
	 EOF 
;

// Rule RETURN
ruleRETURN 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getRETURNAccess().getReturnKeyword()); }
		'return'
		{ after(grammarAccess.getRETURNAccess().getReturnKeyword()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulePACKAGE
entryRulePACKAGE
:
{ before(grammarAccess.getPACKAGERule()); }
	 rulePACKAGE
{ after(grammarAccess.getPACKAGERule()); } 
	 EOF 
;

// Rule PACKAGE
rulePACKAGE 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getPACKAGEAccess().getPackageKeyword()); }
		'package'
		{ after(grammarAccess.getPACKAGEAccess().getPackageKeyword()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleRANGE
entryRuleRANGE
:
{ before(grammarAccess.getRANGERule()); }
	 ruleRANGE
{ after(grammarAccess.getRANGERule()); } 
	 EOF 
;

// Rule RANGE
ruleRANGE 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getRANGEAccess().getRangeKeyword()); }
		'range'
		{ after(grammarAccess.getRANGEAccess().getRangeKeyword()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleEntity
entryRuleEntity
:
{ before(grammarAccess.getEntityRule()); }
	 ruleEntity
{ after(grammarAccess.getEntityRule()); } 
	 EOF 
;

// Rule Entity
ruleEntity 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getEntityAccess().getGroup()); }
		(rule__Entity__Group__0)
		{ after(grammarAccess.getEntityAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleDataType
entryRuleDataType
:
{ before(grammarAccess.getDataTypeRule()); }
	 ruleDataType
{ after(grammarAccess.getDataTypeRule()); } 
	 EOF 
;

// Rule DataType
ruleDataType 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getDataTypeAccess().getGroup()); }
		(rule__DataType__Group__0)
		{ after(grammarAccess.getDataTypeAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Greeting__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getGreetingAccess().getDataTypeParserRuleCall_0()); }
		ruleDataType
		{ after(grammarAccess.getGreetingAccess().getDataTypeParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getGreetingAccess().getEntityParserRuleCall_1()); }
		ruleEntity
		{ after(grammarAccess.getGreetingAccess().getEntityParserRuleCall_1()); }
	)
	|
	(
		{ before(grammarAccess.getGreetingAccess().getDecFuncParserRuleCall_2()); }
		ruleDecFunc
		{ after(grammarAccess.getGreetingAccess().getDecFuncParserRuleCall_2()); }
	)
	|
	(
		{ before(grammarAccess.getGreetingAccess().getEOLTerminalRuleCall_3()); }
		RULE_EOL
		{ after(grammarAccess.getGreetingAccess().getEOLTerminalRuleCall_3()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__DecFunc__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__DecFunc__Group__0__Impl
	rule__DecFunc__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__DecFunc__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDecFuncAccess().getFUNCParserRuleCall_0()); }
	ruleFUNC
	{ after(grammarAccess.getDecFuncAccess().getFUNCParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__DecFunc__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__DecFunc__Group__1__Impl
	rule__DecFunc__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__DecFunc__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDecFuncAccess().getNameAssignment_1()); }
	(rule__DecFunc__NameAssignment_1)
	{ after(grammarAccess.getDecFuncAccess().getNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__DecFunc__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__DecFunc__Group__2__Impl
	rule__DecFunc__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__DecFunc__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDecFuncAccess().getLeftParenthesisKeyword_2()); }
	'('
	{ after(grammarAccess.getDecFuncAccess().getLeftParenthesisKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__DecFunc__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__DecFunc__Group__3__Impl
	rule__DecFunc__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__DecFunc__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDecFuncAccess().getParameterAssignment_3()); }
	(rule__DecFunc__ParameterAssignment_3)?
	{ after(grammarAccess.getDecFuncAccess().getParameterAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__DecFunc__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__DecFunc__Group__4__Impl
	rule__DecFunc__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__DecFunc__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDecFuncAccess().getGroup_4()); }
	(rule__DecFunc__Group_4__0)*
	{ after(grammarAccess.getDecFuncAccess().getGroup_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__DecFunc__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__DecFunc__Group__5__Impl
	rule__DecFunc__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__DecFunc__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDecFuncAccess().getRightParenthesisKeyword_5()); }
	')'
	{ after(grammarAccess.getDecFuncAccess().getRightParenthesisKeyword_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__DecFunc__Group__6
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__DecFunc__Group__6__Impl
	rule__DecFunc__Group__7
;
finally {
	restoreStackSize(stackSize);
}

rule__DecFunc__Group__6__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDecFuncAccess().getLeftCurlyBracketKeyword_6()); }
	'{'
	{ after(grammarAccess.getDecFuncAccess().getLeftCurlyBracketKeyword_6()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__DecFunc__Group__7
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__DecFunc__Group__7__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__DecFunc__Group__7__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDecFuncAccess().getRightCurlyBracketKeyword_7()); }
	'}'
	{ after(grammarAccess.getDecFuncAccess().getRightCurlyBracketKeyword_7()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__DecFunc__Group_4__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__DecFunc__Group_4__0__Impl
	rule__DecFunc__Group_4__1
;
finally {
	restoreStackSize(stackSize);
}

rule__DecFunc__Group_4__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDecFuncAccess().getCommaKeyword_4_0()); }
	','
	{ after(grammarAccess.getDecFuncAccess().getCommaKeyword_4_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__DecFunc__Group_4__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__DecFunc__Group_4__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__DecFunc__Group_4__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDecFuncAccess().getParameterAssignment_4_1()); }
	(rule__DecFunc__ParameterAssignment_4_1)
	{ after(grammarAccess.getDecFuncAccess().getParameterAssignment_4_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Entity__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Entity__Group__0__Impl
	rule__Entity__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Entity__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEntityAccess().getPrintKeyword_0()); }
	'print'
	{ after(grammarAccess.getEntityAccess().getPrintKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Entity__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Entity__Group__1__Impl
	rule__Entity__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Entity__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEntityAccess().getLeftParenthesisKeyword_1()); }
	'('
	{ after(grammarAccess.getEntityAccess().getLeftParenthesisKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Entity__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Entity__Group__2__Impl
	rule__Entity__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Entity__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEntityAccess().getNameAssignment_2()); }
	(rule__Entity__NameAssignment_2)
	{ after(grammarAccess.getEntityAccess().getNameAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Entity__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Entity__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Entity__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEntityAccess().getRightParenthesisKeyword_3()); }
	')'
	{ after(grammarAccess.getEntityAccess().getRightParenthesisKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__DataType__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__DataType__Group__0__Impl
	rule__DataType__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__DataType__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDataTypeAccess().getDatatypeKeyword_0()); }
	'datatype'
	{ after(grammarAccess.getDataTypeAccess().getDatatypeKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__DataType__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__DataType__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__DataType__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDataTypeAccess().getNameAssignment_1()); }
	(rule__DataType__NameAssignment_1)
	{ after(grammarAccess.getDataTypeAccess().getNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Go__ElementsAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getGoAccess().getElementsGreetingParserRuleCall_0()); }
		ruleGreeting
		{ after(grammarAccess.getGoAccess().getElementsGreetingParserRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__DecFunc__NameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getDecFuncAccess().getNameIDTerminalRuleCall_1_0()); }
		RULE_ID
		{ after(grammarAccess.getDecFuncAccess().getNameIDTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__DecFunc__ParameterAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getDecFuncAccess().getParameterIDTerminalRuleCall_3_0()); }
		RULE_ID
		{ after(grammarAccess.getDecFuncAccess().getParameterIDTerminalRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__DecFunc__ParameterAssignment_4_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getDecFuncAccess().getParameterIDTerminalRuleCall_4_1_0()); }
		RULE_ID
		{ after(grammarAccess.getDecFuncAccess().getParameterIDTerminalRuleCall_4_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Entity__NameAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getEntityAccess().getNameIDTerminalRuleCall_2_0()); }
		RULE_ID
		{ after(grammarAccess.getEntityAccess().getNameIDTerminalRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__DataType__NameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getDataTypeAccess().getNameIDTerminalRuleCall_1_0()); }
		RULE_ID
		{ after(grammarAccess.getDataTypeAccess().getNameIDTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

RULE_EOL : (RULE_NEWLINE|RULE_SL_COMMENT);

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

fragment RULE_NEWLINE : '\r'? '\n';

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
