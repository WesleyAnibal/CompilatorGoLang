/*
 * generated by Xtext 2.13.0
 */
grammar InternalGo;

options {
	superClass=AbstractInternalContentAssistParser;
	backtrack=true;
}

@lexer::header {
package org.xtext.go.ide.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package org.xtext.go.ide.contentassist.antlr.internal;

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.DFA;
import org.xtext.go.services.GoGrammarAccess;

}
@parser::members {
	private GoGrammarAccess grammarAccess;

	public void setGrammarAccess(GoGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}

	@Override
	protected Grammar getGrammar() {
		return grammarAccess.getGrammar();
	}

	@Override
	protected String getValueForTokenName(String tokenName) {
		return tokenName;
	}
}

// Entry rule entryRuleGo
entryRuleGo
:
{ before(grammarAccess.getGoRule()); }
	 ruleGo
{ after(grammarAccess.getGoRule()); } 
	 EOF 
;

// Rule Go
ruleGo 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getGoAccess().getElementsAssignment()); }
		(rule__Go__ElementsAssignment)*
		{ after(grammarAccess.getGoAccess().getElementsAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleGreeting
entryRuleGreeting
:
{ before(grammarAccess.getGreetingRule()); }
	 ruleGreeting
{ after(grammarAccess.getGreetingRule()); } 
	 EOF 
;

// Rule Greeting
ruleGreeting 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getGreetingAccess().getAlternatives()); }
		(rule__Greeting__Alternatives)
		{ after(grammarAccess.getGreetingAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleCondition
entryRuleCondition
:
{ before(grammarAccess.getConditionRule()); }
	 ruleCondition
{ after(grammarAccess.getConditionRule()); } 
	 EOF 
;

// Rule Condition
ruleCondition 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getConditionAccess().getGroup()); }
		(rule__Condition__Group__0)
		{ after(grammarAccess.getConditionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleIfCondition
entryRuleIfCondition
:
{ before(grammarAccess.getIfConditionRule()); }
	 ruleIfCondition
{ after(grammarAccess.getIfConditionRule()); } 
	 EOF 
;

// Rule IfCondition
ruleIfCondition 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getIfConditionAccess().getGroup()); }
		(rule__IfCondition__Group__0)
		{ after(grammarAccess.getIfConditionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleElseIfCondition
entryRuleElseIfCondition
:
{ before(grammarAccess.getElseIfConditionRule()); }
	 ruleElseIfCondition
{ after(grammarAccess.getElseIfConditionRule()); } 
	 EOF 
;

// Rule ElseIfCondition
ruleElseIfCondition 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getElseIfConditionAccess().getGroup()); }
		(rule__ElseIfCondition__Group__0)
		{ after(grammarAccess.getElseIfConditionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleElseCondition
entryRuleElseCondition
:
{ before(grammarAccess.getElseConditionRule()); }
	 ruleElseCondition
{ after(grammarAccess.getElseConditionRule()); } 
	 EOF 
;

// Rule ElseCondition
ruleElseCondition 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getElseConditionAccess().getGroup()); }
		(rule__ElseCondition__Group__0)
		{ after(grammarAccess.getElseConditionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleExpression
entryRuleExpression
:
{ before(grammarAccess.getExpressionRule()); }
	 ruleExpression
{ after(grammarAccess.getExpressionRule()); } 
	 EOF 
;

// Rule Expression
ruleExpression 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getExpressionAccess().getOrExpressionParserRuleCall()); }
		ruleOrExpression
		{ after(grammarAccess.getExpressionAccess().getOrExpressionParserRuleCall()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleOrExpression
entryRuleOrExpression
:
{ before(grammarAccess.getOrExpressionRule()); }
	 ruleOrExpression
{ after(grammarAccess.getOrExpressionRule()); } 
	 EOF 
;

// Rule OrExpression
ruleOrExpression 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getOrExpressionAccess().getGroup()); }
		(rule__OrExpression__Group__0)
		{ after(grammarAccess.getOrExpressionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleAndExpression
entryRuleAndExpression
:
{ before(grammarAccess.getAndExpressionRule()); }
	 ruleAndExpression
{ after(grammarAccess.getAndExpressionRule()); } 
	 EOF 
;

// Rule AndExpression
ruleAndExpression 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getAndExpressionAccess().getGroup()); }
		(rule__AndExpression__Group__0)
		{ after(grammarAccess.getAndExpressionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleComparisonExpression
entryRuleComparisonExpression
:
{ before(grammarAccess.getComparisonExpressionRule()); }
	 ruleComparisonExpression
{ after(grammarAccess.getComparisonExpressionRule()); } 
	 EOF 
;

// Rule ComparisonExpression
ruleComparisonExpression 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getComparisonExpressionAccess().getGroup()); }
		(rule__ComparisonExpression__Group__0)
		{ after(grammarAccess.getComparisonExpressionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulePrimaryExpression
entryRulePrimaryExpression
:
{ before(grammarAccess.getPrimaryExpressionRule()); }
	 rulePrimaryExpression
{ after(grammarAccess.getPrimaryExpressionRule()); } 
	 EOF 
;

// Rule PrimaryExpression
rulePrimaryExpression 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getPrimaryExpressionAccess().getAlternatives()); }
		(rule__PrimaryExpression__Alternatives)
		{ after(grammarAccess.getPrimaryExpressionAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleLiteral
entryRuleLiteral
:
{ before(grammarAccess.getLiteralRule()); }
	 ruleLiteral
{ after(grammarAccess.getLiteralRule()); } 
	 EOF 
;

// Rule Literal
ruleLiteral 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getLiteralAccess().getAlternatives()); }
		(rule__Literal__Alternatives)
		{ after(grammarAccess.getLiteralAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleDecFunc
entryRuleDecFunc
:
{ before(grammarAccess.getDecFuncRule()); }
	 ruleDecFunc
{ after(grammarAccess.getDecFuncRule()); } 
	 EOF 
;

// Rule DecFunc
ruleDecFunc 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getDecFuncAccess().getGroup()); }
		(rule__DecFunc__Group__0)
		{ after(grammarAccess.getDecFuncAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleBREAK
entryRuleBREAK
:
{ before(grammarAccess.getBREAKRule()); }
	 ruleBREAK
{ after(grammarAccess.getBREAKRule()); } 
	 EOF 
;

// Rule BREAK
ruleBREAK 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getBREAKAccess().getBreakKeyword()); }
		'break'
		{ after(grammarAccess.getBREAKAccess().getBreakKeyword()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleCASE
entryRuleCASE
:
{ before(grammarAccess.getCASERule()); }
	 ruleCASE
{ after(grammarAccess.getCASERule()); } 
	 EOF 
;

// Rule CASE
ruleCASE 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getCASEAccess().getCaseKeyword()); }
		'case'
		{ after(grammarAccess.getCASEAccess().getCaseKeyword()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleCHAN
entryRuleCHAN
:
{ before(grammarAccess.getCHANRule()); }
	 ruleCHAN
{ after(grammarAccess.getCHANRule()); } 
	 EOF 
;

// Rule CHAN
ruleCHAN 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getCHANAccess().getChanKeyword()); }
		'chan'
		{ after(grammarAccess.getCHANAccess().getChanKeyword()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleCONST
entryRuleCONST
:
{ before(grammarAccess.getCONSTRule()); }
	 ruleCONST
{ after(grammarAccess.getCONSTRule()); } 
	 EOF 
;

// Rule CONST
ruleCONST 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getCONSTAccess().getConstKeyword()); }
		'const'
		{ after(grammarAccess.getCONSTAccess().getConstKeyword()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleCONTINUE
entryRuleCONTINUE
:
{ before(grammarAccess.getCONTINUERule()); }
	 ruleCONTINUE
{ after(grammarAccess.getCONTINUERule()); } 
	 EOF 
;

// Rule CONTINUE
ruleCONTINUE 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getCONTINUEAccess().getContinueKeyword()); }
		'continue'
		{ after(grammarAccess.getCONTINUEAccess().getContinueKeyword()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleELSE
entryRuleELSE
:
{ before(grammarAccess.getELSERule()); }
	 ruleELSE
{ after(grammarAccess.getELSERule()); } 
	 EOF 
;

// Rule ELSE
ruleELSE 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getELSEAccess().getElseKeyword()); }
		'else'
		{ after(grammarAccess.getELSEAccess().getElseKeyword()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleFOR
entryRuleFOR
:
{ before(grammarAccess.getFORRule()); }
	 ruleFOR
{ after(grammarAccess.getFORRule()); } 
	 EOF 
;

// Rule FOR
ruleFOR 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getFORAccess().getForKeyword()); }
		'for'
		{ after(grammarAccess.getFORAccess().getForKeyword()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleFUNC
entryRuleFUNC
:
{ before(grammarAccess.getFUNCRule()); }
	 ruleFUNC
{ after(grammarAccess.getFUNCRule()); } 
	 EOF 
;

// Rule FUNC
ruleFUNC 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getFUNCAccess().getFuncKeyword()); }
		'func'
		{ after(grammarAccess.getFUNCAccess().getFuncKeyword()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleIF
entryRuleIF
:
{ before(grammarAccess.getIFRule()); }
	 ruleIF
{ after(grammarAccess.getIFRule()); } 
	 EOF 
;

// Rule IF
ruleIF 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getIFAccess().getIfKeyword()); }
		'if'
		{ after(grammarAccess.getIFAccess().getIfKeyword()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleIMPORT
entryRuleIMPORT
:
{ before(grammarAccess.getIMPORTRule()); }
	 ruleIMPORT
{ after(grammarAccess.getIMPORTRule()); } 
	 EOF 
;

// Rule IMPORT
ruleIMPORT 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getIMPORTAccess().getImportKeyword()); }
		'import'
		{ after(grammarAccess.getIMPORTAccess().getImportKeyword()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleRETURN
entryRuleRETURN
:
{ before(grammarAccess.getRETURNRule()); }
	 ruleRETURN
{ after(grammarAccess.getRETURNRule()); } 
	 EOF 
;

// Rule RETURN
ruleRETURN 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getRETURNAccess().getReturnKeyword()); }
		'return'
		{ after(grammarAccess.getRETURNAccess().getReturnKeyword()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulePACKAGE
entryRulePACKAGE
:
{ before(grammarAccess.getPACKAGERule()); }
	 rulePACKAGE
{ after(grammarAccess.getPACKAGERule()); } 
	 EOF 
;

// Rule PACKAGE
rulePACKAGE 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getPACKAGEAccess().getPackageKeyword()); }
		'package'
		{ after(grammarAccess.getPACKAGEAccess().getPackageKeyword()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleRANGE
entryRuleRANGE
:
{ before(grammarAccess.getRANGERule()); }
	 ruleRANGE
{ after(grammarAccess.getRANGERule()); } 
	 EOF 
;

// Rule RANGE
ruleRANGE 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getRANGEAccess().getRangeKeyword()); }
		'range'
		{ after(grammarAccess.getRANGEAccess().getRangeKeyword()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleEntity
entryRuleEntity
:
{ before(grammarAccess.getEntityRule()); }
	 ruleEntity
{ after(grammarAccess.getEntityRule()); } 
	 EOF 
;

// Rule Entity
ruleEntity 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getEntityAccess().getGroup()); }
		(rule__Entity__Group__0)
		{ after(grammarAccess.getEntityAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleDataType
entryRuleDataType
:
{ before(grammarAccess.getDataTypeRule()); }
	 ruleDataType
{ after(grammarAccess.getDataTypeRule()); } 
	 EOF 
;

// Rule DataType
ruleDataType 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getDataTypeAccess().getGroup()); }
		(rule__DataType__Group__0)
		{ after(grammarAccess.getDataTypeAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Greeting__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getGreetingAccess().getDataTypeParserRuleCall_0()); }
		ruleDataType
		{ after(grammarAccess.getGreetingAccess().getDataTypeParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getGreetingAccess().getEntityParserRuleCall_1()); }
		ruleEntity
		{ after(grammarAccess.getGreetingAccess().getEntityParserRuleCall_1()); }
	)
	|
	(
		{ before(grammarAccess.getGreetingAccess().getDecFuncParserRuleCall_2()); }
		ruleDecFunc
		{ after(grammarAccess.getGreetingAccess().getDecFuncParserRuleCall_2()); }
	)
	|
	(
		{ before(grammarAccess.getGreetingAccess().getEOLTerminalRuleCall_3()); }
		RULE_EOL
		{ after(grammarAccess.getGreetingAccess().getEOLTerminalRuleCall_3()); }
	)
	|
	(
		{ before(grammarAccess.getGreetingAccess().getConditionParserRuleCall_4()); }
		ruleCondition
		{ after(grammarAccess.getGreetingAccess().getConditionParserRuleCall_4()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ComparisonExpression__OperatorAlternatives_1_1_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getComparisonExpressionAccess().getOperatorLessThanSignKeyword_1_1_0_0()); }
		'<'
		{ after(grammarAccess.getComparisonExpressionAccess().getOperatorLessThanSignKeyword_1_1_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getComparisonExpressionAccess().getOperatorLessThanSignEqualsSignKeyword_1_1_0_1()); }
		'<='
		{ after(grammarAccess.getComparisonExpressionAccess().getOperatorLessThanSignEqualsSignKeyword_1_1_0_1()); }
	)
	|
	(
		{ before(grammarAccess.getComparisonExpressionAccess().getOperatorEqualsSignEqualsSignKeyword_1_1_0_2()); }
		'=='
		{ after(grammarAccess.getComparisonExpressionAccess().getOperatorEqualsSignEqualsSignKeyword_1_1_0_2()); }
	)
	|
	(
		{ before(grammarAccess.getComparisonExpressionAccess().getOperatorGreaterThanSignEqualsSignKeyword_1_1_0_3()); }
		'>='
		{ after(grammarAccess.getComparisonExpressionAccess().getOperatorGreaterThanSignEqualsSignKeyword_1_1_0_3()); }
	)
	|
	(
		{ before(grammarAccess.getComparisonExpressionAccess().getOperatorGreaterThanSignKeyword_1_1_0_4()); }
		'>'
		{ after(grammarAccess.getComparisonExpressionAccess().getOperatorGreaterThanSignKeyword_1_1_0_4()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryExpression__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPrimaryExpressionAccess().getGroup_0()); }
		(rule__PrimaryExpression__Group_0__0)
		{ after(grammarAccess.getPrimaryExpressionAccess().getGroup_0()); }
	)
	|
	(
		{ before(grammarAccess.getPrimaryExpressionAccess().getLiteralParserRuleCall_1()); }
		ruleLiteral
		{ after(grammarAccess.getPrimaryExpressionAccess().getLiteralParserRuleCall_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Literal__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getLiteralAccess().getGroup_0()); }
		(rule__Literal__Group_0__0)
		{ after(grammarAccess.getLiteralAccess().getGroup_0()); }
	)
	|
	(
		{ before(grammarAccess.getLiteralAccess().getFalseKeyword_1()); }
		'false'
		{ after(grammarAccess.getLiteralAccess().getFalseKeyword_1()); }
	)
	|
	(
		{ before(grammarAccess.getLiteralAccess().getINTTerminalRuleCall_2()); }
		RULE_INT
		{ after(grammarAccess.getLiteralAccess().getINTTerminalRuleCall_2()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Entity__Alternatives_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getEntityAccess().getNameAssignment_2_0()); }
		(rule__Entity__NameAssignment_2_0)
		{ after(grammarAccess.getEntityAccess().getNameAssignment_2_0()); }
	)
	|
	(
		(
			{ before(grammarAccess.getEntityAccess().getINTTerminalRuleCall_2_1()); }
			(RULE_INT)
			{ after(grammarAccess.getEntityAccess().getINTTerminalRuleCall_2_1()); }
		)
		(
			{ before(grammarAccess.getEntityAccess().getINTTerminalRuleCall_2_1()); }
			(RULE_INT)*
			{ after(grammarAccess.getEntityAccess().getINTTerminalRuleCall_2_1()); }
		)
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Condition__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Condition__Group__0__Impl
	rule__Condition__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Condition__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConditionAccess().getIfAssignment_0()); }
	(rule__Condition__IfAssignment_0)
	{ after(grammarAccess.getConditionAccess().getIfAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Condition__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Condition__Group__1__Impl
	rule__Condition__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Condition__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConditionAccess().getElseifAssignment_1()); }
	(rule__Condition__ElseifAssignment_1)
	{ after(grammarAccess.getConditionAccess().getElseifAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Condition__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Condition__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Condition__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConditionAccess().getElseAssignment_2()); }
	(rule__Condition__ElseAssignment_2)?
	{ after(grammarAccess.getConditionAccess().getElseAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__IfCondition__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__IfCondition__Group__0__Impl
	rule__IfCondition__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__IfCondition__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIfConditionAccess().getIFParserRuleCall_0()); }
	ruleIF
	{ after(grammarAccess.getIfConditionAccess().getIFParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__IfCondition__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__IfCondition__Group__1__Impl
	rule__IfCondition__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__IfCondition__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIfConditionAccess().getCondAssignment_1()); }
	(rule__IfCondition__CondAssignment_1)
	{ after(grammarAccess.getIfConditionAccess().getCondAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__IfCondition__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__IfCondition__Group__2__Impl
	rule__IfCondition__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__IfCondition__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIfConditionAccess().getLeftCurlyBracketKeyword_2()); }
	'{'
	{ after(grammarAccess.getIfConditionAccess().getLeftCurlyBracketKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__IfCondition__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__IfCondition__Group__3__Impl
	rule__IfCondition__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__IfCondition__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIfConditionAccess().getThenAssignment_3()); }
	(rule__IfCondition__ThenAssignment_3)
	{ after(grammarAccess.getIfConditionAccess().getThenAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__IfCondition__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__IfCondition__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__IfCondition__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIfConditionAccess().getRightCurlyBracketKeyword_4()); }
	'}'
	{ after(grammarAccess.getIfConditionAccess().getRightCurlyBracketKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ElseIfCondition__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ElseIfCondition__Group__0__Impl
	rule__ElseIfCondition__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ElseIfCondition__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getElseIfConditionAccess().getELSEParserRuleCall_0()); }
	(ruleELSE)
	{ after(grammarAccess.getElseIfConditionAccess().getELSEParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ElseIfCondition__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ElseIfCondition__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ElseIfCondition__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getElseIfConditionAccess().getIfConditionParserRuleCall_1()); }
	ruleIfCondition
	{ after(grammarAccess.getElseIfConditionAccess().getIfConditionParserRuleCall_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ElseCondition__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ElseCondition__Group__0__Impl
	rule__ElseCondition__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ElseCondition__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getElseConditionAccess().getELSEParserRuleCall_0()); }
	(ruleELSE)
	{ after(grammarAccess.getElseConditionAccess().getELSEParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ElseCondition__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ElseCondition__Group__1__Impl
	rule__ElseCondition__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ElseCondition__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getElseConditionAccess().getLeftCurlyBracketKeyword_1()); }
	'{'
	{ after(grammarAccess.getElseConditionAccess().getLeftCurlyBracketKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ElseCondition__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ElseCondition__Group__2__Impl
	rule__ElseCondition__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__ElseCondition__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getElseConditionAccess().getThenAssignment_2()); }
	(rule__ElseCondition__ThenAssignment_2)
	{ after(grammarAccess.getElseConditionAccess().getThenAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ElseCondition__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ElseCondition__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ElseCondition__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getElseConditionAccess().getRightCurlyBracketKeyword_3()); }
	'}'
	{ after(grammarAccess.getElseConditionAccess().getRightCurlyBracketKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__OrExpression__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__OrExpression__Group__0__Impl
	rule__OrExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__OrExpression__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOrExpressionAccess().getAndExpressionParserRuleCall_0()); }
	ruleAndExpression
	{ after(grammarAccess.getOrExpressionAccess().getAndExpressionParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__OrExpression__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__OrExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__OrExpression__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOrExpressionAccess().getGroup_1()); }
	(rule__OrExpression__Group_1__0)*
	{ after(grammarAccess.getOrExpressionAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__OrExpression__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__OrExpression__Group_1__0__Impl
	rule__OrExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__OrExpression__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOrExpressionAccess().getOrExpressionLeftAction_1_0()); }
	()
	{ after(grammarAccess.getOrExpressionAccess().getOrExpressionLeftAction_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__OrExpression__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__OrExpression__Group_1__1__Impl
	rule__OrExpression__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__OrExpression__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOrExpressionAccess().getVerticalLineVerticalLineKeyword_1_1()); }
	'||'
	{ after(grammarAccess.getOrExpressionAccess().getVerticalLineVerticalLineKeyword_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__OrExpression__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__OrExpression__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__OrExpression__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOrExpressionAccess().getRightAssignment_1_2()); }
	(rule__OrExpression__RightAssignment_1_2)
	{ after(grammarAccess.getOrExpressionAccess().getRightAssignment_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__AndExpression__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AndExpression__Group__0__Impl
	rule__AndExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AndExpression__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAndExpressionAccess().getComparisonExpressionParserRuleCall_0()); }
	ruleComparisonExpression
	{ after(grammarAccess.getAndExpressionAccess().getComparisonExpressionParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__AndExpression__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AndExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AndExpression__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAndExpressionAccess().getGroup_1()); }
	(rule__AndExpression__Group_1__0)*
	{ after(grammarAccess.getAndExpressionAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__AndExpression__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AndExpression__Group_1__0__Impl
	rule__AndExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AndExpression__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAndExpressionAccess().getAndExpressionLeftAction_1_0()); }
	()
	{ after(grammarAccess.getAndExpressionAccess().getAndExpressionLeftAction_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__AndExpression__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AndExpression__Group_1__1__Impl
	rule__AndExpression__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__AndExpression__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAndExpressionAccess().getAmpersandAmpersandKeyword_1_1()); }
	'&&'
	{ after(grammarAccess.getAndExpressionAccess().getAmpersandAmpersandKeyword_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__AndExpression__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AndExpression__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AndExpression__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAndExpressionAccess().getRightAssignment_1_2()); }
	(rule__AndExpression__RightAssignment_1_2)
	{ after(grammarAccess.getAndExpressionAccess().getRightAssignment_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ComparisonExpression__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ComparisonExpression__Group__0__Impl
	rule__ComparisonExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ComparisonExpression__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getComparisonExpressionAccess().getPrimaryExpressionParserRuleCall_0()); }
	rulePrimaryExpression
	{ after(grammarAccess.getComparisonExpressionAccess().getPrimaryExpressionParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ComparisonExpression__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ComparisonExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ComparisonExpression__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getComparisonExpressionAccess().getGroup_1()); }
	(rule__ComparisonExpression__Group_1__0)*
	{ after(grammarAccess.getComparisonExpressionAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ComparisonExpression__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ComparisonExpression__Group_1__0__Impl
	rule__ComparisonExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ComparisonExpression__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getComparisonExpressionAccess().getComparisonExpressionLeftAction_1_0()); }
	()
	{ after(grammarAccess.getComparisonExpressionAccess().getComparisonExpressionLeftAction_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ComparisonExpression__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ComparisonExpression__Group_1__1__Impl
	rule__ComparisonExpression__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ComparisonExpression__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getComparisonExpressionAccess().getOperatorAssignment_1_1()); }
	(rule__ComparisonExpression__OperatorAssignment_1_1)
	{ after(grammarAccess.getComparisonExpressionAccess().getOperatorAssignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ComparisonExpression__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ComparisonExpression__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ComparisonExpression__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getComparisonExpressionAccess().getRightAssignment_1_2()); }
	(rule__ComparisonExpression__RightAssignment_1_2)
	{ after(grammarAccess.getComparisonExpressionAccess().getRightAssignment_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__PrimaryExpression__Group_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PrimaryExpression__Group_0__0__Impl
	rule__PrimaryExpression__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryExpression__Group_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPrimaryExpressionAccess().getLeftParenthesisKeyword_0_0()); }
	'('
	{ after(grammarAccess.getPrimaryExpressionAccess().getLeftParenthesisKeyword_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryExpression__Group_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PrimaryExpression__Group_0__1__Impl
	rule__PrimaryExpression__Group_0__2
;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryExpression__Group_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPrimaryExpressionAccess().getExpressionParserRuleCall_0_1()); }
	ruleExpression
	{ after(grammarAccess.getPrimaryExpressionAccess().getExpressionParserRuleCall_0_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryExpression__Group_0__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PrimaryExpression__Group_0__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryExpression__Group_0__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPrimaryExpressionAccess().getRightParenthesisKeyword_0_2()); }
	')'
	{ after(grammarAccess.getPrimaryExpressionAccess().getRightParenthesisKeyword_0_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Literal__Group_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Literal__Group_0__0__Impl
	rule__Literal__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Literal__Group_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLiteralAccess().getLiteralAction_0_0()); }
	()
	{ after(grammarAccess.getLiteralAccess().getLiteralAction_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Literal__Group_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Literal__Group_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Literal__Group_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLiteralAccess().getValueAssignment_0_1()); }
	(rule__Literal__ValueAssignment_0_1)
	{ after(grammarAccess.getLiteralAccess().getValueAssignment_0_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__DecFunc__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__DecFunc__Group__0__Impl
	rule__DecFunc__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__DecFunc__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDecFuncAccess().getFUNCParserRuleCall_0()); }
	ruleFUNC
	{ after(grammarAccess.getDecFuncAccess().getFUNCParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__DecFunc__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__DecFunc__Group__1__Impl
	rule__DecFunc__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__DecFunc__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDecFuncAccess().getNameAssignment_1()); }
	(rule__DecFunc__NameAssignment_1)
	{ after(grammarAccess.getDecFuncAccess().getNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__DecFunc__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__DecFunc__Group__2__Impl
	rule__DecFunc__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__DecFunc__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDecFuncAccess().getLeftParenthesisKeyword_2()); }
	'('
	{ after(grammarAccess.getDecFuncAccess().getLeftParenthesisKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__DecFunc__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__DecFunc__Group__3__Impl
	rule__DecFunc__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__DecFunc__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDecFuncAccess().getParameterAssignment_3()); }
	(rule__DecFunc__ParameterAssignment_3)?
	{ after(grammarAccess.getDecFuncAccess().getParameterAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__DecFunc__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__DecFunc__Group__4__Impl
	rule__DecFunc__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__DecFunc__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDecFuncAccess().getGroup_4()); }
	(rule__DecFunc__Group_4__0)*
	{ after(grammarAccess.getDecFuncAccess().getGroup_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__DecFunc__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__DecFunc__Group__5__Impl
	rule__DecFunc__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__DecFunc__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDecFuncAccess().getRightParenthesisKeyword_5()); }
	')'
	{ after(grammarAccess.getDecFuncAccess().getRightParenthesisKeyword_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__DecFunc__Group__6
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__DecFunc__Group__6__Impl
	rule__DecFunc__Group__7
;
finally {
	restoreStackSize(stackSize);
}

rule__DecFunc__Group__6__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDecFuncAccess().getLeftCurlyBracketKeyword_6()); }
	'{'
	{ after(grammarAccess.getDecFuncAccess().getLeftCurlyBracketKeyword_6()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__DecFunc__Group__7
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__DecFunc__Group__7__Impl
	rule__DecFunc__Group__8
;
finally {
	restoreStackSize(stackSize);
}

rule__DecFunc__Group__7__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDecFuncAccess().getArgsAssignment_7()); }
	(rule__DecFunc__ArgsAssignment_7)*
	{ after(grammarAccess.getDecFuncAccess().getArgsAssignment_7()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__DecFunc__Group__8
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__DecFunc__Group__8__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__DecFunc__Group__8__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDecFuncAccess().getRightCurlyBracketKeyword_8()); }
	'}'
	{ after(grammarAccess.getDecFuncAccess().getRightCurlyBracketKeyword_8()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__DecFunc__Group_4__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__DecFunc__Group_4__0__Impl
	rule__DecFunc__Group_4__1
;
finally {
	restoreStackSize(stackSize);
}

rule__DecFunc__Group_4__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDecFuncAccess().getCommaKeyword_4_0()); }
	','
	{ after(grammarAccess.getDecFuncAccess().getCommaKeyword_4_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__DecFunc__Group_4__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__DecFunc__Group_4__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__DecFunc__Group_4__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDecFuncAccess().getParameterAssignment_4_1()); }
	(rule__DecFunc__ParameterAssignment_4_1)
	{ after(grammarAccess.getDecFuncAccess().getParameterAssignment_4_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Entity__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Entity__Group__0__Impl
	rule__Entity__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Entity__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEntityAccess().getPrintKeyword_0()); }
	'print'
	{ after(grammarAccess.getEntityAccess().getPrintKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Entity__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Entity__Group__1__Impl
	rule__Entity__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Entity__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEntityAccess().getLeftParenthesisKeyword_1()); }
	'('
	{ after(grammarAccess.getEntityAccess().getLeftParenthesisKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Entity__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Entity__Group__2__Impl
	rule__Entity__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Entity__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEntityAccess().getAlternatives_2()); }
	(rule__Entity__Alternatives_2)
	{ after(grammarAccess.getEntityAccess().getAlternatives_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Entity__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Entity__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Entity__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEntityAccess().getRightParenthesisKeyword_3()); }
	')'
	{ after(grammarAccess.getEntityAccess().getRightParenthesisKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__DataType__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__DataType__Group__0__Impl
	rule__DataType__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__DataType__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDataTypeAccess().getDatatypeKeyword_0()); }
	'datatype'
	{ after(grammarAccess.getDataTypeAccess().getDatatypeKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__DataType__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__DataType__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__DataType__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDataTypeAccess().getNameAssignment_1()); }
	(rule__DataType__NameAssignment_1)
	{ after(grammarAccess.getDataTypeAccess().getNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Go__ElementsAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getGoAccess().getElementsGreetingParserRuleCall_0()); }
		ruleGreeting
		{ after(grammarAccess.getGoAccess().getElementsGreetingParserRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Condition__IfAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getConditionAccess().getIfIfConditionParserRuleCall_0_0()); }
		ruleIfCondition
		{ after(grammarAccess.getConditionAccess().getIfIfConditionParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Condition__ElseifAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getConditionAccess().getElseifElseIfConditionParserRuleCall_1_0()); }
		ruleElseIfCondition
		{ after(grammarAccess.getConditionAccess().getElseifElseIfConditionParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Condition__ElseAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getConditionAccess().getElseElseConditionParserRuleCall_2_0()); }
		ruleElseCondition
		{ after(grammarAccess.getConditionAccess().getElseElseConditionParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__IfCondition__CondAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getIfConditionAccess().getCondExpressionParserRuleCall_1_0()); }
		ruleExpression
		{ after(grammarAccess.getIfConditionAccess().getCondExpressionParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__IfCondition__ThenAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getIfConditionAccess().getThenGreetingParserRuleCall_3_0()); }
		ruleGreeting
		{ after(grammarAccess.getIfConditionAccess().getThenGreetingParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ElseCondition__ThenAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getElseConditionAccess().getThenGreetingParserRuleCall_2_0()); }
		ruleGreeting
		{ after(grammarAccess.getElseConditionAccess().getThenGreetingParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__OrExpression__RightAssignment_1_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getOrExpressionAccess().getRightAndExpressionParserRuleCall_1_2_0()); }
		ruleAndExpression
		{ after(grammarAccess.getOrExpressionAccess().getRightAndExpressionParserRuleCall_1_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__AndExpression__RightAssignment_1_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAndExpressionAccess().getRightComparisonExpressionParserRuleCall_1_2_0()); }
		ruleComparisonExpression
		{ after(grammarAccess.getAndExpressionAccess().getRightComparisonExpressionParserRuleCall_1_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ComparisonExpression__OperatorAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getComparisonExpressionAccess().getOperatorAlternatives_1_1_0()); }
		(rule__ComparisonExpression__OperatorAlternatives_1_1_0)
		{ after(grammarAccess.getComparisonExpressionAccess().getOperatorAlternatives_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ComparisonExpression__RightAssignment_1_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getComparisonExpressionAccess().getRightPrimaryExpressionParserRuleCall_1_2_0()); }
		rulePrimaryExpression
		{ after(grammarAccess.getComparisonExpressionAccess().getRightPrimaryExpressionParserRuleCall_1_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Literal__ValueAssignment_0_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getLiteralAccess().getValueTrueKeyword_0_1_0()); }
		(
			{ before(grammarAccess.getLiteralAccess().getValueTrueKeyword_0_1_0()); }
			'true'
			{ after(grammarAccess.getLiteralAccess().getValueTrueKeyword_0_1_0()); }
		)
		{ after(grammarAccess.getLiteralAccess().getValueTrueKeyword_0_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__DecFunc__NameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getDecFuncAccess().getNameIDTerminalRuleCall_1_0()); }
		RULE_ID
		{ after(grammarAccess.getDecFuncAccess().getNameIDTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__DecFunc__ParameterAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getDecFuncAccess().getParameterIDTerminalRuleCall_3_0()); }
		RULE_ID
		{ after(grammarAccess.getDecFuncAccess().getParameterIDTerminalRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__DecFunc__ParameterAssignment_4_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getDecFuncAccess().getParameterIDTerminalRuleCall_4_1_0()); }
		RULE_ID
		{ after(grammarAccess.getDecFuncAccess().getParameterIDTerminalRuleCall_4_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__DecFunc__ArgsAssignment_7
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getDecFuncAccess().getArgsGreetingParserRuleCall_7_0()); }
		ruleGreeting
		{ after(grammarAccess.getDecFuncAccess().getArgsGreetingParserRuleCall_7_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Entity__NameAssignment_2_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getEntityAccess().getNameIDTerminalRuleCall_2_0_0()); }
		RULE_ID
		{ after(grammarAccess.getEntityAccess().getNameIDTerminalRuleCall_2_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__DataType__NameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getDataTypeAccess().getNameIDTerminalRuleCall_1_0()); }
		RULE_ID
		{ after(grammarAccess.getDataTypeAccess().getNameIDTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

RULE_EOL : (RULE_NEWLINE|RULE_SL_COMMENT);

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

fragment RULE_NEWLINE : '\r'? '\n';

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
