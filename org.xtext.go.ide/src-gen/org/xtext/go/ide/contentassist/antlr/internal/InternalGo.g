/*
 * generated by Xtext 2.13.0
 */
grammar InternalGo;

options {
	superClass=AbstractInternalContentAssistParser;
	backtrack=true;
}

@lexer::header {
package org.xtext.go.ide.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package org.xtext.go.ide.contentassist.antlr.internal;

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.DFA;
import org.xtext.go.services.GoGrammarAccess;

}
@parser::members {
	private GoGrammarAccess grammarAccess;

	public void setGrammarAccess(GoGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}

	@Override
	protected Grammar getGrammar() {
		return grammarAccess.getGrammar();
	}

	@Override
	protected String getValueForTokenName(String tokenName) {
		return tokenName;
	}
}

// Entry rule entryRuleGo
entryRuleGo
:
{ before(grammarAccess.getGoRule()); }
	 ruleGo
{ after(grammarAccess.getGoRule()); } 
	 EOF 
;

// Rule Go
ruleGo 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getGoAccess().getElementsAssignment()); }
		(rule__Go__ElementsAssignment)*
		{ after(grammarAccess.getGoAccess().getElementsAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleGreeting
entryRuleGreeting
:
{ before(grammarAccess.getGreetingRule()); }
	 ruleGreeting
{ after(grammarAccess.getGreetingRule()); } 
	 EOF 
;

// Rule Greeting
ruleGreeting 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getGreetingAccess().getAlternatives()); }
		(rule__Greeting__Alternatives)
		{ after(grammarAccess.getGreetingAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleDecVar
entryRuleDecVar
:
{ before(grammarAccess.getDecVarRule()); }
	 ruleDecVar
{ after(grammarAccess.getDecVarRule()); } 
	 EOF 
;

// Rule DecVar
ruleDecVar 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getDecVarAccess().getAlternatives()); }
		(rule__DecVar__Alternatives)
		{ after(grammarAccess.getDecVarAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleMultDecVars
entryRuleMultDecVars
:
{ before(grammarAccess.getMultDecVarsRule()); }
	 ruleMultDecVars
{ after(grammarAccess.getMultDecVarsRule()); } 
	 EOF 
;

// Rule MultDecVars
ruleMultDecVars 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getMultDecVarsAccess().getGroup()); }
		(rule__MultDecVars__Group__0)
		{ after(grammarAccess.getMultDecVarsAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleDecVars
entryRuleDecVars
:
{ before(grammarAccess.getDecVarsRule()); }
	 ruleDecVars
{ after(grammarAccess.getDecVarsRule()); } 
	 EOF 
;

// Rule DecVars
ruleDecVars 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getDecVarsAccess().getGroup()); }
		(rule__DecVars__Group__0)
		{ after(grammarAccess.getDecVarsAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleAtri
entryRuleAtri
:
{ before(grammarAccess.getAtriRule()); }
	 ruleAtri
{ after(grammarAccess.getAtriRule()); } 
	 EOF 
;

// Rule Atri
ruleAtri 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getAtriAccess().getAlternatives()); }
		(rule__Atri__Alternatives)
		{ after(grammarAccess.getAtriAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleParams
entryRuleParams
:
{ before(grammarAccess.getParamsRule()); }
	 ruleParams
{ after(grammarAccess.getParamsRule()); } 
	 EOF 
;

// Rule Params
ruleParams 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getParamsAccess().getGroup()); }
		(rule__Params__Group__0)
		{ after(grammarAccess.getParamsAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleTypeValue
entryRuleTypeValue
:
{ before(grammarAccess.getTypeValueRule()); }
	 ruleTypeValue
{ after(grammarAccess.getTypeValueRule()); } 
	 EOF 
;

// Rule TypeValue
ruleTypeValue 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getTypeValueAccess().getAlternatives()); }
		(rule__TypeValue__Alternatives)
		{ after(grammarAccess.getTypeValueAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleDecImport
entryRuleDecImport
:
{ before(grammarAccess.getDecImportRule()); }
	 ruleDecImport
{ after(grammarAccess.getDecImportRule()); } 
	 EOF 
;

// Rule DecImport
ruleDecImport 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getDecImportAccess().getGroup()); }
		(rule__DecImport__Group__0)
		{ after(grammarAccess.getDecImportAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleOperations
entryRuleOperations
:
{ before(grammarAccess.getOperationsRule()); }
	 ruleOperations
{ after(grammarAccess.getOperationsRule()); } 
	 EOF 
;

// Rule Operations
ruleOperations 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getOperationsAccess().getGroup()); }
		(rule__Operations__Group__0)
		{ after(grammarAccess.getOperationsAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleI
entryRuleI
:
{ before(grammarAccess.getIRule()); }
	 ruleI
{ after(grammarAccess.getIRule()); } 
	 EOF 
;

// Rule I
ruleI 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getIAccess().getAlternatives()); }
		(rule__I__Alternatives)?
		{ after(grammarAccess.getIAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleT
entryRuleT
:
{ before(grammarAccess.getTRule()); }
	 ruleT
{ after(grammarAccess.getTRule()); } 
	 EOF 
;

// Rule T
ruleT 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getTAccess().getGroup()); }
		(rule__T__Group__0)
		{ after(grammarAccess.getTAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleY
entryRuleY
:
{ before(grammarAccess.getYRule()); }
	 ruleY
{ after(grammarAccess.getYRule()); } 
	 EOF 
;

// Rule Y
ruleY 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getYAccess().getAlternatives()); }
		(rule__Y__Alternatives)?
		{ after(grammarAccess.getYAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleF
entryRuleF
:
{ before(grammarAccess.getFRule()); }
	 ruleF
{ after(grammarAccess.getFRule()); } 
	 EOF 
;

// Rule F
ruleF 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getFAccess().getAlternatives()); }
		(rule__F__Alternatives)
		{ after(grammarAccess.getFAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleNumbers
entryRuleNumbers
:
{ before(grammarAccess.getNumbersRule()); }
	 ruleNumbers
{ after(grammarAccess.getNumbersRule()); } 
	 EOF 
;

// Rule Numbers
ruleNumbers 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getNumbersAccess().getAlternatives()); }
		(rule__Numbers__Alternatives)
		{ after(grammarAccess.getNumbersAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleDouble
entryRuleDouble
:
{ before(grammarAccess.getDoubleRule()); }
	 ruleDouble
{ after(grammarAccess.getDoubleRule()); } 
	 EOF 
;

// Rule Double
ruleDouble 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getDoubleAccess().getGroup()); }
		(rule__Double__Group__0)
		{ after(grammarAccess.getDoubleAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleCondition
entryRuleCondition
:
{ before(grammarAccess.getConditionRule()); }
	 ruleCondition
{ after(grammarAccess.getConditionRule()); } 
	 EOF 
;

// Rule Condition
ruleCondition 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getConditionAccess().getGroup()); }
		(rule__Condition__Group__0)
		{ after(grammarAccess.getConditionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleIfCondition
entryRuleIfCondition
:
{ before(grammarAccess.getIfConditionRule()); }
	 ruleIfCondition
{ after(grammarAccess.getIfConditionRule()); } 
	 EOF 
;

// Rule IfCondition
ruleIfCondition 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getIfConditionAccess().getGroup()); }
		(rule__IfCondition__Group__0)
		{ after(grammarAccess.getIfConditionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleElseIfCondition
entryRuleElseIfCondition
:
{ before(grammarAccess.getElseIfConditionRule()); }
	 ruleElseIfCondition
{ after(grammarAccess.getElseIfConditionRule()); } 
	 EOF 
;

// Rule ElseIfCondition
ruleElseIfCondition 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getElseIfConditionAccess().getGroup()); }
		(rule__ElseIfCondition__Group__0)
		{ after(grammarAccess.getElseIfConditionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleElseCondition
entryRuleElseCondition
:
{ before(grammarAccess.getElseConditionRule()); }
	 ruleElseCondition
{ after(grammarAccess.getElseConditionRule()); } 
	 EOF 
;

// Rule ElseCondition
ruleElseCondition 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getElseConditionAccess().getGroup()); }
		(rule__ElseCondition__Group__0)
		{ after(grammarAccess.getElseConditionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleExpression
entryRuleExpression
:
{ before(grammarAccess.getExpressionRule()); }
	 ruleExpression
{ after(grammarAccess.getExpressionRule()); } 
	 EOF 
;

// Rule Expression
ruleExpression 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getExpressionAccess().getOrExpressionParserRuleCall()); }
		ruleOrExpression
		{ after(grammarAccess.getExpressionAccess().getOrExpressionParserRuleCall()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleOrExpression
entryRuleOrExpression
:
{ before(grammarAccess.getOrExpressionRule()); }
	 ruleOrExpression
{ after(grammarAccess.getOrExpressionRule()); } 
	 EOF 
;

// Rule OrExpression
ruleOrExpression 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getOrExpressionAccess().getGroup()); }
		(rule__OrExpression__Group__0)
		{ after(grammarAccess.getOrExpressionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleAndExpression
entryRuleAndExpression
:
{ before(grammarAccess.getAndExpressionRule()); }
	 ruleAndExpression
{ after(grammarAccess.getAndExpressionRule()); } 
	 EOF 
;

// Rule AndExpression
ruleAndExpression 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getAndExpressionAccess().getGroup()); }
		(rule__AndExpression__Group__0)
		{ after(grammarAccess.getAndExpressionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleComparisonExpression
entryRuleComparisonExpression
:
{ before(grammarAccess.getComparisonExpressionRule()); }
	 ruleComparisonExpression
{ after(grammarAccess.getComparisonExpressionRule()); } 
	 EOF 
;

// Rule ComparisonExpression
ruleComparisonExpression 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getComparisonExpressionAccess().getGroup()); }
		(rule__ComparisonExpression__Group__0)
		{ after(grammarAccess.getComparisonExpressionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulePrimaryExpression
entryRulePrimaryExpression
:
{ before(grammarAccess.getPrimaryExpressionRule()); }
	 rulePrimaryExpression
{ after(grammarAccess.getPrimaryExpressionRule()); } 
	 EOF 
;

// Rule PrimaryExpression
rulePrimaryExpression 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getPrimaryExpressionAccess().getAlternatives()); }
		(rule__PrimaryExpression__Alternatives)
		{ after(grammarAccess.getPrimaryExpressionAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleLiteral
entryRuleLiteral
:
{ before(grammarAccess.getLiteralRule()); }
	 ruleLiteral
{ after(grammarAccess.getLiteralRule()); } 
	 EOF 
;

// Rule Literal
ruleLiteral 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getLiteralAccess().getAlternatives()); }
		(rule__Literal__Alternatives)
		{ after(grammarAccess.getLiteralAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleDecFunc
entryRuleDecFunc
:
{ before(grammarAccess.getDecFuncRule()); }
	 ruleDecFunc
{ after(grammarAccess.getDecFuncRule()); } 
	 EOF 
;

// Rule DecFunc
ruleDecFunc 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getDecFuncAccess().getGroup()); }
		(rule__DecFunc__Group__0)
		{ after(grammarAccess.getDecFuncAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleTypes
entryRuleTypes
:
{ before(grammarAccess.getTypesRule()); }
	 ruleTypes
{ after(grammarAccess.getTypesRule()); } 
	 EOF 
;

// Rule Types
ruleTypes 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getTypesAccess().getAlternatives()); }
		(rule__Types__Alternatives)
		{ after(grammarAccess.getTypesAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleModif
entryRuleModif
:
{ before(grammarAccess.getModifRule()); }
	 ruleModif
{ after(grammarAccess.getModifRule()); } 
	 EOF 
;

// Rule Modif
ruleModif 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getModifAccess().getAlternatives()); }
		(rule__Modif__Alternatives)
		{ after(grammarAccess.getModifAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleBoolean
entryRuleBoolean
:
{ before(grammarAccess.getBooleanRule()); }
	 ruleBoolean
{ after(grammarAccess.getBooleanRule()); } 
	 EOF 
;

// Rule Boolean
ruleBoolean 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getBooleanAccess().getAlternatives()); }
		(rule__Boolean__Alternatives)
		{ after(grammarAccess.getBooleanAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleBREAK
entryRuleBREAK
:
{ before(grammarAccess.getBREAKRule()); }
	 ruleBREAK
{ after(grammarAccess.getBREAKRule()); } 
	 EOF 
;

// Rule BREAK
ruleBREAK 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getBREAKAccess().getBreakKeyword()); }
		'break'
		{ after(grammarAccess.getBREAKAccess().getBreakKeyword()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleCASE
entryRuleCASE
:
{ before(grammarAccess.getCASERule()); }
	 ruleCASE
{ after(grammarAccess.getCASERule()); } 
	 EOF 
;

// Rule CASE
ruleCASE 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getCASEAccess().getCaseKeyword()); }
		'case'
		{ after(grammarAccess.getCASEAccess().getCaseKeyword()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleCHAN
entryRuleCHAN
:
{ before(grammarAccess.getCHANRule()); }
	 ruleCHAN
{ after(grammarAccess.getCHANRule()); } 
	 EOF 
;

// Rule CHAN
ruleCHAN 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getCHANAccess().getChanKeyword()); }
		'chan'
		{ after(grammarAccess.getCHANAccess().getChanKeyword()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleCONST
entryRuleCONST
:
{ before(grammarAccess.getCONSTRule()); }
	 ruleCONST
{ after(grammarAccess.getCONSTRule()); } 
	 EOF 
;

// Rule CONST
ruleCONST 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getCONSTAccess().getConstKeyword()); }
		'const'
		{ after(grammarAccess.getCONSTAccess().getConstKeyword()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleCONTINUE
entryRuleCONTINUE
:
{ before(grammarAccess.getCONTINUERule()); }
	 ruleCONTINUE
{ after(grammarAccess.getCONTINUERule()); } 
	 EOF 
;

// Rule CONTINUE
ruleCONTINUE 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getCONTINUEAccess().getContinueKeyword()); }
		'continue'
		{ after(grammarAccess.getCONTINUEAccess().getContinueKeyword()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleELSE
entryRuleELSE
:
{ before(grammarAccess.getELSERule()); }
	 ruleELSE
{ after(grammarAccess.getELSERule()); } 
	 EOF 
;

// Rule ELSE
ruleELSE 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getELSEAccess().getElseKeyword()); }
		'else'
		{ after(grammarAccess.getELSEAccess().getElseKeyword()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleFOR
entryRuleFOR
:
{ before(grammarAccess.getFORRule()); }
	 ruleFOR
{ after(grammarAccess.getFORRule()); } 
	 EOF 
;

// Rule FOR
ruleFOR 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getFORAccess().getForKeyword()); }
		'for'
		{ after(grammarAccess.getFORAccess().getForKeyword()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleFUNC
entryRuleFUNC
:
{ before(grammarAccess.getFUNCRule()); }
	 ruleFUNC
{ after(grammarAccess.getFUNCRule()); } 
	 EOF 
;

// Rule FUNC
ruleFUNC 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getFUNCAccess().getFuncKeyword()); }
		'func'
		{ after(grammarAccess.getFUNCAccess().getFuncKeyword()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleIF
entryRuleIF
:
{ before(grammarAccess.getIFRule()); }
	 ruleIF
{ after(grammarAccess.getIFRule()); } 
	 EOF 
;

// Rule IF
ruleIF 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getIFAccess().getIfKeyword()); }
		'if'
		{ after(grammarAccess.getIFAccess().getIfKeyword()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleIMPORT
entryRuleIMPORT
:
{ before(grammarAccess.getIMPORTRule()); }
	 ruleIMPORT
{ after(grammarAccess.getIMPORTRule()); } 
	 EOF 
;

// Rule IMPORT
ruleIMPORT 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getIMPORTAccess().getImportKeyword()); }
		'import'
		{ after(grammarAccess.getIMPORTAccess().getImportKeyword()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleRETURN
entryRuleRETURN
:
{ before(grammarAccess.getRETURNRule()); }
	 ruleRETURN
{ after(grammarAccess.getRETURNRule()); } 
	 EOF 
;

// Rule RETURN
ruleRETURN 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getRETURNAccess().getReturnKeyword()); }
		'return'
		{ after(grammarAccess.getRETURNAccess().getReturnKeyword()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulePACKAGE
entryRulePACKAGE
:
{ before(grammarAccess.getPACKAGERule()); }
	 rulePACKAGE
{ after(grammarAccess.getPACKAGERule()); } 
	 EOF 
;

// Rule PACKAGE
rulePACKAGE 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getPACKAGEAccess().getPackageKeyword()); }
		'package'
		{ after(grammarAccess.getPACKAGEAccess().getPackageKeyword()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleTYPE
entryRuleTYPE
:
{ before(grammarAccess.getTYPERule()); }
	 ruleTYPE
{ after(grammarAccess.getTYPERule()); } 
	 EOF 
;

// Rule TYPE
ruleTYPE 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getTYPEAccess().getTypeKeyword()); }
		'type'
		{ after(grammarAccess.getTYPEAccess().getTypeKeyword()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleVAR
entryRuleVAR
:
{ before(grammarAccess.getVARRule()); }
	 ruleVAR
{ after(grammarAccess.getVARRule()); } 
	 EOF 
;

// Rule VAR
ruleVAR 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getVARAccess().getVarKeyword()); }
		'var'
		{ after(grammarAccess.getVARAccess().getVarKeyword()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleRANGE
entryRuleRANGE
:
{ before(grammarAccess.getRANGERule()); }
	 ruleRANGE
{ after(grammarAccess.getRANGERule()); } 
	 EOF 
;

// Rule RANGE
ruleRANGE 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getRANGEAccess().getRangeKeyword()); }
		'range'
		{ after(grammarAccess.getRANGEAccess().getRangeKeyword()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleDataType
entryRuleDataType
:
{ before(grammarAccess.getDataTypeRule()); }
	 ruleDataType
{ after(grammarAccess.getDataTypeRule()); } 
	 EOF 
;

// Rule DataType
ruleDataType 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getDataTypeAccess().getGroup()); }
		(rule__DataType__Group__0)
		{ after(grammarAccess.getDataTypeAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Greeting__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getGreetingAccess().getMultDecVarsParserRuleCall_0()); }
		ruleMultDecVars
		{ after(grammarAccess.getGreetingAccess().getMultDecVarsParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getGreetingAccess().getDecVarParserRuleCall_1()); }
		ruleDecVar
		{ after(grammarAccess.getGreetingAccess().getDecVarParserRuleCall_1()); }
	)
	|
	(
		{ before(grammarAccess.getGreetingAccess().getDataTypeParserRuleCall_2()); }
		ruleDataType
		{ after(grammarAccess.getGreetingAccess().getDataTypeParserRuleCall_2()); }
	)
	|
	(
		{ before(grammarAccess.getGreetingAccess().getDecFuncParserRuleCall_3()); }
		ruleDecFunc
		{ after(grammarAccess.getGreetingAccess().getDecFuncParserRuleCall_3()); }
	)
	|
	(
		{ before(grammarAccess.getGreetingAccess().getEOLTerminalRuleCall_4()); }
		RULE_EOL
		{ after(grammarAccess.getGreetingAccess().getEOLTerminalRuleCall_4()); }
	)
	|
	(
		{ before(grammarAccess.getGreetingAccess().getConditionParserRuleCall_5()); }
		ruleCondition
		{ after(grammarAccess.getGreetingAccess().getConditionParserRuleCall_5()); }
	)
	|
	(
		{ before(grammarAccess.getGreetingAccess().getOperationsParserRuleCall_6()); }
		ruleOperations
		{ after(grammarAccess.getGreetingAccess().getOperationsParserRuleCall_6()); }
	)
	|
	(
		{ before(grammarAccess.getGreetingAccess().getDecImportParserRuleCall_7()); }
		ruleDecImport
		{ after(grammarAccess.getGreetingAccess().getDecImportParserRuleCall_7()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__DecVar__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getDecVarAccess().getDecVarsParserRuleCall_0()); }
		ruleDecVars
		{ after(grammarAccess.getDecVarAccess().getDecVarsParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getDecVarAccess().getGroup_1()); }
		(rule__DecVar__Group_1__0)
		{ after(grammarAccess.getDecVarAccess().getGroup_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__DecVar__AtrbAlternatives_1_4_1_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getDecVarAccess().getAtrbAtriParserRuleCall_1_4_1_0_0()); }
		ruleAtri
		{ after(grammarAccess.getDecVarAccess().getAtrbAtriParserRuleCall_1_4_1_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getDecVarAccess().getAtrbIDTerminalRuleCall_1_4_1_0_1()); }
		RULE_ID
		{ after(grammarAccess.getDecVarAccess().getAtrbIDTerminalRuleCall_1_4_1_0_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__DecVar__AtrbAlternatives_1_4_2_1_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getDecVarAccess().getAtrbAtriParserRuleCall_1_4_2_1_0_0()); }
		ruleAtri
		{ after(grammarAccess.getDecVarAccess().getAtrbAtriParserRuleCall_1_4_2_1_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getDecVarAccess().getAtrbIDTerminalRuleCall_1_4_2_1_0_1()); }
		RULE_ID
		{ after(grammarAccess.getDecVarAccess().getAtrbIDTerminalRuleCall_1_4_2_1_0_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__MultDecVars__Alternatives_2_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMultDecVarsAccess().getTypeValueParserRuleCall_2_2_0()); }
		ruleTypeValue
		{ after(grammarAccess.getMultDecVarsAccess().getTypeValueParserRuleCall_2_2_0()); }
	)
	|
	(
		{ before(grammarAccess.getMultDecVarsAccess().getValueAssignment_2_2_1()); }
		(rule__MultDecVars__ValueAssignment_2_2_1)
		{ after(grammarAccess.getMultDecVarsAccess().getValueAssignment_2_2_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__DecVars__AtrbAlternatives_3_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getDecVarsAccess().getAtrbAtriParserRuleCall_3_0_0()); }
		ruleAtri
		{ after(grammarAccess.getDecVarsAccess().getAtrbAtriParserRuleCall_3_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getDecVarsAccess().getAtrbIDTerminalRuleCall_3_0_1()); }
		RULE_ID
		{ after(grammarAccess.getDecVarsAccess().getAtrbIDTerminalRuleCall_3_0_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__DecVars__AtrbAlternatives_4_1_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getDecVarsAccess().getAtrbAtriParserRuleCall_4_1_0_0()); }
		ruleAtri
		{ after(grammarAccess.getDecVarsAccess().getAtrbAtriParserRuleCall_4_1_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getDecVarsAccess().getAtrbIDTerminalRuleCall_4_1_0_1()); }
		RULE_ID
		{ after(grammarAccess.getDecVarsAccess().getAtrbIDTerminalRuleCall_4_1_0_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Atri__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAtriAccess().getGroup_0()); }
		(rule__Atri__Group_0__0)
		{ after(grammarAccess.getAtriAccess().getGroup_0()); }
	)
	|
	(
		{ before(grammarAccess.getAtriAccess().getTypeValueParserRuleCall_1()); }
		ruleTypeValue
		{ after(grammarAccess.getAtriAccess().getTypeValueParserRuleCall_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__TypeValue__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTypeValueAccess().getSTRINGTerminalRuleCall_0()); }
		RULE_STRING
		{ after(grammarAccess.getTypeValueAccess().getSTRINGTerminalRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getTypeValueAccess().getNumbersParserRuleCall_1()); }
		ruleNumbers
		{ after(grammarAccess.getTypeValueAccess().getNumbersParserRuleCall_1()); }
	)
	|
	(
		{ before(grammarAccess.getTypeValueAccess().getBooleanParserRuleCall_2()); }
		ruleBoolean
		{ after(grammarAccess.getTypeValueAccess().getBooleanParserRuleCall_2()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__DecImport__Alternatives_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getDecImportAccess().getSTRINGTerminalRuleCall_1_0()); }
		RULE_STRING
		{ after(grammarAccess.getDecImportAccess().getSTRINGTerminalRuleCall_1_0()); }
	)
	|
	(
		{ before(grammarAccess.getDecImportAccess().getGroup_1_1()); }
		(rule__DecImport__Group_1_1__0)
		{ after(grammarAccess.getDecImportAccess().getGroup_1_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__I__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getIAccess().getGroup_0()); }
		(rule__I__Group_0__0)
		{ after(grammarAccess.getIAccess().getGroup_0()); }
	)
	|
	(
		{ before(grammarAccess.getIAccess().getGroup_1()); }
		(rule__I__Group_1__0)
		{ after(grammarAccess.getIAccess().getGroup_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Y__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getYAccess().getGroup_0()); }
		(rule__Y__Group_0__0)
		{ after(grammarAccess.getYAccess().getGroup_0()); }
	)
	|
	(
		{ before(grammarAccess.getYAccess().getGroup_1()); }
		(rule__Y__Group_1__0)
		{ after(grammarAccess.getYAccess().getGroup_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__F__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFAccess().getGroup_0()); }
		(rule__F__Group_0__0)
		{ after(grammarAccess.getFAccess().getGroup_0()); }
	)
	|
	(
		{ before(grammarAccess.getFAccess().getNumbersParserRuleCall_1()); }
		ruleNumbers
		{ after(grammarAccess.getFAccess().getNumbersParserRuleCall_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Numbers__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getNumbersAccess().getINTTerminalRuleCall_0()); }
		RULE_INT
		{ after(grammarAccess.getNumbersAccess().getINTTerminalRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getNumbersAccess().getDoubleParserRuleCall_1()); }
		ruleDouble
		{ after(grammarAccess.getNumbersAccess().getDoubleParserRuleCall_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ComparisonExpression__OperatorAlternatives_1_1_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getComparisonExpressionAccess().getOperatorLessThanSignKeyword_1_1_0_0()); }
		'<'
		{ after(grammarAccess.getComparisonExpressionAccess().getOperatorLessThanSignKeyword_1_1_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getComparisonExpressionAccess().getOperatorLessThanSignEqualsSignKeyword_1_1_0_1()); }
		'<='
		{ after(grammarAccess.getComparisonExpressionAccess().getOperatorLessThanSignEqualsSignKeyword_1_1_0_1()); }
	)
	|
	(
		{ before(grammarAccess.getComparisonExpressionAccess().getOperatorEqualsSignEqualsSignKeyword_1_1_0_2()); }
		'=='
		{ after(grammarAccess.getComparisonExpressionAccess().getOperatorEqualsSignEqualsSignKeyword_1_1_0_2()); }
	)
	|
	(
		{ before(grammarAccess.getComparisonExpressionAccess().getOperatorGreaterThanSignEqualsSignKeyword_1_1_0_3()); }
		'>='
		{ after(grammarAccess.getComparisonExpressionAccess().getOperatorGreaterThanSignEqualsSignKeyword_1_1_0_3()); }
	)
	|
	(
		{ before(grammarAccess.getComparisonExpressionAccess().getOperatorGreaterThanSignKeyword_1_1_0_4()); }
		'>'
		{ after(grammarAccess.getComparisonExpressionAccess().getOperatorGreaterThanSignKeyword_1_1_0_4()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryExpression__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPrimaryExpressionAccess().getGroup_0()); }
		(rule__PrimaryExpression__Group_0__0)
		{ after(grammarAccess.getPrimaryExpressionAccess().getGroup_0()); }
	)
	|
	(
		{ before(grammarAccess.getPrimaryExpressionAccess().getLiteralParserRuleCall_1()); }
		ruleLiteral
		{ after(grammarAccess.getPrimaryExpressionAccess().getLiteralParserRuleCall_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Literal__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getLiteralAccess().getGroup_0()); }
		(rule__Literal__Group_0__0)
		{ after(grammarAccess.getLiteralAccess().getGroup_0()); }
	)
	|
	(
		{ before(grammarAccess.getLiteralAccess().getNumbersParserRuleCall_1()); }
		ruleNumbers
		{ after(grammarAccess.getLiteralAccess().getNumbersParserRuleCall_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Types__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTypesAccess().getTYPEParserRuleCall_0()); }
		ruleTYPE
		{ after(grammarAccess.getTypesAccess().getTYPEParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getTypesAccess().getStringKeyword_1()); }
		'string'
		{ after(grammarAccess.getTypesAccess().getStringKeyword_1()); }
	)
	|
	(
		{ before(grammarAccess.getTypesAccess().getIntKeyword_2()); }
		'int'
		{ after(grammarAccess.getTypesAccess().getIntKeyword_2()); }
	)
	|
	(
		{ before(grammarAccess.getTypesAccess().getBoolKeyword_3()); }
		'bool'
		{ after(grammarAccess.getTypesAccess().getBoolKeyword_3()); }
	)
	|
	(
		{ before(grammarAccess.getTypesAccess().getByteKeyword_4()); }
		'byte'
		{ after(grammarAccess.getTypesAccess().getByteKeyword_4()); }
	)
	|
	(
		{ before(grammarAccess.getTypesAccess().getRuneKeyword_5()); }
		'rune'
		{ after(grammarAccess.getTypesAccess().getRuneKeyword_5()); }
	)
	|
	(
		{ before(grammarAccess.getTypesAccess().getFloat32Keyword_6()); }
		'float32'
		{ after(grammarAccess.getTypesAccess().getFloat32Keyword_6()); }
	)
	|
	(
		{ before(grammarAccess.getTypesAccess().getFloat64Keyword_7()); }
		'float64'
		{ after(grammarAccess.getTypesAccess().getFloat64Keyword_7()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Modif__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getModifAccess().getVARParserRuleCall_0()); }
		ruleVAR
		{ after(grammarAccess.getModifAccess().getVARParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getModifAccess().getCONSTParserRuleCall_1()); }
		ruleCONST
		{ after(grammarAccess.getModifAccess().getCONSTParserRuleCall_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Boolean__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getBooleanAccess().getTrueKeyword_0()); }
		'true'
		{ after(grammarAccess.getBooleanAccess().getTrueKeyword_0()); }
	)
	|
	(
		{ before(grammarAccess.getBooleanAccess().getFalseKeyword_1()); }
		'false'
		{ after(grammarAccess.getBooleanAccess().getFalseKeyword_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__DecVar__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__DecVar__Group_1__0__Impl
	rule__DecVar__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__DecVar__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDecVarAccess().getModifParserRuleCall_1_0()); }
	ruleModif
	{ after(grammarAccess.getDecVarAccess().getModifParserRuleCall_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__DecVar__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__DecVar__Group_1__1__Impl
	rule__DecVar__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__DecVar__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDecVarAccess().getVarsAssignment_1_1()); }
	(rule__DecVar__VarsAssignment_1_1)
	{ after(grammarAccess.getDecVarAccess().getVarsAssignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__DecVar__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__DecVar__Group_1__2__Impl
	rule__DecVar__Group_1__3
;
finally {
	restoreStackSize(stackSize);
}

rule__DecVar__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDecVarAccess().getGroup_1_2()); }
	(rule__DecVar__Group_1_2__0)*
	{ after(grammarAccess.getDecVarAccess().getGroup_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__DecVar__Group_1__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__DecVar__Group_1__3__Impl
	rule__DecVar__Group_1__4
;
finally {
	restoreStackSize(stackSize);
}

rule__DecVar__Group_1__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDecVarAccess().getTypesParserRuleCall_1_3()); }
	ruleTypes
	{ after(grammarAccess.getDecVarAccess().getTypesParserRuleCall_1_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__DecVar__Group_1__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__DecVar__Group_1__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__DecVar__Group_1__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDecVarAccess().getGroup_1_4()); }
	(rule__DecVar__Group_1_4__0)?
	{ after(grammarAccess.getDecVarAccess().getGroup_1_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__DecVar__Group_1_2__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__DecVar__Group_1_2__0__Impl
	rule__DecVar__Group_1_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__DecVar__Group_1_2__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDecVarAccess().getCommaTerminalRuleCall_1_2_0()); }
	RULE_COMMA
	{ after(grammarAccess.getDecVarAccess().getCommaTerminalRuleCall_1_2_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__DecVar__Group_1_2__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__DecVar__Group_1_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__DecVar__Group_1_2__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDecVarAccess().getVarsAssignment_1_2_1()); }
	(rule__DecVar__VarsAssignment_1_2_1)
	{ after(grammarAccess.getDecVarAccess().getVarsAssignment_1_2_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__DecVar__Group_1_4__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__DecVar__Group_1_4__0__Impl
	rule__DecVar__Group_1_4__1
;
finally {
	restoreStackSize(stackSize);
}

rule__DecVar__Group_1_4__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDecVarAccess().getEqualsSignKeyword_1_4_0()); }
	'='
	{ after(grammarAccess.getDecVarAccess().getEqualsSignKeyword_1_4_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__DecVar__Group_1_4__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__DecVar__Group_1_4__1__Impl
	rule__DecVar__Group_1_4__2
;
finally {
	restoreStackSize(stackSize);
}

rule__DecVar__Group_1_4__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDecVarAccess().getAtrbAssignment_1_4_1()); }
	(rule__DecVar__AtrbAssignment_1_4_1)
	{ after(grammarAccess.getDecVarAccess().getAtrbAssignment_1_4_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__DecVar__Group_1_4__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__DecVar__Group_1_4__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__DecVar__Group_1_4__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDecVarAccess().getGroup_1_4_2()); }
	(rule__DecVar__Group_1_4_2__0)*
	{ after(grammarAccess.getDecVarAccess().getGroup_1_4_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__DecVar__Group_1_4_2__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__DecVar__Group_1_4_2__0__Impl
	rule__DecVar__Group_1_4_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__DecVar__Group_1_4_2__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDecVarAccess().getCommaTerminalRuleCall_1_4_2_0()); }
	RULE_COMMA
	{ after(grammarAccess.getDecVarAccess().getCommaTerminalRuleCall_1_4_2_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__DecVar__Group_1_4_2__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__DecVar__Group_1_4_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__DecVar__Group_1_4_2__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDecVarAccess().getAtrbAssignment_1_4_2_1()); }
	(rule__DecVar__AtrbAssignment_1_4_2_1)
	{ after(grammarAccess.getDecVarAccess().getAtrbAssignment_1_4_2_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__MultDecVars__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MultDecVars__Group__0__Impl
	rule__MultDecVars__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__MultDecVars__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMultDecVarsAccess().getModifParserRuleCall_0()); }
	ruleModif
	{ after(grammarAccess.getMultDecVarsAccess().getModifParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__MultDecVars__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MultDecVars__Group__1__Impl
	rule__MultDecVars__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__MultDecVars__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMultDecVarsAccess().getOpen_parenthesesTerminalRuleCall_1()); }
	RULE_OPEN_PARENTHESES
	{ after(grammarAccess.getMultDecVarsAccess().getOpen_parenthesesTerminalRuleCall_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__MultDecVars__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MultDecVars__Group__2__Impl
	rule__MultDecVars__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__MultDecVars__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMultDecVarsAccess().getGroup_2()); }
	(rule__MultDecVars__Group_2__0)*
	{ after(grammarAccess.getMultDecVarsAccess().getGroup_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__MultDecVars__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MultDecVars__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__MultDecVars__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMultDecVarsAccess().getClosed_parenthesesTerminalRuleCall_3()); }
	RULE_CLOSED_PARENTHESES
	{ after(grammarAccess.getMultDecVarsAccess().getClosed_parenthesesTerminalRuleCall_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__MultDecVars__Group_2__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MultDecVars__Group_2__0__Impl
	rule__MultDecVars__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__MultDecVars__Group_2__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMultDecVarsAccess().getNameAssignment_2_0()); }
	(rule__MultDecVars__NameAssignment_2_0)
	{ after(grammarAccess.getMultDecVarsAccess().getNameAssignment_2_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__MultDecVars__Group_2__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MultDecVars__Group_2__1__Impl
	rule__MultDecVars__Group_2__2
;
finally {
	restoreStackSize(stackSize);
}

rule__MultDecVars__Group_2__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMultDecVarsAccess().getEqualsSignKeyword_2_1()); }
	'='
	{ after(grammarAccess.getMultDecVarsAccess().getEqualsSignKeyword_2_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__MultDecVars__Group_2__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MultDecVars__Group_2__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__MultDecVars__Group_2__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMultDecVarsAccess().getAlternatives_2_2()); }
	(rule__MultDecVars__Alternatives_2_2)
	{ after(grammarAccess.getMultDecVarsAccess().getAlternatives_2_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__DecVars__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__DecVars__Group__0__Impl
	rule__DecVars__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__DecVars__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDecVarsAccess().getVarsAssignment_0()); }
	(rule__DecVars__VarsAssignment_0)
	{ after(grammarAccess.getDecVarsAccess().getVarsAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__DecVars__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__DecVars__Group__1__Impl
	rule__DecVars__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__DecVars__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDecVarsAccess().getGroup_1()); }
	(rule__DecVars__Group_1__0)*
	{ after(grammarAccess.getDecVarsAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__DecVars__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__DecVars__Group__2__Impl
	rule__DecVars__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__DecVars__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDecVarsAccess().getColonEqualsSignKeyword_2()); }
	':='
	{ after(grammarAccess.getDecVarsAccess().getColonEqualsSignKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__DecVars__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__DecVars__Group__3__Impl
	rule__DecVars__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__DecVars__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDecVarsAccess().getAtrbAssignment_3()); }
	(rule__DecVars__AtrbAssignment_3)
	{ after(grammarAccess.getDecVarsAccess().getAtrbAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__DecVars__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__DecVars__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__DecVars__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDecVarsAccess().getGroup_4()); }
	(rule__DecVars__Group_4__0)*
	{ after(grammarAccess.getDecVarsAccess().getGroup_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__DecVars__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__DecVars__Group_1__0__Impl
	rule__DecVars__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__DecVars__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDecVarsAccess().getCommaTerminalRuleCall_1_0()); }
	RULE_COMMA
	{ after(grammarAccess.getDecVarsAccess().getCommaTerminalRuleCall_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__DecVars__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__DecVars__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__DecVars__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDecVarsAccess().getVarsAssignment_1_1()); }
	(rule__DecVars__VarsAssignment_1_1)
	{ after(grammarAccess.getDecVarsAccess().getVarsAssignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__DecVars__Group_4__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__DecVars__Group_4__0__Impl
	rule__DecVars__Group_4__1
;
finally {
	restoreStackSize(stackSize);
}

rule__DecVars__Group_4__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDecVarsAccess().getCommaTerminalRuleCall_4_0()); }
	RULE_COMMA
	{ after(grammarAccess.getDecVarsAccess().getCommaTerminalRuleCall_4_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__DecVars__Group_4__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__DecVars__Group_4__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__DecVars__Group_4__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDecVarsAccess().getAtrbAssignment_4_1()); }
	(rule__DecVars__AtrbAssignment_4_1)
	{ after(grammarAccess.getDecVarsAccess().getAtrbAssignment_4_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Atri__Group_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Atri__Group_0__0__Impl
	rule__Atri__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Atri__Group_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAtriAccess().getOpen_bracketsTerminalRuleCall_0_0()); }
	RULE_OPEN_BRACKETS
	{ after(grammarAccess.getAtriAccess().getOpen_bracketsTerminalRuleCall_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Atri__Group_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Atri__Group_0__1__Impl
	rule__Atri__Group_0__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Atri__Group_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAtriAccess().getINTTerminalRuleCall_0_1()); }
	(RULE_INT)?
	{ after(grammarAccess.getAtriAccess().getINTTerminalRuleCall_0_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Atri__Group_0__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Atri__Group_0__2__Impl
	rule__Atri__Group_0__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Atri__Group_0__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAtriAccess().getClosed_bracketsTerminalRuleCall_0_2()); }
	RULE_CLOSED_BRACKETS
	{ after(grammarAccess.getAtriAccess().getClosed_bracketsTerminalRuleCall_0_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Atri__Group_0__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Atri__Group_0__3__Impl
	rule__Atri__Group_0__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Atri__Group_0__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAtriAccess().getTypesParserRuleCall_0_3()); }
	ruleTypes
	{ after(grammarAccess.getAtriAccess().getTypesParserRuleCall_0_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Atri__Group_0__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Atri__Group_0__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Atri__Group_0__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAtriAccess().getGroup_0_4()); }
	(rule__Atri__Group_0_4__0)?
	{ after(grammarAccess.getAtriAccess().getGroup_0_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Atri__Group_0_4__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Atri__Group_0_4__0__Impl
	rule__Atri__Group_0_4__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Atri__Group_0_4__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAtriAccess().getOpen_KeyTerminalRuleCall_0_4_0()); }
	RULE_OPEN_KEY
	{ after(grammarAccess.getAtriAccess().getOpen_KeyTerminalRuleCall_0_4_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Atri__Group_0_4__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Atri__Group_0_4__1__Impl
	rule__Atri__Group_0_4__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Atri__Group_0_4__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAtriAccess().getTypeValueParserRuleCall_0_4_1()); }
	ruleTypeValue
	{ after(grammarAccess.getAtriAccess().getTypeValueParserRuleCall_0_4_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Atri__Group_0_4__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Atri__Group_0_4__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Atri__Group_0_4__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAtriAccess().getClosed_KeyTerminalRuleCall_0_4_2()); }
	RULE_CLOSED_KEY
	{ after(grammarAccess.getAtriAccess().getClosed_KeyTerminalRuleCall_0_4_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Params__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Params__Group__0__Impl
	rule__Params__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Params__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getParamsAccess().getParamsAssignment_0()); }
	(rule__Params__ParamsAssignment_0)
	{ after(grammarAccess.getParamsAccess().getParamsAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Params__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Params__Group__1__Impl
	rule__Params__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Params__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getParamsAccess().getTypesParserRuleCall_1()); }
	ruleTypes
	{ after(grammarAccess.getParamsAccess().getTypesParserRuleCall_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Params__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Params__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Params__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getParamsAccess().getGroup_2()); }
	(rule__Params__Group_2__0)*
	{ after(grammarAccess.getParamsAccess().getGroup_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Params__Group_2__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Params__Group_2__0__Impl
	rule__Params__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Params__Group_2__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getParamsAccess().getCommaTerminalRuleCall_2_0()); }
	RULE_COMMA
	{ after(grammarAccess.getParamsAccess().getCommaTerminalRuleCall_2_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Params__Group_2__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Params__Group_2__1__Impl
	rule__Params__Group_2__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Params__Group_2__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getParamsAccess().getParamsAssignment_2_1()); }
	(rule__Params__ParamsAssignment_2_1)
	{ after(grammarAccess.getParamsAccess().getParamsAssignment_2_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Params__Group_2__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Params__Group_2__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Params__Group_2__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getParamsAccess().getTypesParserRuleCall_2_2()); }
	ruleTypes
	{ after(grammarAccess.getParamsAccess().getTypesParserRuleCall_2_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__DecImport__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__DecImport__Group__0__Impl
	rule__DecImport__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__DecImport__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDecImportAccess().getIMPORTParserRuleCall_0()); }
	ruleIMPORT
	{ after(grammarAccess.getDecImportAccess().getIMPORTParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__DecImport__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__DecImport__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__DecImport__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDecImportAccess().getAlternatives_1()); }
	(rule__DecImport__Alternatives_1)
	{ after(grammarAccess.getDecImportAccess().getAlternatives_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__DecImport__Group_1_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__DecImport__Group_1_1__0__Impl
	rule__DecImport__Group_1_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__DecImport__Group_1_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDecImportAccess().getOpen_parenthesesTerminalRuleCall_1_1_0()); }
	RULE_OPEN_PARENTHESES
	{ after(grammarAccess.getDecImportAccess().getOpen_parenthesesTerminalRuleCall_1_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__DecImport__Group_1_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__DecImport__Group_1_1__1__Impl
	rule__DecImport__Group_1_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__DecImport__Group_1_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	(
		{ before(grammarAccess.getDecImportAccess().getSTRINGTerminalRuleCall_1_1_1()); }
		(RULE_STRING)
		{ after(grammarAccess.getDecImportAccess().getSTRINGTerminalRuleCall_1_1_1()); }
	)
	(
		{ before(grammarAccess.getDecImportAccess().getSTRINGTerminalRuleCall_1_1_1()); }
		(RULE_STRING)*
		{ after(grammarAccess.getDecImportAccess().getSTRINGTerminalRuleCall_1_1_1()); }
	)
)
;
finally {
	restoreStackSize(stackSize);
}

rule__DecImport__Group_1_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__DecImport__Group_1_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__DecImport__Group_1_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDecImportAccess().getClosed_parenthesesTerminalRuleCall_1_1_2()); }
	RULE_CLOSED_PARENTHESES
	{ after(grammarAccess.getDecImportAccess().getClosed_parenthesesTerminalRuleCall_1_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Operations__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Operations__Group__0__Impl
	rule__Operations__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Operations__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOperationsAccess().getTParserRuleCall_0()); }
	ruleT
	{ after(grammarAccess.getOperationsAccess().getTParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Operations__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Operations__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Operations__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOperationsAccess().getOAssignment_1()); }
	(rule__Operations__OAssignment_1)
	{ after(grammarAccess.getOperationsAccess().getOAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__I__Group_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__I__Group_0__0__Impl
	rule__I__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__I__Group_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIAccess().getPlusTerminalRuleCall_0_0()); }
	RULE_PLUS
	{ after(grammarAccess.getIAccess().getPlusTerminalRuleCall_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__I__Group_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__I__Group_0__1__Impl
	rule__I__Group_0__2
;
finally {
	restoreStackSize(stackSize);
}

rule__I__Group_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIAccess().getTParserRuleCall_0_1()); }
	ruleT
	{ after(grammarAccess.getIAccess().getTParserRuleCall_0_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__I__Group_0__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__I__Group_0__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__I__Group_0__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIAccess().getOAssignment_0_2()); }
	(rule__I__OAssignment_0_2)
	{ after(grammarAccess.getIAccess().getOAssignment_0_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__I__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__I__Group_1__0__Impl
	rule__I__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__I__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIAccess().getMinusTerminalRuleCall_1_0()); }
	RULE_MINUS
	{ after(grammarAccess.getIAccess().getMinusTerminalRuleCall_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__I__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__I__Group_1__1__Impl
	rule__I__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__I__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIAccess().getTParserRuleCall_1_1()); }
	ruleT
	{ after(grammarAccess.getIAccess().getTParserRuleCall_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__I__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__I__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__I__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIAccess().getOAssignment_1_2()); }
	(rule__I__OAssignment_1_2)
	{ after(grammarAccess.getIAccess().getOAssignment_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__T__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__T__Group__0__Impl
	rule__T__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__T__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTAccess().getFParserRuleCall_0()); }
	ruleF
	{ after(grammarAccess.getTAccess().getFParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__T__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__T__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__T__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTAccess().getOAssignment_1()); }
	(rule__T__OAssignment_1)
	{ after(grammarAccess.getTAccess().getOAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Y__Group_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Y__Group_0__0__Impl
	rule__Y__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Y__Group_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getYAccess().getAstericsTerminalRuleCall_0_0()); }
	RULE_ASTERICS
	{ after(grammarAccess.getYAccess().getAstericsTerminalRuleCall_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Y__Group_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Y__Group_0__1__Impl
	rule__Y__Group_0__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Y__Group_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getYAccess().getOAssignment_0_1()); }
	(rule__Y__OAssignment_0_1)
	{ after(grammarAccess.getYAccess().getOAssignment_0_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Y__Group_0__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Y__Group_0__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Y__Group_0__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getYAccess().getOAssignment_0_2()); }
	(rule__Y__OAssignment_0_2)
	{ after(grammarAccess.getYAccess().getOAssignment_0_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Y__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Y__Group_1__0__Impl
	rule__Y__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Y__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getYAccess().getBarTerminalRuleCall_1_0()); }
	RULE_BAR
	{ after(grammarAccess.getYAccess().getBarTerminalRuleCall_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Y__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Y__Group_1__1__Impl
	rule__Y__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Y__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getYAccess().getOAssignment_1_1()); }
	(rule__Y__OAssignment_1_1)
	{ after(grammarAccess.getYAccess().getOAssignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Y__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Y__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Y__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getYAccess().getOAssignment_1_2()); }
	(rule__Y__OAssignment_1_2)
	{ after(grammarAccess.getYAccess().getOAssignment_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__F__Group_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__F__Group_0__0__Impl
	rule__F__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__F__Group_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFAccess().getOpen_parenthesesTerminalRuleCall_0_0()); }
	RULE_OPEN_PARENTHESES
	{ after(grammarAccess.getFAccess().getOpen_parenthesesTerminalRuleCall_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__F__Group_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__F__Group_0__1__Impl
	rule__F__Group_0__2
;
finally {
	restoreStackSize(stackSize);
}

rule__F__Group_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFAccess().getOAssignment_0_1()); }
	(rule__F__OAssignment_0_1)
	{ after(grammarAccess.getFAccess().getOAssignment_0_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__F__Group_0__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__F__Group_0__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__F__Group_0__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFAccess().getClosed_parenthesesTerminalRuleCall_0_2()); }
	RULE_CLOSED_PARENTHESES
	{ after(grammarAccess.getFAccess().getClosed_parenthesesTerminalRuleCall_0_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Double__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Double__Group__0__Impl
	rule__Double__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Double__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDoubleAccess().getINTTerminalRuleCall_0()); }
	RULE_INT
	{ after(grammarAccess.getDoubleAccess().getINTTerminalRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Double__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Double__Group__1__Impl
	rule__Double__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Double__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDoubleAccess().getDotTerminalRuleCall_1()); }
	RULE_DOT
	{ after(grammarAccess.getDoubleAccess().getDotTerminalRuleCall_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Double__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Double__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Double__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDoubleAccess().getINTTerminalRuleCall_2()); }
	RULE_INT
	{ after(grammarAccess.getDoubleAccess().getINTTerminalRuleCall_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Condition__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Condition__Group__0__Impl
	rule__Condition__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Condition__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConditionAccess().getIfAssignment_0()); }
	(rule__Condition__IfAssignment_0)
	{ after(grammarAccess.getConditionAccess().getIfAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Condition__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Condition__Group__1__Impl
	rule__Condition__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Condition__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConditionAccess().getElseifAssignment_1()); }
	(rule__Condition__ElseifAssignment_1)*
	{ after(grammarAccess.getConditionAccess().getElseifAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Condition__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Condition__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Condition__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConditionAccess().getElseAssignment_2()); }
	(rule__Condition__ElseAssignment_2)?
	{ after(grammarAccess.getConditionAccess().getElseAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__IfCondition__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__IfCondition__Group__0__Impl
	rule__IfCondition__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__IfCondition__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIfConditionAccess().getIFParserRuleCall_0()); }
	ruleIF
	{ after(grammarAccess.getIfConditionAccess().getIFParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__IfCondition__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__IfCondition__Group__1__Impl
	rule__IfCondition__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__IfCondition__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIfConditionAccess().getCondAssignment_1()); }
	(rule__IfCondition__CondAssignment_1)
	{ after(grammarAccess.getIfConditionAccess().getCondAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__IfCondition__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__IfCondition__Group__2__Impl
	rule__IfCondition__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__IfCondition__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIfConditionAccess().getOpen_KeyTerminalRuleCall_2()); }
	RULE_OPEN_KEY
	{ after(grammarAccess.getIfConditionAccess().getOpen_KeyTerminalRuleCall_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__IfCondition__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__IfCondition__Group__3__Impl
	rule__IfCondition__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__IfCondition__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIfConditionAccess().getThenAssignment_3()); }
	(rule__IfCondition__ThenAssignment_3)*
	{ after(grammarAccess.getIfConditionAccess().getThenAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__IfCondition__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__IfCondition__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__IfCondition__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIfConditionAccess().getClosed_KeyTerminalRuleCall_4()); }
	RULE_CLOSED_KEY
	{ after(grammarAccess.getIfConditionAccess().getClosed_KeyTerminalRuleCall_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ElseIfCondition__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ElseIfCondition__Group__0__Impl
	rule__ElseIfCondition__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ElseIfCondition__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getElseIfConditionAccess().getELSEParserRuleCall_0()); }
	(ruleELSE)
	{ after(grammarAccess.getElseIfConditionAccess().getELSEParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ElseIfCondition__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ElseIfCondition__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ElseIfCondition__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getElseIfConditionAccess().getIfConditionParserRuleCall_1()); }
	ruleIfCondition
	{ after(grammarAccess.getElseIfConditionAccess().getIfConditionParserRuleCall_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ElseCondition__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ElseCondition__Group__0__Impl
	rule__ElseCondition__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ElseCondition__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getElseConditionAccess().getELSEParserRuleCall_0()); }
	(ruleELSE)
	{ after(grammarAccess.getElseConditionAccess().getELSEParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ElseCondition__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ElseCondition__Group__1__Impl
	rule__ElseCondition__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ElseCondition__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getElseConditionAccess().getOpen_KeyTerminalRuleCall_1()); }
	RULE_OPEN_KEY
	{ after(grammarAccess.getElseConditionAccess().getOpen_KeyTerminalRuleCall_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ElseCondition__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ElseCondition__Group__2__Impl
	rule__ElseCondition__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__ElseCondition__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getElseConditionAccess().getThenAssignment_2()); }
	(rule__ElseCondition__ThenAssignment_2)*
	{ after(grammarAccess.getElseConditionAccess().getThenAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ElseCondition__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ElseCondition__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ElseCondition__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getElseConditionAccess().getClosed_KeyTerminalRuleCall_3()); }
	RULE_CLOSED_KEY
	{ after(grammarAccess.getElseConditionAccess().getClosed_KeyTerminalRuleCall_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__OrExpression__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__OrExpression__Group__0__Impl
	rule__OrExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__OrExpression__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOrExpressionAccess().getAndExpressionParserRuleCall_0()); }
	ruleAndExpression
	{ after(grammarAccess.getOrExpressionAccess().getAndExpressionParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__OrExpression__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__OrExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__OrExpression__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOrExpressionAccess().getGroup_1()); }
	(rule__OrExpression__Group_1__0)*
	{ after(grammarAccess.getOrExpressionAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__OrExpression__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__OrExpression__Group_1__0__Impl
	rule__OrExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__OrExpression__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOrExpressionAccess().getOrExpressionLeftAction_1_0()); }
	()
	{ after(grammarAccess.getOrExpressionAccess().getOrExpressionLeftAction_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__OrExpression__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__OrExpression__Group_1__1__Impl
	rule__OrExpression__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__OrExpression__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOrExpressionAccess().getVerticalLineVerticalLineKeyword_1_1()); }
	'||'
	{ after(grammarAccess.getOrExpressionAccess().getVerticalLineVerticalLineKeyword_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__OrExpression__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__OrExpression__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__OrExpression__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOrExpressionAccess().getRightAssignment_1_2()); }
	(rule__OrExpression__RightAssignment_1_2)
	{ after(grammarAccess.getOrExpressionAccess().getRightAssignment_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__AndExpression__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AndExpression__Group__0__Impl
	rule__AndExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AndExpression__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAndExpressionAccess().getComparisonExpressionParserRuleCall_0()); }
	ruleComparisonExpression
	{ after(grammarAccess.getAndExpressionAccess().getComparisonExpressionParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__AndExpression__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AndExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AndExpression__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAndExpressionAccess().getGroup_1()); }
	(rule__AndExpression__Group_1__0)*
	{ after(grammarAccess.getAndExpressionAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__AndExpression__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AndExpression__Group_1__0__Impl
	rule__AndExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AndExpression__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAndExpressionAccess().getAndExpressionLeftAction_1_0()); }
	()
	{ after(grammarAccess.getAndExpressionAccess().getAndExpressionLeftAction_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__AndExpression__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AndExpression__Group_1__1__Impl
	rule__AndExpression__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__AndExpression__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAndExpressionAccess().getAmpersandAmpersandKeyword_1_1()); }
	'&&'
	{ after(grammarAccess.getAndExpressionAccess().getAmpersandAmpersandKeyword_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__AndExpression__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AndExpression__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AndExpression__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAndExpressionAccess().getRightAssignment_1_2()); }
	(rule__AndExpression__RightAssignment_1_2)
	{ after(grammarAccess.getAndExpressionAccess().getRightAssignment_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ComparisonExpression__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ComparisonExpression__Group__0__Impl
	rule__ComparisonExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ComparisonExpression__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getComparisonExpressionAccess().getPrimaryExpressionParserRuleCall_0()); }
	rulePrimaryExpression
	{ after(grammarAccess.getComparisonExpressionAccess().getPrimaryExpressionParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ComparisonExpression__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ComparisonExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ComparisonExpression__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getComparisonExpressionAccess().getGroup_1()); }
	(rule__ComparisonExpression__Group_1__0)*
	{ after(grammarAccess.getComparisonExpressionAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ComparisonExpression__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ComparisonExpression__Group_1__0__Impl
	rule__ComparisonExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ComparisonExpression__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getComparisonExpressionAccess().getComparisonExpressionLeftAction_1_0()); }
	()
	{ after(grammarAccess.getComparisonExpressionAccess().getComparisonExpressionLeftAction_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ComparisonExpression__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ComparisonExpression__Group_1__1__Impl
	rule__ComparisonExpression__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ComparisonExpression__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getComparisonExpressionAccess().getOperatorAssignment_1_1()); }
	(rule__ComparisonExpression__OperatorAssignment_1_1)
	{ after(grammarAccess.getComparisonExpressionAccess().getOperatorAssignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ComparisonExpression__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ComparisonExpression__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ComparisonExpression__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getComparisonExpressionAccess().getRightAssignment_1_2()); }
	(rule__ComparisonExpression__RightAssignment_1_2)
	{ after(grammarAccess.getComparisonExpressionAccess().getRightAssignment_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__PrimaryExpression__Group_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PrimaryExpression__Group_0__0__Impl
	rule__PrimaryExpression__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryExpression__Group_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPrimaryExpressionAccess().getOpen_parenthesesTerminalRuleCall_0_0()); }
	RULE_OPEN_PARENTHESES
	{ after(grammarAccess.getPrimaryExpressionAccess().getOpen_parenthesesTerminalRuleCall_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryExpression__Group_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PrimaryExpression__Group_0__1__Impl
	rule__PrimaryExpression__Group_0__2
;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryExpression__Group_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPrimaryExpressionAccess().getExpressionParserRuleCall_0_1()); }
	ruleExpression
	{ after(grammarAccess.getPrimaryExpressionAccess().getExpressionParserRuleCall_0_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryExpression__Group_0__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PrimaryExpression__Group_0__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryExpression__Group_0__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPrimaryExpressionAccess().getClosed_parenthesesTerminalRuleCall_0_2()); }
	RULE_CLOSED_PARENTHESES
	{ after(grammarAccess.getPrimaryExpressionAccess().getClosed_parenthesesTerminalRuleCall_0_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Literal__Group_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Literal__Group_0__0__Impl
	rule__Literal__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Literal__Group_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLiteralAccess().getLiteralAction_0_0()); }
	()
	{ after(grammarAccess.getLiteralAccess().getLiteralAction_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Literal__Group_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Literal__Group_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Literal__Group_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLiteralAccess().getValueAssignment_0_1()); }
	(rule__Literal__ValueAssignment_0_1)
	{ after(grammarAccess.getLiteralAccess().getValueAssignment_0_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__DecFunc__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__DecFunc__Group__0__Impl
	rule__DecFunc__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__DecFunc__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDecFuncAccess().getFUNCParserRuleCall_0()); }
	ruleFUNC
	{ after(grammarAccess.getDecFuncAccess().getFUNCParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__DecFunc__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__DecFunc__Group__1__Impl
	rule__DecFunc__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__DecFunc__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDecFuncAccess().getNameAssignment_1()); }
	(rule__DecFunc__NameAssignment_1)
	{ after(grammarAccess.getDecFuncAccess().getNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__DecFunc__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__DecFunc__Group__2__Impl
	rule__DecFunc__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__DecFunc__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDecFuncAccess().getOpen_parenthesesTerminalRuleCall_2()); }
	RULE_OPEN_PARENTHESES
	{ after(grammarAccess.getDecFuncAccess().getOpen_parenthesesTerminalRuleCall_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__DecFunc__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__DecFunc__Group__3__Impl
	rule__DecFunc__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__DecFunc__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDecFuncAccess().getParamAssignment_3()); }
	(rule__DecFunc__ParamAssignment_3)*
	{ after(grammarAccess.getDecFuncAccess().getParamAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__DecFunc__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__DecFunc__Group__4__Impl
	rule__DecFunc__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__DecFunc__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDecFuncAccess().getClosed_parenthesesTerminalRuleCall_4()); }
	RULE_CLOSED_PARENTHESES
	{ after(grammarAccess.getDecFuncAccess().getClosed_parenthesesTerminalRuleCall_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__DecFunc__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__DecFunc__Group__5__Impl
	rule__DecFunc__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__DecFunc__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDecFuncAccess().getOpen_KeyTerminalRuleCall_5()); }
	RULE_OPEN_KEY
	{ after(grammarAccess.getDecFuncAccess().getOpen_KeyTerminalRuleCall_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__DecFunc__Group__6
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__DecFunc__Group__6__Impl
	rule__DecFunc__Group__7
;
finally {
	restoreStackSize(stackSize);
}

rule__DecFunc__Group__6__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDecFuncAccess().getArgsAssignment_6()); }
	(rule__DecFunc__ArgsAssignment_6)*
	{ after(grammarAccess.getDecFuncAccess().getArgsAssignment_6()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__DecFunc__Group__7
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__DecFunc__Group__7__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__DecFunc__Group__7__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDecFuncAccess().getClosed_KeyTerminalRuleCall_7()); }
	RULE_CLOSED_KEY
	{ after(grammarAccess.getDecFuncAccess().getClosed_KeyTerminalRuleCall_7()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__DataType__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__DataType__Group__0__Impl
	rule__DataType__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__DataType__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDataTypeAccess().getDatatypeKeyword_0()); }
	'datatype'
	{ after(grammarAccess.getDataTypeAccess().getDatatypeKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__DataType__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__DataType__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__DataType__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDataTypeAccess().getNameAssignment_1()); }
	(rule__DataType__NameAssignment_1)
	{ after(grammarAccess.getDataTypeAccess().getNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Go__ElementsAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getGoAccess().getElementsGreetingParserRuleCall_0()); }
		ruleGreeting
		{ after(grammarAccess.getGoAccess().getElementsGreetingParserRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__DecVar__VarsAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getDecVarAccess().getVarsIDTerminalRuleCall_1_1_0()); }
		RULE_ID
		{ after(grammarAccess.getDecVarAccess().getVarsIDTerminalRuleCall_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__DecVar__VarsAssignment_1_2_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getDecVarAccess().getVarsIDTerminalRuleCall_1_2_1_0()); }
		RULE_ID
		{ after(grammarAccess.getDecVarAccess().getVarsIDTerminalRuleCall_1_2_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__DecVar__AtrbAssignment_1_4_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getDecVarAccess().getAtrbAlternatives_1_4_1_0()); }
		(rule__DecVar__AtrbAlternatives_1_4_1_0)
		{ after(grammarAccess.getDecVarAccess().getAtrbAlternatives_1_4_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__DecVar__AtrbAssignment_1_4_2_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getDecVarAccess().getAtrbAlternatives_1_4_2_1_0()); }
		(rule__DecVar__AtrbAlternatives_1_4_2_1_0)
		{ after(grammarAccess.getDecVarAccess().getAtrbAlternatives_1_4_2_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__MultDecVars__NameAssignment_2_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMultDecVarsAccess().getNameIDTerminalRuleCall_2_0_0()); }
		RULE_ID
		{ after(grammarAccess.getMultDecVarsAccess().getNameIDTerminalRuleCall_2_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__MultDecVars__ValueAssignment_2_2_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMultDecVarsAccess().getValueIDTerminalRuleCall_2_2_1_0()); }
		RULE_ID
		{ after(grammarAccess.getMultDecVarsAccess().getValueIDTerminalRuleCall_2_2_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__DecVars__VarsAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getDecVarsAccess().getVarsIDTerminalRuleCall_0_0()); }
		RULE_ID
		{ after(grammarAccess.getDecVarsAccess().getVarsIDTerminalRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__DecVars__VarsAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getDecVarsAccess().getVarsIDTerminalRuleCall_1_1_0()); }
		RULE_ID
		{ after(grammarAccess.getDecVarsAccess().getVarsIDTerminalRuleCall_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__DecVars__AtrbAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getDecVarsAccess().getAtrbAlternatives_3_0()); }
		(rule__DecVars__AtrbAlternatives_3_0)
		{ after(grammarAccess.getDecVarsAccess().getAtrbAlternatives_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__DecVars__AtrbAssignment_4_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getDecVarsAccess().getAtrbAlternatives_4_1_0()); }
		(rule__DecVars__AtrbAlternatives_4_1_0)
		{ after(grammarAccess.getDecVarsAccess().getAtrbAlternatives_4_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Params__ParamsAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getParamsAccess().getParamsIDTerminalRuleCall_0_0()); }
		RULE_ID
		{ after(grammarAccess.getParamsAccess().getParamsIDTerminalRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Params__ParamsAssignment_2_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getParamsAccess().getParamsIDTerminalRuleCall_2_1_0()); }
		RULE_ID
		{ after(grammarAccess.getParamsAccess().getParamsIDTerminalRuleCall_2_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Operations__OAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getOperationsAccess().getOIParserRuleCall_1_0()); }
		ruleI
		{ after(grammarAccess.getOperationsAccess().getOIParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__I__OAssignment_0_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getIAccess().getOIParserRuleCall_0_2_0()); }
		ruleI
		{ after(grammarAccess.getIAccess().getOIParserRuleCall_0_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__I__OAssignment_1_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getIAccess().getOIParserRuleCall_1_2_0()); }
		ruleI
		{ after(grammarAccess.getIAccess().getOIParserRuleCall_1_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__T__OAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTAccess().getOYParserRuleCall_1_0()); }
		ruleY
		{ after(grammarAccess.getTAccess().getOYParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Y__OAssignment_0_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getYAccess().getOFParserRuleCall_0_1_0()); }
		ruleF
		{ after(grammarAccess.getYAccess().getOFParserRuleCall_0_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Y__OAssignment_0_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getYAccess().getOYParserRuleCall_0_2_0()); }
		ruleY
		{ after(grammarAccess.getYAccess().getOYParserRuleCall_0_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Y__OAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getYAccess().getOFParserRuleCall_1_1_0()); }
		ruleF
		{ after(grammarAccess.getYAccess().getOFParserRuleCall_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Y__OAssignment_1_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getYAccess().getOYParserRuleCall_1_2_0()); }
		ruleY
		{ after(grammarAccess.getYAccess().getOYParserRuleCall_1_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__F__OAssignment_0_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFAccess().getOOperationsParserRuleCall_0_1_0()); }
		ruleOperations
		{ after(grammarAccess.getFAccess().getOOperationsParserRuleCall_0_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Condition__IfAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getConditionAccess().getIfIfConditionParserRuleCall_0_0()); }
		ruleIfCondition
		{ after(grammarAccess.getConditionAccess().getIfIfConditionParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Condition__ElseifAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getConditionAccess().getElseifElseIfConditionParserRuleCall_1_0()); }
		ruleElseIfCondition
		{ after(grammarAccess.getConditionAccess().getElseifElseIfConditionParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Condition__ElseAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getConditionAccess().getElseElseConditionParserRuleCall_2_0()); }
		ruleElseCondition
		{ after(grammarAccess.getConditionAccess().getElseElseConditionParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__IfCondition__CondAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getIfConditionAccess().getCondExpressionParserRuleCall_1_0()); }
		ruleExpression
		{ after(grammarAccess.getIfConditionAccess().getCondExpressionParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__IfCondition__ThenAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getIfConditionAccess().getThenGreetingParserRuleCall_3_0()); }
		ruleGreeting
		{ after(grammarAccess.getIfConditionAccess().getThenGreetingParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ElseCondition__ThenAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getElseConditionAccess().getThenGreetingParserRuleCall_2_0()); }
		ruleGreeting
		{ after(grammarAccess.getElseConditionAccess().getThenGreetingParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__OrExpression__RightAssignment_1_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getOrExpressionAccess().getRightAndExpressionParserRuleCall_1_2_0()); }
		ruleAndExpression
		{ after(grammarAccess.getOrExpressionAccess().getRightAndExpressionParserRuleCall_1_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__AndExpression__RightAssignment_1_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAndExpressionAccess().getRightComparisonExpressionParserRuleCall_1_2_0()); }
		ruleComparisonExpression
		{ after(grammarAccess.getAndExpressionAccess().getRightComparisonExpressionParserRuleCall_1_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ComparisonExpression__OperatorAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getComparisonExpressionAccess().getOperatorAlternatives_1_1_0()); }
		(rule__ComparisonExpression__OperatorAlternatives_1_1_0)
		{ after(grammarAccess.getComparisonExpressionAccess().getOperatorAlternatives_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ComparisonExpression__RightAssignment_1_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getComparisonExpressionAccess().getRightPrimaryExpressionParserRuleCall_1_2_0()); }
		rulePrimaryExpression
		{ after(grammarAccess.getComparisonExpressionAccess().getRightPrimaryExpressionParserRuleCall_1_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Literal__ValueAssignment_0_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getLiteralAccess().getValueBooleanParserRuleCall_0_1_0()); }
		ruleBoolean
		{ after(grammarAccess.getLiteralAccess().getValueBooleanParserRuleCall_0_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__DecFunc__NameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getDecFuncAccess().getNameIDTerminalRuleCall_1_0()); }
		RULE_ID
		{ after(grammarAccess.getDecFuncAccess().getNameIDTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__DecFunc__ParamAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getDecFuncAccess().getParamParamsParserRuleCall_3_0()); }
		ruleParams
		{ after(grammarAccess.getDecFuncAccess().getParamParamsParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__DecFunc__ArgsAssignment_6
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getDecFuncAccess().getArgsGreetingParserRuleCall_6_0()); }
		ruleGreeting
		{ after(grammarAccess.getDecFuncAccess().getArgsGreetingParserRuleCall_6_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__DataType__NameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getDataTypeAccess().getNameIDTerminalRuleCall_1_0()); }
		RULE_ID
		{ after(grammarAccess.getDataTypeAccess().getNameIDTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

RULE_OPEN_KEY : '{';

RULE_CLOSED_KEY : '}';

RULE_OPEN_BRACKETS : '[';

RULE_CLOSED_BRACKETS : ']';

RULE_DOT : '.';

RULE_COMMA : ',';

RULE_OPEN_PARENTHESES : '(';

RULE_CLOSED_PARENTHESES : ')';

RULE_BAR : '/';

RULE_ASTERICS : '*';

RULE_MINUS : '-';

RULE_PLUS : '+';

RULE_EOL : (RULE_NEWLINE|RULE_COMMENTS);

fragment RULE_COMMENTS : (RULE_ML_COMMENT|RULE_SL_COMMENT);

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

fragment RULE_NEWLINE : '\r'? '\n';

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
